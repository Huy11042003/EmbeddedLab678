
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a98c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033a4  0800ab20  0800ab20  0001ab20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec4  0800dec4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800decc  0800decc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ded4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000003c8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021848  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004597  00000000  00000000  00041a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  00045ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001590  00000000  00000000  00047740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027507  00000000  00000000  00048cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020102  00000000  00000000  000701d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1392  00000000  00000000  000902d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017166b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070dc  00000000  00000000  001716c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab04 	.word	0x0800ab04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800ab04 	.word	0x0800ab04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <MX_ADC1_Init+0x10c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ee0:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <MX_ADC1_Init+0x110>)
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000eec:	2205      	movs	r2, #5
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f00:	f002 f852 	bl	8002fa8 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f001 fa19 	bl	8002340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4822      	ldr	r0, [pc, #136]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f20:	f002 f9b4 	bl	800328c <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f2a:	f001 fa09 	bl	8002340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f2e:	2309      	movs	r3, #9
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f3c:	f002 f9a6 	bl	800328c <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f001 f9fb 	bl	8002340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f58:	f002 f998 	bl	800328c <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f62:	f001 f9ed 	bl	8002340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f66:	230b      	movs	r3, #11
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f74:	f002 f98a 	bl	800328c <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f7e:	f001 f9df 	bl	8002340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f82:	230c      	movs	r3, #12
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f86:	2305      	movs	r3, #5
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f90:	f002 f97c 	bl	800328c <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f9a:	f001 f9d1 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000022c 	.word	0x2000022c
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a3c      	ldr	r2, [pc, #240]	; (80010c4 <HAL_ADC_MspInit+0x110>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d171      	bne.n	80010ba <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_ADC_MspInit+0x114>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800102a:	2307      	movs	r3, #7
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4823      	ldr	r0, [pc, #140]	; (80010cc <HAL_ADC_MspInit+0x118>)
 800103e:	f003 f8d9 	bl	80041f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001042:	2303      	movs	r3, #3
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <HAL_ADC_MspInit+0x11c>)
 8001056:	f003 f8cd 	bl	80041f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_ADC_MspInit+0x124>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800107c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001080:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001088:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010a0:	f002 fca6 	bl	80039f0 <HAL_DMA_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010aa:	f001 f949 	bl	8002340 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_ADC_MspInit+0x120>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	20000274 	.word	0x20000274
 80010d8:	40026410 	.word	0x40026410

080010dc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2108      	movs	r1, #8
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <button_init+0x14>)
 80010e6:	f003 fa21 	bl	800452c <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <button_Scan>:

void button_Scan(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	482f      	ldr	r0, [pc, #188]	; (80011bc <button_Scan+0xc8>)
 8001100:	f003 fa14 	bl	800452c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <button_Scan+0xc8>)
 800110a:	f003 fa0f 	bl	800452c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800110e:	230a      	movs	r3, #10
 8001110:	2202      	movs	r2, #2
 8001112:	492b      	ldr	r1, [pc, #172]	; (80011c0 <button_Scan+0xcc>)
 8001114:	482b      	ldr	r0, [pc, #172]	; (80011c4 <button_Scan+0xd0>)
 8001116:	f004 f9ba 	bl	800548e <HAL_SPI_Receive>
	  int button_index = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800111e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001122:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e03f      	b.n	80011aa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db06      	blt.n	800113e <button_Scan+0x4a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	dc03      	bgt.n	800113e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3304      	adds	r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e018      	b.n	8001170 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b03      	cmp	r3, #3
 8001142:	dd07      	ble.n	8001154 <button_Scan+0x60>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dc04      	bgt.n	8001154 <button_Scan+0x60>
			  button_index = 7 - i;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f1c3 0307 	rsb	r3, r3, #7
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e00d      	b.n	8001170 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b07      	cmp	r3, #7
 8001158:	dd06      	ble.n	8001168 <button_Scan+0x74>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0b      	cmp	r3, #11
 800115e:	dc03      	bgt.n	8001168 <button_Scan+0x74>
			  button_index = i + 4;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e003      	b.n	8001170 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f1c3 0317 	rsb	r3, r3, #23
 800116e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <button_Scan+0xcc>)
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	897b      	ldrh	r3, [r7, #10]
 8001176:	4013      	ands	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <button_Scan+0x96>
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <button_Scan+0xd4>)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2100      	movs	r1, #0
 8001184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001188:	e009      	b.n	800119e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <button_Scan+0xd4>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001192:	3301      	adds	r3, #1
 8001194:	b299      	uxth	r1, r3
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <button_Scan+0xd4>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800119e:	897b      	ldrh	r3, [r7, #10]
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3301      	adds	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	ddbc      	ble.n	800112a <button_Scan+0x36>
	  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	20000200 	.word	0x20000200
 80011c4:	200003e0 	.word	0x200003e0
 80011c8:	200002d4 	.word	0x200002d4

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_DMA_Init+0x3c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <MX_DMA_Init+0x3c>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_DMA_Init+0x3c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2038      	movs	r0, #56	; 0x38
 80011f4:	f002 fbc5 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f8:	2038      	movs	r0, #56	; 0x38
 80011fa:	f002 fbde 	bl	80039ba <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_FSMC_Init+0xec>)
 800123a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800123e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001242:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <MX_FSMC_Init+0xf0>)
 8001244:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_FSMC_Init+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_FSMC_Init+0xec>)
 800125a:	2210      	movs	r2, #16
 800125c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_FSMC_Init+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_FSMC_Init+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_FSMC_Init+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_FSMC_Init+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800129e:	230f      	movs	r3, #15
 80012a0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012a2:	230f      	movs	r3, #15
 80012a4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012a6:	233c      	movs	r3, #60	; 0x3c
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012ae:	2310      	movs	r3, #16
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012b2:	2311      	movs	r3, #17
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012ba:	2308      	movs	r3, #8
 80012bc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012be:	230f      	movs	r3, #15
 80012c0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012c2:	2309      	movs	r3, #9
 80012c4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012ca:	2310      	movs	r3, #16
 80012cc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012ce:	2311      	movs	r3, #17
 80012d0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012d6:	463a      	mov	r2, r7
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_FSMC_Init+0xec>)
 80012e0:	f004 fcb8 	bl	8005c54 <HAL_SRAM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012ea:	f001 f829 	bl	8002340 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002f4 	.word	0x200002f4
 80012fc:	a0000104 	.word	0xa0000104

08001300 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_FSMC_MspInit+0x88>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d131      	bne.n	8001380 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_FSMC_MspInit+0x88>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_FSMC_MspInit+0x8c>)
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <HAL_FSMC_MspInit+0x8c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6393      	str	r3, [r2, #56]	; 0x38
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_FSMC_MspInit+0x8c>)
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800133e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001342:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001350:	230c      	movs	r3, #12
 8001352:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <HAL_FSMC_MspInit+0x90>)
 800135a:	f002 ff4b 	bl	80041f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800135e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001362:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001370:	230c      	movs	r3, #12
 8001372:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <HAL_FSMC_MspInit+0x94>)
 800137a:	f002 ff3b 	bl	80041f4 <HAL_GPIO_Init>
 800137e:	e000      	b.n	8001382 <HAL_FSMC_MspInit+0x82>
    return;
 8001380:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000204 	.word	0x20000204
 800138c:	40023800 	.word	0x40023800
 8001390:	40021000 	.word	0x40021000
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013a0:	f7ff ffae 	bl	8001300 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <MX_GPIO_Init+0x258>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a8e      	ldr	r2, [pc, #568]	; (8001604 <MX_GPIO_Init+0x258>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <MX_GPIO_Init+0x258>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	4b88      	ldr	r3, [pc, #544]	; (8001604 <MX_GPIO_Init+0x258>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a87      	ldr	r2, [pc, #540]	; (8001604 <MX_GPIO_Init+0x258>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <MX_GPIO_Init+0x258>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <MX_GPIO_Init+0x258>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a80      	ldr	r2, [pc, #512]	; (8001604 <MX_GPIO_Init+0x258>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <MX_GPIO_Init+0x258>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <MX_GPIO_Init+0x258>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a79      	ldr	r2, [pc, #484]	; (8001604 <MX_GPIO_Init+0x258>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <MX_GPIO_Init+0x258>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b73      	ldr	r3, [pc, #460]	; (8001604 <MX_GPIO_Init+0x258>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a72      	ldr	r2, [pc, #456]	; (8001604 <MX_GPIO_Init+0x258>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b70      	ldr	r3, [pc, #448]	; (8001604 <MX_GPIO_Init+0x258>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <MX_GPIO_Init+0x258>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a6b      	ldr	r2, [pc, #428]	; (8001604 <MX_GPIO_Init+0x258>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b69      	ldr	r3, [pc, #420]	; (8001604 <MX_GPIO_Init+0x258>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b65      	ldr	r3, [pc, #404]	; (8001604 <MX_GPIO_Init+0x258>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a64      	ldr	r2, [pc, #400]	; (8001604 <MX_GPIO_Init+0x258>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b62      	ldr	r3, [pc, #392]	; (8001604 <MX_GPIO_Init+0x258>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <MX_GPIO_Init+0x258>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a5d      	ldr	r2, [pc, #372]	; (8001604 <MX_GPIO_Init+0x258>)
 8001490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <MX_GPIO_Init+0x258>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2170      	movs	r1, #112	; 0x70
 80014a6:	4858      	ldr	r0, [pc, #352]	; (8001608 <MX_GPIO_Init+0x25c>)
 80014a8:	f003 f840 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80014b2:	4856      	ldr	r0, [pc, #344]	; (800160c <MX_GPIO_Init+0x260>)
 80014b4:	f003 f83a 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014be:	4854      	ldr	r0, [pc, #336]	; (8001610 <MX_GPIO_Init+0x264>)
 80014c0:	f003 f834 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80014ca:	4852      	ldr	r0, [pc, #328]	; (8001614 <MX_GPIO_Init+0x268>)
 80014cc:	f003 f82e 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d6:	4850      	ldr	r0, [pc, #320]	; (8001618 <MX_GPIO_Init+0x26c>)
 80014d8:	f003 f828 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2108      	movs	r1, #8
 80014e0:	484e      	ldr	r0, [pc, #312]	; (800161c <MX_GPIO_Init+0x270>)
 80014e2:	f003 f823 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014e6:	2370      	movs	r3, #112	; 0x70
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4842      	ldr	r0, [pc, #264]	; (8001608 <MX_GPIO_Init+0x25c>)
 80014fe:	f002 fe79 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001502:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	483c      	ldr	r0, [pc, #240]	; (800160c <MX_GPIO_Init+0x260>)
 800151c:	f002 fe6a 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8001520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4836      	ldr	r0, [pc, #216]	; (8001610 <MX_GPIO_Init+0x264>)
 8001536:	f002 fe5d 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 800153a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	482f      	ldr	r0, [pc, #188]	; (8001610 <MX_GPIO_Init+0x264>)
 8001554:	f002 fe4e 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	482b      	ldr	r0, [pc, #172]	; (8001618 <MX_GPIO_Init+0x26c>)
 800156c:	f002 fe42 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001570:	2330      	movs	r3, #48	; 0x30
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_GPIO_Init+0x260>)
 8001584:	f002 fe36 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001588:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_GPIO_Init+0x268>)
 80015a2:	f002 fe27 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80015a6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4814      	ldr	r0, [pc, #80]	; (800160c <MX_GPIO_Init+0x260>)
 80015bc:	f002 fe1a 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	480f      	ldr	r0, [pc, #60]	; (8001618 <MX_GPIO_Init+0x26c>)
 80015da:	f002 fe0b 	bl	80041f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015de:	2308      	movs	r3, #8
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <MX_GPIO_Init+0x270>)
 80015f6:	f002 fdfd 	bl	80041f4 <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	; 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020800 	.word	0x40020800
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020c00 	.word	0x40020c00

08001620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f002 ff99 	bl	8004594 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fe6a 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000344 	.word	0x20000344
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_I2C_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12b      	bne.n	80016f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016be:	2312      	movs	r3, #18
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ca:	2304      	movs	r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <HAL_I2C_MspInit+0x8c>)
 80016d6:	f002 fd8d 	bl	80041f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400

0800170c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <LCD_WR_REG+0x1c>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	8013      	strh	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	600ffffe 	.word	0x600ffffe

0800172c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <LCD_WR_DATA+0x1c>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	8053      	strh	r3, [r2, #2]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	600ffffe 	.word	0x600ffffe

0800174c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <LCD_RD_DATA+0x20>)
 8001754:	885b      	ldrh	r3, [r3, #2]
 8001756:	b29b      	uxth	r3, r3
 8001758:	80fb      	strh	r3, [r7, #6]
	return ram;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b29b      	uxth	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	600ffffe 	.word	0x600ffffe

08001770 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	807b      	strh	r3, [r7, #2]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800178e:	202a      	movs	r0, #42	; 0x2a
 8001790:	f7ff ffbc 	bl	800170c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffc6 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ffc0 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ffba 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffb4 	bl	800172c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c4:	202b      	movs	r0, #43	; 0x2b
 80017c6:	f7ff ffa1 	bl	800170c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ffab 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffa5 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017e2:	883b      	ldrh	r3, [r7, #0]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff9f 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff99 	bl	800172c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017fa:	202c      	movs	r0, #44	; 0x2c
 80017fc:	f7ff ff86 	bl	800170c <LCD_WR_REG>
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <lcd_Clear+0x60>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <lcd_Clear+0x60>)
 800181c:	885b      	ldrh	r3, [r3, #2]
 800181e:	3b01      	subs	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	2100      	movs	r1, #0
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ffa3 	bl	8001770 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800182a:	2300      	movs	r3, #0
 800182c:	81fb      	strh	r3, [r7, #14]
 800182e:	e011      	b.n	8001854 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001830:	2300      	movs	r3, #0
 8001832:	81bb      	strh	r3, [r7, #12]
 8001834:	e006      	b.n	8001844 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff77 	bl	800172c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800183e:	89bb      	ldrh	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	81bb      	strh	r3, [r7, #12]
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <lcd_Clear+0x60>)
 8001846:	885b      	ldrh	r3, [r3, #2]
 8001848:	89ba      	ldrh	r2, [r7, #12]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3f3      	bcc.n	8001836 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	3301      	adds	r3, #1
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <lcd_Clear+0x60>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	89fa      	ldrh	r2, [r7, #14]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3e8      	bcc.n	8001830 <lcd_Clear+0x28>
		}
	}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000398 	.word	0x20000398

0800186c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	88b9      	ldrh	r1, [r7, #4]
 8001884:	88f8      	ldrh	r0, [r7, #6]
 8001886:	f7ff ff73 	bl	8001770 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff4d 	bl	800172c <LCD_WR_DATA>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	70fb      	strb	r3, [r7, #3]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	fb12 f303 	smulbb	r3, r2, r3
 80018f2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	3b20      	subs	r3, #32
 80018f8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	4413      	add	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29c      	uxth	r4, r3
 8001908:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800190c:	b29a      	uxth	r2, r3
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88b9      	ldrh	r1, [r7, #4]
 800191a:	88f8      	ldrh	r0, [r7, #6]
 800191c:	4622      	mov	r2, r4
 800191e:	f7ff ff27 	bl	8001770 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001922:	2300      	movs	r3, #0
 8001924:	827b      	strh	r3, [r7, #18]
 8001926:	e07a      	b.n	8001a1e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d028      	beq.n	8001982 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001930:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001934:	2b10      	cmp	r3, #16
 8001936:	d108      	bne.n	800194a <lcd_ShowChar+0xae>
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	493c      	ldr	r1, [pc, #240]	; (8001a30 <lcd_ShowChar+0x194>)
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	440a      	add	r2, r1
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	75fb      	strb	r3, [r7, #23]
 8001948:	e01b      	b.n	8001982 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800194a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800194e:	2b18      	cmp	r3, #24
 8001950:	d10b      	bne.n	800196a <lcd_ShowChar+0xce>
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	8a79      	ldrh	r1, [r7, #18]
 8001956:	4837      	ldr	r0, [pc, #220]	; (8001a34 <lcd_ShowChar+0x198>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4403      	add	r3, r0
 8001962:	440b      	add	r3, r1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	75fb      	strb	r3, [r7, #23]
 8001968:	e00b      	b.n	8001982 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800196a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800196e:	2b20      	cmp	r3, #32
 8001970:	d15a      	bne.n	8001a28 <lcd_ShowChar+0x18c>
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	8a7b      	ldrh	r3, [r7, #18]
 8001976:	4930      	ldr	r1, [pc, #192]	; (8001a38 <lcd_ShowChar+0x19c>)
 8001978:	0192      	lsls	r2, r2, #6
 800197a:	440a      	add	r2, r1
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001982:	2300      	movs	r3, #0
 8001984:	75bb      	strb	r3, [r7, #22]
 8001986:	e044      	b.n	8001a12 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001988:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800198c:	2b00      	cmp	r3, #0
 800198e:	d120      	bne.n	80019d2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001990:	7dfa      	ldrb	r2, [r7, #23]
 8001992:	7dbb      	ldrb	r3, [r7, #22]
 8001994:	fa42 f303 	asr.w	r3, r2, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <lcd_ShowChar+0x10e>
 80019a0:	883b      	ldrh	r3, [r7, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fec2 	bl	800172c <LCD_WR_DATA>
 80019a8:	e003      	b.n	80019b2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80019aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff febd 	bl	800172c <LCD_WR_DATA>
				m++;
 80019b2:	7d7b      	ldrb	r3, [r7, #21]
 80019b4:	3301      	adds	r3, #1
 80019b6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80019c0:	fb02 f201 	mul.w	r2, r2, r1
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11f      	bne.n	8001a0c <lcd_ShowChar+0x170>
				{
					m=0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	757b      	strb	r3, [r7, #21]
					break;
 80019d0:	e022      	b.n	8001a18 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80019d2:	7dfa      	ldrb	r2, [r7, #23]
 80019d4:	7dbb      	ldrb	r3, [r7, #22]
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <lcd_ShowChar+0x152>
 80019e2:	883a      	ldrh	r2, [r7, #0]
 80019e4:	88b9      	ldrh	r1, [r7, #4]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff3f 	bl	800186c <lcd_DrawPoint>
				x++;
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	3301      	adds	r3, #1
 80019f2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019f4:	88fa      	ldrh	r2, [r7, #6]
 80019f6:	8a3b      	ldrh	r3, [r7, #16]
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d105      	bne.n	8001a0c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a00:	8a3b      	ldrh	r3, [r7, #16]
 8001a02:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	80bb      	strh	r3, [r7, #4]
					break;
 8001a0a:	e005      	b.n	8001a18 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a0c:	7dbb      	ldrb	r3, [r7, #22]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	75bb      	strb	r3, [r7, #22]
 8001a12:	7dbb      	ldrb	r3, [r7, #22]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d9b7      	bls.n	8001988 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a18:	8a7b      	ldrh	r3, [r7, #18]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	827b      	strh	r3, [r7, #18]
 8001a1e:	8a7a      	ldrh	r2, [r7, #18]
 8001a20:	89bb      	ldrh	r3, [r7, #12]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d380      	bcc.n	8001928 <lcd_ShowChar+0x8c>
 8001a26:	e000      	b.n	8001a2a <lcd_ShowChar+0x18e>
		else return;
 8001a28:	bf00      	nop
				}
			}
		}
	}
}
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	0800ab44 	.word	0x0800ab44
 8001a34:	0800b134 	.word	0x0800b134
 8001a38:	0800c304 	.word	0x0800c304

08001a3c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a50:	e004      	b.n	8001a5c <mypow+0x20>
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	71ba      	strb	r2, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f5      	bne.n	8001a52 <mypow+0x16>
	return result;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	81fb      	strh	r3, [r7, #14]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	81bb      	strh	r3, [r7, #12]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	4613      	mov	r3, r2
 8001a94:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001a96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b7c <lcd_ShowFloatNum+0x108>
 8001aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aae:	ee17 3a90 	vmov	r3, s15
 8001ab2:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	75fb      	strb	r3, [r7, #23]
 8001ab8:	e057      	b.n	8001b6a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001aba:	8abc      	ldrh	r4, [r7, #20]
 8001abc:	79fa      	ldrb	r2, [r7, #7]
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	200a      	movs	r0, #10
 8001acc:	f7ff ffb6 	bl	8001a3c <mypow>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <lcd_ShowFloatNum+0x10c>)
 8001ad8:	fba3 2301 	umull	r2, r3, r3, r1
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	1aca      	subs	r2, r1, r3
 8001ae8:	4613      	mov	r3, r2
 8001aea:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001aec:	7dfa      	ldrb	r2, [r7, #23]
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	3b02      	subs	r3, #2
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11d      	bne.n	8001b32 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	3b02      	subs	r3, #2
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	7dbb      	ldrb	r3, [r7, #22]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	fb12 f303 	smulbb	r3, r2, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	4413      	add	r3, r2
 8001b0a:	b298      	uxth	r0, r3
 8001b0c:	88ba      	ldrh	r2, [r7, #4]
 8001b0e:	89b9      	ldrh	r1, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	222e      	movs	r2, #46	; 0x2e
 8001b22:	f7ff febb 	bl	800189c <lcd_ShowChar>
			t++;
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	fb12 f303 	smulbb	r3, r2, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	4413      	add	r3, r2
 8001b44:	b298      	uxth	r0, r3
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	3330      	adds	r3, #48	; 0x30
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	88bc      	ldrh	r4, [r7, #4]
 8001b4e:	89b9      	ldrh	r1, [r7, #12]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4623      	mov	r3, r4
 8001b60:	f7ff fe9c 	bl	800189c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	3301      	adds	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
 8001b6a:	7dfa      	ldrb	r2, [r7, #23]
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3a3      	bcc.n	8001aba <lcd_ShowFloatNum+0x46>
	}
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	42c80000 	.word	0x42c80000
 8001b80:	cccccccd 	.word	0xcccccccd

08001b84 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <lcd_SetDir+0x44>)
 8001ba0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ba4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <lcd_SetDir+0x44>)
 8001ba8:	22f0      	movs	r2, #240	; 0xf0
 8001baa:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001bac:	e006      	b.n	8001bbc <lcd_SetDir+0x38>
		lcddev.width=240;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <lcd_SetDir+0x44>)
 8001bb0:	22f0      	movs	r2, #240	; 0xf0
 8001bb2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <lcd_SetDir+0x44>)
 8001bb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bba:	805a      	strh	r2, [r3, #2]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	20000398 	.word	0x20000398

08001bcc <lcd_init>:


void lcd_init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd6:	48aa      	ldr	r0, [pc, #680]	; (8001e80 <lcd_init+0x2b4>)
 8001bd8:	f002 fca8 	bl	800452c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001be0:	f001 f9be 	bl	8002f60 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bea:	48a5      	ldr	r0, [pc, #660]	; (8001e80 <lcd_init+0x2b4>)
 8001bec:	f002 fc9e 	bl	800452c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001bf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf4:	f001 f9b4 	bl	8002f60 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff ffc3 	bl	8001b84 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001bfe:	20d3      	movs	r0, #211	; 0xd3
 8001c00:	f7ff fd84 	bl	800170c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c04:	f7ff fda2 	bl	800174c <LCD_RD_DATA>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b9d      	ldr	r3, [pc, #628]	; (8001e84 <lcd_init+0x2b8>)
 8001c0e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c10:	f7ff fd9c 	bl	800174c <LCD_RD_DATA>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b9a      	ldr	r3, [pc, #616]	; (8001e84 <lcd_init+0x2b8>)
 8001c1a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c1c:	f7ff fd96 	bl	800174c <LCD_RD_DATA>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b97      	ldr	r3, [pc, #604]	; (8001e84 <lcd_init+0x2b8>)
 8001c26:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c28:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <lcd_init+0x2b8>)
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b94      	ldr	r3, [pc, #592]	; (8001e84 <lcd_init+0x2b8>)
 8001c32:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c34:	f7ff fd8a 	bl	800174c <LCD_RD_DATA>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b91      	ldr	r3, [pc, #580]	; (8001e84 <lcd_init+0x2b8>)
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b8f      	ldr	r3, [pc, #572]	; (8001e84 <lcd_init+0x2b8>)
 8001c46:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001c48:	20cf      	movs	r0, #207	; 0xcf
 8001c4a:	f7ff fd5f 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fd6c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001c54:	20c1      	movs	r0, #193	; 0xc1
 8001c56:	f7ff fd69 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001c5a:	2030      	movs	r0, #48	; 0x30
 8001c5c:	f7ff fd66 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001c60:	20ed      	movs	r0, #237	; 0xed
 8001c62:	f7ff fd53 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001c66:	2064      	movs	r0, #100	; 0x64
 8001c68:	f7ff fd60 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7ff fd5d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001c72:	2012      	movs	r0, #18
 8001c74:	f7ff fd5a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001c78:	2081      	movs	r0, #129	; 0x81
 8001c7a:	f7ff fd57 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001c7e:	20e8      	movs	r0, #232	; 0xe8
 8001c80:	f7ff fd44 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001c84:	2085      	movs	r0, #133	; 0x85
 8001c86:	f7ff fd51 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c8a:	2010      	movs	r0, #16
 8001c8c:	f7ff fd4e 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001c90:	207a      	movs	r0, #122	; 0x7a
 8001c92:	f7ff fd4b 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001c96:	20cb      	movs	r0, #203	; 0xcb
 8001c98:	f7ff fd38 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001c9c:	2039      	movs	r0, #57	; 0x39
 8001c9e:	f7ff fd45 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001ca2:	202c      	movs	r0, #44	; 0x2c
 8001ca4:	f7ff fd42 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fd3f 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001cae:	2034      	movs	r0, #52	; 0x34
 8001cb0:	f7ff fd3c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7ff fd39 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001cba:	20f7      	movs	r0, #247	; 0xf7
 8001cbc:	f7ff fd26 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001cc0:	2020      	movs	r0, #32
 8001cc2:	f7ff fd33 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001cc6:	20ea      	movs	r0, #234	; 0xea
 8001cc8:	f7ff fd20 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff fd2d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff fd2a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001cd8:	20c0      	movs	r0, #192	; 0xc0
 8001cda:	f7ff fd17 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001cde:	201b      	movs	r0, #27
 8001ce0:	f7ff fd24 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001ce4:	20c1      	movs	r0, #193	; 0xc1
 8001ce6:	f7ff fd11 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff fd1e 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001cf0:	20c5      	movs	r0, #197	; 0xc5
 8001cf2:	f7ff fd0b 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001cf6:	2030      	movs	r0, #48	; 0x30
 8001cf8:	f7ff fd18 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001cfc:	2030      	movs	r0, #48	; 0x30
 8001cfe:	f7ff fd15 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d02:	20c7      	movs	r0, #199	; 0xc7
 8001d04:	f7ff fd02 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d08:	20b7      	movs	r0, #183	; 0xb7
 8001d0a:	f7ff fd0f 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d0e:	2036      	movs	r0, #54	; 0x36
 8001d10:	f7ff fcfc 	bl	800170c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d14:	2008      	movs	r0, #8
 8001d16:	f7ff fd09 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d1a:	203a      	movs	r0, #58	; 0x3a
 8001d1c:	f7ff fcf6 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d20:	2055      	movs	r0, #85	; 0x55
 8001d22:	f7ff fd03 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d26:	20b1      	movs	r0, #177	; 0xb1
 8001d28:	f7ff fcf0 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fcfd 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d32:	201a      	movs	r0, #26
 8001d34:	f7ff fcfa 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d38:	20b6      	movs	r0, #182	; 0xb6
 8001d3a:	f7ff fce7 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f7ff fcf4 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001d44:	20a2      	movs	r0, #162	; 0xa2
 8001d46:	f7ff fcf1 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d4a:	20f2      	movs	r0, #242	; 0xf2
 8001d4c:	f7ff fcde 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fceb 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001d56:	2026      	movs	r0, #38	; 0x26
 8001d58:	f7ff fcd8 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff fce5 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001d62:	20e0      	movs	r0, #224	; 0xe0
 8001d64:	f7ff fcd2 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001d68:	200f      	movs	r0, #15
 8001d6a:	f7ff fcdf 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001d6e:	202a      	movs	r0, #42	; 0x2a
 8001d70:	f7ff fcdc 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001d74:	2028      	movs	r0, #40	; 0x28
 8001d76:	f7ff fcd9 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d7a:	2008      	movs	r0, #8
 8001d7c:	f7ff fcd6 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001d80:	200e      	movs	r0, #14
 8001d82:	f7ff fcd3 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d86:	2008      	movs	r0, #8
 8001d88:	f7ff fcd0 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001d8c:	2054      	movs	r0, #84	; 0x54
 8001d8e:	f7ff fccd 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001d92:	20a9      	movs	r0, #169	; 0xa9
 8001d94:	f7ff fcca 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001d98:	2043      	movs	r0, #67	; 0x43
 8001d9a:	f7ff fcc7 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f7ff fcc4 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001da4:	200f      	movs	r0, #15
 8001da6:	f7ff fcc1 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff fcbe 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fcbb 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fcb8 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fcb5 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001dc2:	20e1      	movs	r0, #225	; 0xe1
 8001dc4:	f7ff fca2 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff fcaf 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001dce:	2015      	movs	r0, #21
 8001dd0:	f7ff fcac 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001dd4:	2017      	movs	r0, #23
 8001dd6:	f7ff fca9 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f7ff fca6 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001de0:	2011      	movs	r0, #17
 8001de2:	f7ff fca3 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001de6:	2006      	movs	r0, #6
 8001de8:	f7ff fca0 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001dec:	202b      	movs	r0, #43	; 0x2b
 8001dee:	f7ff fc9d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001df2:	2056      	movs	r0, #86	; 0x56
 8001df4:	f7ff fc9a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001df8:	203c      	movs	r0, #60	; 0x3c
 8001dfa:	f7ff fc97 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001dfe:	2005      	movs	r0, #5
 8001e00:	f7ff fc94 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e04:	2010      	movs	r0, #16
 8001e06:	f7ff fc91 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f7ff fc8e 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e10:	203f      	movs	r0, #63	; 0x3f
 8001e12:	f7ff fc8b 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e16:	203f      	movs	r0, #63	; 0x3f
 8001e18:	f7ff fc88 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e1c:	200f      	movs	r0, #15
 8001e1e:	f7ff fc85 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e22:	202b      	movs	r0, #43	; 0x2b
 8001e24:	f7ff fc72 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff fc7f 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fc7c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff fc79 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e3a:	203f      	movs	r0, #63	; 0x3f
 8001e3c:	f7ff fc76 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e40:	202a      	movs	r0, #42	; 0x2a
 8001e42:	f7ff fc63 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fc70 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fc6d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fc6a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001e58:	20ef      	movs	r0, #239	; 0xef
 8001e5a:	f7ff fc67 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001e5e:	2011      	movs	r0, #17
 8001e60:	f7ff fc54 	bl	800170c <LCD_WR_REG>
	HAL_Delay(120);
 8001e64:	2078      	movs	r0, #120	; 0x78
 8001e66:	f001 f87b 	bl	8002f60 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001e6a:	2029      	movs	r0, #41	; 0x29
 8001e6c:	f7ff fc4e 	bl	800170c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <lcd_init+0x2bc>)
 8001e78:	f002 fb58 	bl	800452c <HAL_GPIO_WritePin>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40020800 	.word	0x40020800
 8001e84:	20000398 	.word	0x20000398
 8001e88:	40020000 	.word	0x40020000

08001e8c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af04      	add	r7, sp, #16
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	81fb      	strh	r3, [r7, #14]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	81bb      	strh	r3, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001eaa:	e048      	b.n	8001f3e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d145      	bne.n	8001f3e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001eb2:	89fa      	ldrh	r2, [r7, #14]
 8001eb4:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <lcd_ShowStr+0xc4>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	1acb      	subs	r3, r1, r3
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dc3f      	bgt.n	8001f48 <lcd_ShowStr+0xbc>
 8001ec8:	89ba      	ldrh	r2, [r7, #12]
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <lcd_ShowStr+0xc4>)
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ed4:	1acb      	subs	r3, r1, r3
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dc36      	bgt.n	8001f48 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b80      	cmp	r3, #128	; 0x80
 8001ee0:	d902      	bls.n	8001ee8 <lcd_ShowStr+0x5c>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
 8001ee6:	e02a      	b.n	8001f3e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b0d      	cmp	r3, #13
 8001eee:	d10b      	bne.n	8001f08 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001ef0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	89bb      	ldrh	r3, [r7, #12]
 8001ef8:	4413      	add	r3, r2
 8001efa:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001efc:	8abb      	ldrh	r3, [r7, #20]
 8001efe:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	e017      	b.n	8001f38 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	88fc      	ldrh	r4, [r7, #6]
 8001f0e:	89b9      	ldrh	r1, [r7, #12]
 8001f10:	89f8      	ldrh	r0, [r7, #14]
 8001f12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4623      	mov	r3, r4
 8001f24:	f7ff fcba 	bl	800189c <lcd_ShowChar>
					x+=sizey/2;
 8001f28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	4413      	add	r3, r2
 8001f36:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1b2      	bne.n	8001eac <lcd_ShowStr+0x20>
 8001f46:	e000      	b.n	8001f4a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f48:	bf00      	nop
			}
		}
	}
}
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	20000398 	.word	0x20000398

08001f54 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001f58:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <led7_Scan+0x104>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <led7_Scan+0x104>)
 8001f62:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001f64:	4b3d      	ldr	r3, [pc, #244]	; (800205c <led7_Scan+0x108>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <led7_Scan+0x10c>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <led7_Scan+0x104>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <led7_Scan+0x104>)
 8001f7e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <led7_Scan+0x108>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d847      	bhi.n	8002018 <led7_Scan+0xc4>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <led7_Scan+0x3c>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fbf 	.word	0x08001fbf
 8001f98:	08001fdd 	.word	0x08001fdd
 8001f9c:	08001ffb 	.word	0x08001ffb
	case 0:
		spi_buffer |= 0x00b0;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <led7_Scan+0x104>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <led7_Scan+0x104>)
 8001fac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <led7_Scan+0x104>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <led7_Scan+0x104>)
 8001fba:	801a      	strh	r2, [r3, #0]
		break;
 8001fbc:	e02d      	b.n	800201a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <led7_Scan+0x104>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <led7_Scan+0x104>)
 8001fca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <led7_Scan+0x104>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	f023 0320 	bic.w	r3, r3, #32
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <led7_Scan+0x104>)
 8001fd8:	801a      	strh	r2, [r3, #0]
		break;
 8001fda:	e01e      	b.n	800201a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <led7_Scan+0x104>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <led7_Scan+0x104>)
 8001fe8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <led7_Scan+0x104>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	f023 0310 	bic.w	r3, r3, #16
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <led7_Scan+0x104>)
 8001ff6:	801a      	strh	r2, [r3, #0]
		break;
 8001ff8:	e00f      	b.n	800201a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <led7_Scan+0x104>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <led7_Scan+0x104>)
 8002006:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <led7_Scan+0x104>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <led7_Scan+0x104>)
 8002014:	801a      	strh	r2, [r3, #0]
		break;
 8002016:	e000      	b.n	800201a <led7_Scan+0xc6>
	default:
		break;
 8002018:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <led7_Scan+0x108>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	425a      	negs	r2, r3
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	f002 0203 	and.w	r2, r2, #3
 800202a:	bf58      	it	pl
 800202c:	4253      	negpl	r3, r2
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <led7_Scan+0x108>)
 8002030:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	480b      	ldr	r0, [pc, #44]	; (8002064 <led7_Scan+0x110>)
 8002038:	f002 fa78 	bl	800452c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800203c:	2301      	movs	r3, #1
 800203e:	2202      	movs	r2, #2
 8002040:	4905      	ldr	r1, [pc, #20]	; (8002058 <led7_Scan+0x104>)
 8002042:	4809      	ldr	r0, [pc, #36]	; (8002068 <led7_Scan+0x114>)
 8002044:	f003 f8e7 	bl	8005216 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002048:	2201      	movs	r2, #1
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <led7_Scan+0x110>)
 800204e:	f002 fa6d 	bl	800452c <HAL_GPIO_WritePin>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000004 	.word	0x20000004
 800205c:	20000208 	.word	0x20000208
 8002060:	20000000 	.word	0x20000000
 8002064:	40021800 	.word	0x40021800
 8002068:	200003e0 	.word	0x200003e0

0800206c <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <lightProcess+0x58>)
 8002072:	8b5b      	ldrh	r3, [r3, #26]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d113      	bne.n	80020a0 <lightProcess+0x34>
		light_status = 1 - light_status;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <lightProcess+0x5c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f1c3 0301 	rsb	r3, r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <lightProcess+0x5c>)
 8002084:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <lightProcess+0x5c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 800208e:	2101      	movs	r1, #1
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <lightProcess+0x60>)
 8002092:	f000 fd7d 	bl	8002b90 <uart_EspSendBytes>
 8002096:	e003      	b.n	80020a0 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8002098:	2101      	movs	r1, #1
 800209a:	480d      	ldr	r0, [pc, #52]	; (80020d0 <lightProcess+0x64>)
 800209c:	f000 fd78 	bl	8002b90 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <lightProcess+0x5c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2120      	movs	r1, #32
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <lightProcess+0x68>)
 80020ae:	f002 fa3d 	bl	800452c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 80020b2:	e004      	b.n	80020be <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2120      	movs	r1, #32
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <lightProcess+0x68>)
 80020ba:	f002 fa37 	bl	800452c <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002d4 	.word	0x200002d4
 80020c8:	2000020c 	.word	0x2000020c
 80020cc:	0800ab20 	.word	0x0800ab20
 80020d0:	0800ab24 	.word	0x0800ab24
 80020d4:	40021000 	.word	0x40021000

080020d8 <test_Esp>:

void test_Esp(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 80020de:	f000 fdb3 	bl	8002c48 <uart_EspCheck>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <test_Esp+0x1a>
 80020e8:	2101      	movs	r1, #1
 80020ea:	480a      	ldr	r0, [pc, #40]	; (8002114 <test_Esp+0x3c>)
 80020ec:	f000 fd50 	bl	8002b90 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 80020f0:	e00c      	b.n	800210c <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 80020f2:	2300      	movs	r3, #0
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2318      	movs	r3, #24
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <test_Esp+0x40>)
 8002104:	2132      	movs	r1, #50	; 0x32
 8002106:	200a      	movs	r0, #10
 8002108:	f7ff fec0 	bl	8001e8c <lcd_ShowStr>
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	0800ab28 	.word	0x0800ab28
 8002118:	0800ab2c 	.word	0x0800ab2c

0800211c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002120:	f000 feac 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002124:	f000 f838 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002128:	f7ff f940 	bl	80013ac <MX_GPIO_Init>
  MX_TIM2_Init();
 800212c:	f000 fbf4 	bl	8002918 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002130:	f000 f9d2 	bl	80024d8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002134:	f7ff f86a 	bl	800120c <MX_FSMC_Init>
  MX_I2C1_Init();
 8002138:	f7ff fa72 	bl	8001620 <MX_I2C1_Init>
  MX_TIM13_Init();
 800213c:	f000 fc38 	bl	80029b0 <MX_TIM13_Init>
  MX_DMA_Init();
 8002140:	f7ff f844 	bl	80011cc <MX_DMA_Init>
  MX_ADC1_Init();
 8002144:	f7fe feac 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002148:	f000 fb96 	bl	8002878 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800214c:	f000 fdb6 	bl	8002cbc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002150:	f000 fd8a 	bl	8002c68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002154:	f000 f88a 	bl	800226c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff fb55 	bl	8001808 <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <main+0x74>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10a      	bne.n	800217c <main+0x60>
		  flag_timer2 = 0;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <main+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 800216c:	f7fe ffc2 	bl	80010f4 <button_Scan>
		  test_Esp();
 8002170:	f7ff ffb2 	bl	80020d8 <test_Esp>
		  lightProcess();
 8002174:	f7ff ff7a 	bl	800206c <lightProcess>
		  test_LedDebug();
 8002178:	f000 f88e 	bl	8002298 <test_LedDebug>
	  }
	  if(flag_timer3 == 1){
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <main+0x78>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d1ec      	bne.n	800215e <main+0x42>
		  flag_timer3 = 0;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <main+0x78>)
 8002186:	2200      	movs	r2, #0
 8002188:	801a      	strh	r2, [r3, #0]
		  send_Esp();
 800218a:	f000 f8a9 	bl	80022e0 <send_Esp>
	  if(flag_timer2 == 1){
 800218e:	e7e6      	b.n	800215e <main+0x42>
 8002190:	2000020e 	.word	0x2000020e
 8002194:	20000214 	.word	0x20000214

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b094      	sub	sp, #80	; 0x50
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	2230      	movs	r2, #48	; 0x30
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f005 fe10 	bl	8007dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <SystemClock_Config+0xcc>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <SystemClock_Config+0xcc>)
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ca:	6413      	str	r3, [r2, #64]	; 0x40
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <SystemClock_Config+0xd0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <SystemClock_Config+0xd0>)
 80021e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fc:	2310      	movs	r3, #16
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002208:	2308      	movs	r3, #8
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800220c:	23a8      	movs	r3, #168	; 0xa8
 800220e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002210:	2302      	movs	r3, #2
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002214:	2304      	movs	r3, #4
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fafd 	bl	800481c <HAL_RCC_OscConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002228:	f000 f88a 	bl	8002340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222c:	230f      	movs	r3, #15
 800222e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002238:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800223c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800223e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2105      	movs	r1, #5
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fd5e 	bl	8004d0c <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002256:	f000 f873 	bl	8002340 <Error_Handler>
  }
}
 800225a:	bf00      	nop
 800225c:	3750      	adds	r7, #80	; 0x50
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000

0800226c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	  timer_init();
 8002270:	f000 f8a6 	bl	80023c0 <timer_init>
	  button_init();
 8002274:	f7fe ff32 	bl	80010dc <button_init>
	  lcd_init();
 8002278:	f7ff fca8 	bl	8001bcc <lcd_init>
	  sensor_init();
 800227c:	f000 f866 	bl	800234c <sensor_init>
	  uart_init_esp();
 8002280:	f000 fc70 	bl	8002b64 <uart_init_esp>
	  setTimer2(50);
 8002284:	2032      	movs	r0, #50	; 0x32
 8002286:	f000 f8a9 	bl	80023dc <setTimer2>
	  setTimer3(5000);
 800228a:	f241 3088 	movw	r0, #5000	; 0x1388
 800228e:	f000 f8c1 	bl	8002414 <setTimer3>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <test_LedDebug+0x3c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <test_LedDebug+0x40>)
 80022a4:	fb83 1302 	smull	r1, r3, r3, r2
 80022a8:	10d9      	asrs	r1, r3, #3
 80022aa:	17d3      	asrs	r3, r2, #31
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	1ad1      	subs	r1, r2, r3
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <test_LedDebug+0x3c>)
 80022bc:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <test_LedDebug+0x3c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80022c6:	2110      	movs	r1, #16
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <test_LedDebug+0x44>)
 80022ca:	f002 f948 	bl	800455e <HAL_GPIO_TogglePin>
	}
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000020d 	.word	0x2000020d
 80022d8:	66666667 	.word	0x66666667
 80022dc:	40021000 	.word	0x40021000

080022e0 <send_Esp>:
void send_Esp(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b090      	sub	sp, #64	; 0x40
 80022e4:	af02      	add	r7, sp, #8
	sensor_Read();
 80022e6:	f000 f83f 	bl	8002368 <sensor_Read>
	float temp = sensor_GetTemperature();
 80022ea:	f000 f84b 	bl	8002384 <sensor_GetTemperature>
 80022ee:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	// Prepare the formatted string
	char message[50]; // Ensure the buffer is large enough
	sprintf(message, "!TEMP:%.2f#", temp); // Format with 2 decimal places
 80022f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022f4:	f7fe f928 	bl	8000548 <__aeabi_f2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4638      	mov	r0, r7
 80022fe:	490f      	ldr	r1, [pc, #60]	; (800233c <send_Esp+0x5c>)
 8002300:	f006 f9d6 	bl	80086b0 <siprintf>
	lcd_ShowFloatNum(130, 160, temp, 4, RED, BLACK, 16);
 8002304:	2310      	movs	r3, #16
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002310:	2204      	movs	r2, #4
 8002312:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002316:	21a0      	movs	r1, #160	; 0xa0
 8002318:	2082      	movs	r0, #130	; 0x82
 800231a:	f7ff fbab 	bl	8001a74 <lcd_ShowFloatNum>
	// Send the message via UART
	uart_EspSendBytes(message, strlen(message));
 800231e:	463b      	mov	r3, r7
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ff55 	bl	80001d0 <strlen>
 8002326:	4603      	mov	r3, r0
 8002328:	b29a      	uxth	r2, r3
 800232a:	463b      	mov	r3, r7
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fc2e 	bl	8002b90 <uart_EspSendBytes>

}
 8002334:	bf00      	nop
 8002336:	3738      	adds	r7, #56	; 0x38
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	0800ab38 	.word	0x0800ab38

08002340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002348:	e7fe      	b.n	8002348 <Error_Handler+0x8>
	...

0800234c <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002350:	2205      	movs	r2, #5
 8002352:	4903      	ldr	r1, [pc, #12]	; (8002360 <sensor_init+0x14>)
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <sensor_init+0x18>)
 8002356:	f000 fe6b 	bl	8003030 <HAL_ADC_Start_DMA>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200003d4 	.word	0x200003d4
 8002364:	2000022c 	.word	0x2000022c

08002368 <sensor_Read>:

void sensor_Read(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800236c:	2205      	movs	r2, #5
 800236e:	4903      	ldr	r1, [pc, #12]	; (800237c <sensor_Read+0x14>)
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <sensor_Read+0x18>)
 8002372:	f000 fe5d 	bl	8003030 <HAL_ADC_Start_DMA>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200003d4 	.word	0x200003d4
 8002380:	2000022c 	.word	0x2000022c

08002384 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <sensor_GetTemperature+0x30>)
 800238a:	891b      	ldrh	r3, [r3, #8]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002394:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023b8 <sensor_GetTemperature+0x34>
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80023bc <sensor_GetTemperature+0x38>
 80023a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023a4:	eef0 7a66 	vmov.f32	s15, s13
}
 80023a8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	200003d4 	.word	0x200003d4
 80023b8:	43a50000 	.word	0x43a50000
 80023bc:	457ff000 	.word	0x457ff000

080023c0 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <timer_init+0x14>)
 80023c6:	f003 fd41 	bl	8005e4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <timer_init+0x18>)
 80023cc:	f003 fcd6 	bl	8005d7c <HAL_TIM_Base_Start>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200004c8 	.word	0x200004c8
 80023d8:	20000480 	.word	0x20000480

080023dc <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <setTimer2+0x2c>)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <setTimer2+0x2c>)
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <setTimer2+0x30>)
 80023f2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <setTimer2+0x34>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000212 	.word	0x20000212
 800240c:	20000210 	.word	0x20000210
 8002410:	2000020e 	.word	0x2000020e

08002414 <setTimer3>:
void setTimer3(uint16_t duration){
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_3;
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <setTimer3+0x2c>)
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <setTimer3+0x2c>)
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <setTimer3+0x30>)
 800242a:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <setTimer3+0x34>)
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000218 	.word	0x20000218
 8002444:	20000216 	.word	0x20000216
 8002448:	20000214 	.word	0x20000214

0800244c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d12b      	bne.n	80024b6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002470:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800247c:	2201      	movs	r2, #1
 800247e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002482:	881a      	ldrh	r2, [r3, #0]
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002486:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800249a:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d106      	bne.n	80024b2 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80024b0:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80024b2:	f7ff fd4f 	bl	8001f54 <led7_Scan>
	}

}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000210 	.word	0x20000210
 80024c4:	2000020e 	.word	0x2000020e
 80024c8:	20000212 	.word	0x20000212
 80024cc:	20000216 	.word	0x20000216
 80024d0:	20000214 	.word	0x20000214
 80024d4:	20000218 	.word	0x20000218

080024d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <MX_SPI1_Init+0x64>)
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <MX_SPI1_Init+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <MX_SPI1_Init+0x64>)
 80024e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_SPI1_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_SPI1_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_SPI1_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_SPI1_Init+0x64>)
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_SPI1_Init+0x64>)
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <MX_SPI1_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_SPI1_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <MX_SPI1_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_SPI1_Init+0x64>)
 8002524:	220a      	movs	r2, #10
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <MX_SPI1_Init+0x64>)
 800252a:	f002 fdeb 	bl	8005104 <HAL_SPI_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002534:	f7ff ff04 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200003e0 	.word	0x200003e0
 8002540:	40013000 	.word	0x40013000

08002544 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_SPI_MspInit+0x84>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12b      	bne.n	80025be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_SPI_MspInit+0x88>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_SPI_MspInit+0x88>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_SPI_MspInit+0x88>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800259e:	2338      	movs	r3, #56	; 0x38
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ae:	2305      	movs	r3, #5
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <HAL_SPI_MspInit+0x8c>)
 80025ba:	f001 fe1b 	bl	80041f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40013000 	.word	0x40013000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020400 	.word	0x40020400

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_MspInit+0x4c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <HAL_MspInit+0x4c>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_MspInit+0x4c>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <NMI_Handler+0x4>

0800262a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <MemManage_Handler+0x4>

08002636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler+0x4>

08002642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002670:	f000 fc56 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM2_IRQHandler+0x10>)
 800267e:	f003 fcae 	bl	8005fde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200004c8 	.word	0x200004c8

0800268c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <USART1_IRQHandler+0x10>)
 8002692:	f004 fbe9 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000510 	.word	0x20000510

080026a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <USART2_IRQHandler+0x10>)
 80026a6:	f004 fbdf 	bl	8006e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000554 	.word	0x20000554

080026b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <DMA2_Stream0_IRQHandler+0x10>)
 80026ba:	f001 fb31 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000274 	.word	0x20000274

080026c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
	return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_kill>:

int _kill(int pid, int sig)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026e2:	f005 fb49 	bl	8007d78 <__errno>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2216      	movs	r2, #22
 80026ea:	601a      	str	r2, [r3, #0]
	return -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_exit>:

void _exit (int status)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ffe7 	bl	80026d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800270a:	e7fe      	b.n	800270a <_exit+0x12>

0800270c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e00a      	b.n	8002734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800271e:	f3af 8000 	nop.w
 8002722:	4601      	mov	r1, r0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	60ba      	str	r2, [r7, #8]
 800272a:	b2ca      	uxtb	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf0      	blt.n	800271e <_read+0x12>
	}

return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e009      	b.n	800276c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	60ba      	str	r2, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf1      	blt.n	8002758 <_write+0x12>
	}
	return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_close>:

int _close(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	605a      	str	r2, [r3, #4]
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_isatty>:

int _isatty(int file)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	return 1;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
	return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <_sbrk+0x5c>)
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_sbrk+0x60>)
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <_sbrk+0x64>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <_sbrk+0x68>)
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d207      	bcs.n	8002828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002818:	f005 faae 	bl	8007d78 <__errno>
 800281c:	4603      	mov	r3, r0
 800281e:	220c      	movs	r2, #12
 8002820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002826:	e009      	b.n	800283c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <_sbrk+0x64>)
 8002838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283a:	68fb      	ldr	r3, [r7, #12]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20020000 	.word	0x20020000
 8002848:	00000400 	.word	0x00000400
 800284c:	2000021c 	.word	0x2000021c
 8002850:	200005b0 	.word	0x200005b0

08002854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <SystemInit+0x20>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <SystemInit+0x20>)
 8002860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <MX_TIM1_Init+0x98>)
 8002896:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <MX_TIM1_Init+0x9c>)
 8002898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_TIM1_Init+0x98>)
 800289c:	2253      	movs	r2, #83	; 0x53
 800289e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <MX_TIM1_Init+0x98>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_TIM1_Init+0x98>)
 80028a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_TIM1_Init+0x98>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_TIM1_Init+0x98>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_TIM1_Init+0x98>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028c0:	4813      	ldr	r0, [pc, #76]	; (8002910 <MX_TIM1_Init+0x98>)
 80028c2:	f003 fa0b 	bl	8005cdc <HAL_TIM_Base_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028cc:	f7ff fd38 	bl	8002340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	4619      	mov	r1, r3
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <MX_TIM1_Init+0x98>)
 80028de:	f003 fd49 	bl	8006374 <HAL_TIM_ConfigClockSource>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028e8:	f7ff fd2a 	bl	8002340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028f4:	463b      	mov	r3, r7
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_TIM1_Init+0x98>)
 80028fa:	f004 f915 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002904:	f7ff fd1c 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000480 	.word	0x20000480
 8002914:	40010000 	.word	0x40010000

08002918 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291e:	f107 0308 	add.w	r3, r7, #8
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292c:	463b      	mov	r3, r7
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_TIM2_Init+0x94>)
 8002936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800293a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_TIM2_Init+0x94>)
 800293e:	f240 3247 	movw	r2, #839	; 0x347
 8002942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <MX_TIM2_Init+0x94>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_TIM2_Init+0x94>)
 800294c:	2263      	movs	r2, #99	; 0x63
 800294e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_TIM2_Init+0x94>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_TIM2_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800295c:	4813      	ldr	r0, [pc, #76]	; (80029ac <MX_TIM2_Init+0x94>)
 800295e:	f003 f9bd 	bl	8005cdc <HAL_TIM_Base_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002968:	f7ff fcea 	bl	8002340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4619      	mov	r1, r3
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <MX_TIM2_Init+0x94>)
 800297a:	f003 fcfb 	bl	8006374 <HAL_TIM_ConfigClockSource>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002984:	f7ff fcdc 	bl	8002340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002990:	463b      	mov	r3, r7
 8002992:	4619      	mov	r1, r3
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_TIM2_Init+0x94>)
 8002996:	f004 f8c7 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029a0:	f7ff fcce 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200004c8 	.word	0x200004c8

080029b0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <MX_TIM13_Init+0x98>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029d0:	f240 3247 	movw	r2, #839	; 0x347
 80029d4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029de:	2263      	movs	r2, #99	; 0x63
 80029e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029ee:	4815      	ldr	r0, [pc, #84]	; (8002a44 <MX_TIM13_Init+0x94>)
 80029f0:	f003 f974 	bl	8005cdc <HAL_TIM_Base_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80029fa:	f7ff fca1 	bl	8002340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80029fe:	4811      	ldr	r0, [pc, #68]	; (8002a44 <MX_TIM13_Init+0x94>)
 8002a00:	f003 fa94 	bl	8005f2c <HAL_TIM_PWM_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002a0a:	f7ff fc99 	bl	8002340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0e:	2360      	movs	r3, #96	; 0x60
 8002a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2200      	movs	r2, #0
 8002a22:	4619      	mov	r1, r3
 8002a24:	4807      	ldr	r0, [pc, #28]	; (8002a44 <MX_TIM13_Init+0x94>)
 8002a26:	f003 fbe3 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002a30:	f7ff fc86 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <MX_TIM13_Init+0x94>)
 8002a36:	f000 f85b 	bl	8002af0 <HAL_TIM_MspPostInit>

}
 8002a3a:	bf00      	nop
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000438 	.word	0x20000438
 8002a48:	40001c00 	.word	0x40001c00

08002a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_TIM_Base_MspInit+0x98>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002a7a:	e02e      	b.n	8002ada <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d116      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	201c      	movs	r0, #28
 8002aa8:	f000 ff6b 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aac:	201c      	movs	r0, #28
 8002aae:	f000 ff84 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002ab2:	e012      	b.n	8002ada <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_TIM_Base_MspInit+0xa0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10d      	bne.n	8002ada <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40001c00 	.word	0x40001c00

08002af0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_TIM_MspPostInit+0x68>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d11e      	bne.n	8002b50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_TIM_MspPostInit+0x6c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_TIM_MspPostInit+0x6c>)
 8002b1c:	f043 0320 	orr.w	r3, r3, #32
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_TIM_MspPostInit+0x6c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002b40:	2309      	movs	r3, #9
 8002b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <HAL_TIM_MspPostInit+0x70>)
 8002b4c:	f001 fb52 	bl	80041f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002b50:	bf00      	nop
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40001c00 	.word	0x40001c00
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40021400 	.word	0x40021400

08002b64 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4906      	ldr	r1, [pc, #24]	; (8002b84 <uart_init_esp+0x20>)
 8002b6c:	4806      	ldr	r0, [pc, #24]	; (8002b88 <uart_init_esp+0x24>)
 8002b6e:	f004 f94a 	bl	8006e06 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002b72:	2201      	movs	r2, #1
 8002b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b78:	4804      	ldr	r0, [pc, #16]	; (8002b8c <uart_init_esp+0x28>)
 8002b7a:	f001 fcd7 	bl	800452c <HAL_GPIO_WritePin>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000221 	.word	0x20000221
 8002b88:	20000554 	.word	0x20000554
 8002b8c:	40021400 	.word	0x40021400

08002b90 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <uart_EspSendBytes+0x20>)
 8002ba4:	f004 f89d 	bl	8006ce2 <HAL_UART_Transmit>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000554 	.word	0x20000554

08002bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_UART_RxCpltCallback+0x74>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10a      	bne.n	8002bdc <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4918      	ldr	r1, [pc, #96]	; (8002c2c <HAL_UART_RxCpltCallback+0x78>)
 8002bcc:	4818      	ldr	r0, [pc, #96]	; (8002c30 <HAL_UART_RxCpltCallback+0x7c>)
 8002bce:	f004 f888 	bl	8006ce2 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4915      	ldr	r1, [pc, #84]	; (8002c2c <HAL_UART_RxCpltCallback+0x78>)
 8002bd6:	4816      	ldr	r0, [pc, #88]	; (8002c30 <HAL_UART_RxCpltCallback+0x7c>)
 8002bd8:	f004 f915 	bl	8006e06 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <HAL_UART_RxCpltCallback+0x80>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11b      	bne.n	8002c1e <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_UART_RxCpltCallback+0x84>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b4f      	cmp	r3, #79	; 0x4f
 8002bec:	d103      	bne.n	8002bf6 <HAL_UART_RxCpltCallback+0x42>
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_UART_RxCpltCallback+0x88>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e00e      	b.n	8002c14 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_UART_RxCpltCallback+0x84>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b61      	cmp	r3, #97	; 0x61
 8002bfc:	d103      	bne.n	8002c06 <HAL_UART_RxCpltCallback+0x52>
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_UART_RxCpltCallback+0x8c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e006      	b.n	8002c14 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_UART_RxCpltCallback+0x84>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b41      	cmp	r3, #65	; 0x41
 8002c0c:	d102      	bne.n	8002c14 <HAL_UART_RxCpltCallback+0x60>
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_UART_RxCpltCallback+0x8c>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002c14:	2201      	movs	r2, #1
 8002c16:	4908      	ldr	r1, [pc, #32]	; (8002c38 <HAL_UART_RxCpltCallback+0x84>)
 8002c18:	480a      	ldr	r0, [pc, #40]	; (8002c44 <HAL_UART_RxCpltCallback+0x90>)
 8002c1a:	f004 f8f4 	bl	8006e06 <HAL_UART_Receive_IT>
	}
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	20000220 	.word	0x20000220
 8002c30:	20000510 	.word	0x20000510
 8002c34:	40004400 	.word	0x40004400
 8002c38:	20000221 	.word	0x20000221
 8002c3c:	20000222 	.word	0x20000222
 8002c40:	2000020c 	.word	0x2000020c
 8002c44:	20000554 	.word	0x20000554

08002c48 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <uart_EspCheck+0x1c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <uart_EspCheck+0x10>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <uart_EspCheck+0x12>
	return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	20000222 	.word	0x20000222

08002c68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <MX_USART1_UART_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002ca0:	f003 ffd2 	bl	8006c48 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002caa:	f7ff fb49 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000510 	.word	0x20000510
 8002cb8:	40011000 	.word	0x40011000

08002cbc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <MX_USART2_UART_Init+0x50>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	f003 ffa8 	bl	8006c48 <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfe:	f7ff fb1f 	bl	8002340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000554 	.word	0x20000554
 8002d0c:	40004400 	.word	0x40004400

08002d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <HAL_UART_MspInit+0x108>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d135      	bne.n	8002d9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d3c:	f043 0310 	orr.w	r3, r3, #16
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	4619      	mov	r1, r3
 8002d86:	4826      	ldr	r0, [pc, #152]	; (8002e20 <HAL_UART_MspInit+0x110>)
 8002d88:	f001 fa34 	bl	80041f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2025      	movs	r0, #37	; 0x25
 8002d92:	f000 fdf6 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d96:	2025      	movs	r0, #37	; 0x25
 8002d98:	f000 fe0f 	bl	80039ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d9c:	e038      	b.n	8002e10 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_UART_MspInit+0x114>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d133      	bne.n	8002e10 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_UART_MspInit+0x10c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002de0:	230c      	movs	r3, #12
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002df0:	2307      	movs	r3, #7
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4809      	ldr	r0, [pc, #36]	; (8002e20 <HAL_UART_MspInit+0x110>)
 8002dfc:	f001 f9fa 	bl	80041f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	2026      	movs	r0, #38	; 0x26
 8002e06:	f000 fdbc 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e0a:	2026      	movs	r0, #38	; 0x26
 8002e0c:	f000 fdd5 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002e10:	bf00      	nop
 8002e12:	3730      	adds	r7, #48	; 0x30
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40011000 	.word	0x40011000
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40004400 	.word	0x40004400

08002e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e2e:	490e      	ldr	r1, [pc, #56]	; (8002e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e44:	4c0b      	ldr	r4, [pc, #44]	; (8002e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e52:	f7ff fcff 	bl	8002854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e56:	f004 ff95 	bl	8007d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5a:	f7ff f95f 	bl	800211c <main>
  bx  lr    
 8002e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e6c:	0800ded4 	.word	0x0800ded4
  ldr r2, =_sbss
 8002e70:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002e74:	200005ac 	.word	0x200005ac

08002e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>
	...

08002e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_Init+0x40>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_Init+0x40>)
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <HAL_Init+0x40>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f000 fd61 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f000 f808 	bl	8002ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb0:	f7ff fb90 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_InitTick+0x54>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_InitTick+0x58>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fd79 	bl	80039d6 <HAL_SYSTICK_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00e      	b.n	8002f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d80a      	bhi.n	8002f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efc:	f000 fd41 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <HAL_InitTick+0x5c>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000008 	.word	0x20000008
 8002f18:	20000010 	.word	0x20000010
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000010 	.word	0x20000010
 8002f44:	20000598 	.word	0x20000598

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000598 	.word	0x20000598

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000010 	.word	0x20000010

08002fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e033      	b.n	8003026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fff4 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fee:	f023 0302 	bic.w	r3, r3, #2
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa68 	bl	80034d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
 8003016:	e001      	b.n	800301c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_ADC_Start_DMA+0x1e>
 800304a:	2302      	movs	r3, #2
 800304c:	e0e9      	b.n	8003222 <HAL_ADC_Start_DMA+0x1f2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d018      	beq.n	8003096 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003074:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_ADC_Start_DMA+0x1fc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6d      	ldr	r2, [pc, #436]	; (8003230 <HAL_ADC_Start_DMA+0x200>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9a      	lsrs	r2, r3, #18
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003088:	e002      	b.n	8003090 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3b01      	subs	r3, #1
 800308e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f9      	bne.n	800308a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 80a1 	bne.w	8003208 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003104:	d106      	bne.n	8003114 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f023 0206 	bic.w	r2, r3, #6
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
 8003112:	e002      	b.n	800311a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_ADC_Start_DMA+0x204>)
 8003124:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	4a43      	ldr	r2, [pc, #268]	; (8003238 <HAL_ADC_Start_DMA+0x208>)
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	4a42      	ldr	r2, [pc, #264]	; (800323c <HAL_ADC_Start_DMA+0x20c>)
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	4a41      	ldr	r2, [pc, #260]	; (8003240 <HAL_ADC_Start_DMA+0x210>)
 800313c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003146:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003156:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003166:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	334c      	adds	r3, #76	; 0x4c
 8003172:	4619      	mov	r1, r3
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f000 fce8 	bl	8003b4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2b00      	cmp	r3, #0
 8003186:	d12a      	bne.n	80031de <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_ADC_Start_DMA+0x214>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d015      	beq.n	80031be <HAL_ADC_Start_DMA+0x18e>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <HAL_ADC_Start_DMA+0x218>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_Start_DMA+0x178>
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_ADC_Start_DMA+0x204>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_ADC_Start_DMA+0x21c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d136      	bne.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_ADC_Start_DMA+0x204>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d130      	bne.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d129      	bne.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e020      	b.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_ADC_Start_DMA+0x214>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d11b      	bne.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d114      	bne.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	e00b      	b.n	8003220 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008
 8003230:	431bde83 	.word	0x431bde83
 8003234:	40012300 	.word	0x40012300
 8003238:	080036c9 	.word	0x080036c9
 800323c:	08003783 	.word	0x08003783
 8003240:	0800379f 	.word	0x0800379f
 8003244:	40012000 	.word	0x40012000
 8003248:	40012100 	.word	0x40012100
 800324c:	40012200 	.word	0x40012200

08003250 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1c>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e105      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x228>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	d925      	bls.n	8003304 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68d9      	ldr	r1, [r3, #12]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	3b1e      	subs	r3, #30
 80032ce:	2207      	movs	r2, #7
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43da      	mvns	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	400a      	ands	r2, r1
 80032dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68d9      	ldr	r1, [r3, #12]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	4603      	mov	r3, r0
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4403      	add	r3, r0
 80032f6:	3b1e      	subs	r3, #30
 80032f8:	409a      	lsls	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e022      	b.n	800334a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6919      	ldr	r1, [r3, #16]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	2207      	movs	r2, #7
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	400a      	ands	r2, r1
 8003326:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6919      	ldr	r1, [r3, #16]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	4618      	mov	r0, r3
 800333a:	4603      	mov	r3, r0
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4403      	add	r3, r0
 8003340:	409a      	lsls	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d824      	bhi.n	800339c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3b05      	subs	r3, #5
 8003364:	221f      	movs	r2, #31
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	4618      	mov	r0, r3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	3b05      	subs	r3, #5
 800338e:	fa00 f203 	lsl.w	r2, r0, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
 800339a:	e04c      	b.n	8003436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d824      	bhi.n	80033ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	3b23      	subs	r3, #35	; 0x23
 80033b6:	221f      	movs	r2, #31
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43da      	mvns	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	400a      	ands	r2, r1
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	3b23      	subs	r3, #35	; 0x23
 80033e0:	fa00 f203 	lsl.w	r2, r0, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
 80033ec:	e023      	b.n	8003436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b41      	subs	r3, #65	; 0x41
 8003400:	221f      	movs	r2, #31
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43da      	mvns	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	400a      	ands	r2, r1
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	4618      	mov	r0, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	3b41      	subs	r3, #65	; 0x41
 800342a:	fa00 f203 	lsl.w	r2, r0, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003436:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_ADC_ConfigChannel+0x234>)
 8003438:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_ADC_ConfigChannel+0x238>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d109      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1cc>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b12      	cmp	r3, #18
 800344a:	d105      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_ADC_ConfigChannel+0x238>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d123      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x21e>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b10      	cmp	r3, #16
 8003468:	d003      	beq.n	8003472 <HAL_ADC_ConfigChannel+0x1e6>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b11      	cmp	r3, #17
 8003470:	d11b      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b10      	cmp	r3, #16
 8003484:	d111      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_ADC_ConfigChannel+0x23c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_ADC_ConfigChannel+0x240>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	0c9a      	lsrs	r2, r3, #18
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40012300 	.word	0x40012300
 80034c4:	40012000 	.word	0x40012000
 80034c8:	20000008 	.word	0x20000008
 80034cc:	431bde83 	.word	0x431bde83

080034d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <ADC_Init+0x1f0>)
 80034da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <ADC_Init+0x1f4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	e00f      	b.n	80035ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0202 	bic.w	r2, r2, #2
 80035dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7e1b      	ldrb	r3, [r3, #24]
 80035e8:	005a      	lsls	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800361a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	3b01      	subs	r3, #1
 8003628:	035a      	lsls	r2, r3, #13
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e007      	b.n	8003644 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003642:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	3b01      	subs	r3, #1
 8003660:	051a      	lsls	r2, r3, #20
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003686:	025a      	lsls	r2, r3, #9
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6899      	ldr	r1, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	029a      	lsls	r2, r3, #10
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40012300 	.word	0x40012300
 80036c4:	0f000001 	.word	0x0f000001

080036c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d13c      	bne.n	800375c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d12b      	bne.n	8003754 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003700:	2b00      	cmp	r3, #0
 8003702:	d127      	bne.n	8003754 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800371c:	2b00      	cmp	r3, #0
 800371e:	d119      	bne.n	8003754 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0220 	bic.w	r2, r2, #32
 800372e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fd7b 	bl	8003250 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800375a:	e00e      	b.n	800377a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff fd85 	bl	8003278 <HAL_ADC_ErrorCallback>
}
 800376e:	e004      	b.n	800377a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fd67 	bl	8003264 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fd5a 	bl	8003278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	; (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	; (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800394c:	f7ff ff8e 	bl	800386c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff29 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff3e 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff8e 	bl	80038c0 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5d 	bl	800386c <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff31 	bl	8003830 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff faa4 	bl	8002f48 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e099      	b.n	8003b40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a2c:	e00f      	b.n	8003a4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a2e:	f7ff fa8b 	bl	8002f48 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d908      	bls.n	8003a4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e078      	b.n	8003b40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e8      	bne.n	8003a2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_DMA_Init+0x158>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d117      	bne.n	8003b12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb01 	bl	80040fc <DMA_CheckFifoParam>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e016      	b.n	8003b40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fab8 	bl	8004090 <DMA_CalcBaseAndBitshift>
 8003b20:	4603      	mov	r3, r0
 8003b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	f010803f 	.word	0xf010803f

08003b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_DMA_Start_IT+0x26>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e040      	b.n	8003bf4 <HAL_DMA_Start_IT+0xa8>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d12f      	bne.n	8003be6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fa4a 	bl	8004034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	223f      	movs	r2, #63	; 0x3f
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0216 	orr.w	r2, r2, #22
 8003bba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0208 	orr.w	r2, r2, #8
 8003bd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e005      	b.n	8003bf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c0a:	f7ff f99d 	bl	8002f48 <HAL_GetTick>
 8003c0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d008      	beq.n	8003c2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e052      	b.n	8003cd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0216 	bic.w	r2, r2, #22
 8003c3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_DMA_Abort+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0208 	bic.w	r2, r2, #8
 8003c6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c7e:	e013      	b.n	8003ca8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c80:	f7ff f962 	bl	8002f48 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d90c      	bls.n	8003ca8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2203      	movs	r2, #3
 8003c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e015      	b.n	8003cd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e4      	bne.n	8003c80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	223f      	movs	r2, #63	; 0x3f
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00c      	b.n	8003d14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d2c:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_DMA_IRQHandler+0x258>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a92      	ldr	r2, [pc, #584]	; (8003f7c <HAL_DMA_IRQHandler+0x25c>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a9b      	lsrs	r3, r3, #10
 8003d38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01a      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	2208      	movs	r2, #8
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2201      	movs	r2, #1
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d012      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	2204      	movs	r2, #4
 8003de6:	409a      	lsls	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d043      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d03c      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d024      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e01f      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
 8003e60:	e016      	b.n	8003e90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d107      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0208 	bic.w	r2, r2, #8
 8003e7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	2220      	movs	r2, #32
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 808e 	beq.w	8003fbe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8086 	beq.w	8003fbe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d136      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0216 	bic.w	r2, r2, #22
 8003ed8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_DMA_IRQHandler+0x1da>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0208 	bic.w	r2, r2, #8
 8003f08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	223f      	movs	r2, #63	; 0x3f
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d07d      	beq.n	800402a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
        }
        return;
 8003f36:	e078      	b.n	800402a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01c      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d030      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e02b      	b.n	8003fbe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d027      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
 8003f76:	e022      	b.n	8003fbe <HAL_DMA_IRQHandler+0x29e>
 8003f78:	20000008 	.word	0x20000008
 8003f7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0210 	bic.w	r2, r2, #16
 8003f9c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d032      	beq.n	800402c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d022      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2205      	movs	r2, #5
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d307      	bcc.n	8004006 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f2      	bne.n	8003fea <HAL_DMA_IRQHandler+0x2ca>
 8004004:	e000      	b.n	8004008 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004006:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
 8004028:	e000      	b.n	800402c <HAL_DMA_IRQHandler+0x30c>
        return;
 800402a:	bf00      	nop
    }
  }
}
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop

08004034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d108      	bne.n	8004074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004072:	e007      	b.n	8004084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3b10      	subs	r3, #16
 80040a0:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <DMA_CalcBaseAndBitshift+0x64>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <DMA_CalcBaseAndBitshift+0x68>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d909      	bls.n	80040d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	659a      	str	r2, [r3, #88]	; 0x58
 80040d0:	e007      	b.n	80040e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	aaaaaaab 	.word	0xaaaaaaab
 80040f8:	0800dadc 	.word	0x0800dadc

080040fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11f      	bne.n	8004156 <DMA_CheckFifoParam+0x5a>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d856      	bhi.n	80041ca <DMA_CheckFifoParam+0xce>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <DMA_CheckFifoParam+0x28>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004147 	.word	0x08004147
 800412c:	08004135 	.word	0x08004135
 8004130:	080041cb 	.word	0x080041cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d046      	beq.n	80041ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e043      	b.n	80041ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414e:	d140      	bne.n	80041d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004154:	e03d      	b.n	80041d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415e:	d121      	bne.n	80041a4 <DMA_CheckFifoParam+0xa8>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d837      	bhi.n	80041d6 <DMA_CheckFifoParam+0xda>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <DMA_CheckFifoParam+0x70>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004183 	.word	0x08004183
 8004174:	0800417d 	.word	0x0800417d
 8004178:	08004195 	.word	0x08004195
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e030      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004192:	e022      	b.n	80041da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419c:	d11f      	bne.n	80041de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041a2:	e01c      	b.n	80041de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d903      	bls.n	80041b2 <DMA_CheckFifoParam+0xb6>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d003      	beq.n	80041b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041b0:	e018      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      break;
 80041b6:	e015      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e00b      	b.n	80041e2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ca:	bf00      	nop
 80041cc:	e00a      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e008      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e006      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
    }
  } 
  
  return status; 
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e16b      	b.n	80044e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004210:	2201      	movs	r2, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	429a      	cmp	r2, r3
 800422a:	f040 815a 	bne.w	80044e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d005      	beq.n	8004246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004242:	2b02      	cmp	r3, #2
 8004244:	d130      	bne.n	80042a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2203      	movs	r2, #3
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800427c:	2201      	movs	r2, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 0201 	and.w	r2, r3, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d017      	beq.n	80042e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2203      	movs	r2, #3
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d123      	bne.n	8004338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	08da      	lsrs	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	08da      	lsrs	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3208      	adds	r2, #8
 8004332:	69b9      	ldr	r1, [r7, #24]
 8004334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2203      	movs	r2, #3
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80b4 	beq.w	80044e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	4b60      	ldr	r3, [pc, #384]	; (8004500 <HAL_GPIO_Init+0x30c>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	4a5f      	ldr	r2, [pc, #380]	; (8004500 <HAL_GPIO_Init+0x30c>)
 8004384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004388:	6453      	str	r3, [r2, #68]	; 0x44
 800438a:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_GPIO_Init+0x30c>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004396:	4a5b      	ldr	r2, [pc, #364]	; (8004504 <HAL_GPIO_Init+0x310>)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	3302      	adds	r3, #2
 800439e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	220f      	movs	r2, #15
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a52      	ldr	r2, [pc, #328]	; (8004508 <HAL_GPIO_Init+0x314>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02b      	beq.n	800441a <HAL_GPIO_Init+0x226>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a51      	ldr	r2, [pc, #324]	; (800450c <HAL_GPIO_Init+0x318>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d025      	beq.n	8004416 <HAL_GPIO_Init+0x222>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a50      	ldr	r2, [pc, #320]	; (8004510 <HAL_GPIO_Init+0x31c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01f      	beq.n	8004412 <HAL_GPIO_Init+0x21e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a4f      	ldr	r2, [pc, #316]	; (8004514 <HAL_GPIO_Init+0x320>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d019      	beq.n	800440e <HAL_GPIO_Init+0x21a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4e      	ldr	r2, [pc, #312]	; (8004518 <HAL_GPIO_Init+0x324>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_GPIO_Init+0x216>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4d      	ldr	r2, [pc, #308]	; (800451c <HAL_GPIO_Init+0x328>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00d      	beq.n	8004406 <HAL_GPIO_Init+0x212>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a4c      	ldr	r2, [pc, #304]	; (8004520 <HAL_GPIO_Init+0x32c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <HAL_GPIO_Init+0x20e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4b      	ldr	r2, [pc, #300]	; (8004524 <HAL_GPIO_Init+0x330>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_GPIO_Init+0x20a>
 80043fa:	2307      	movs	r3, #7
 80043fc:	e00e      	b.n	800441c <HAL_GPIO_Init+0x228>
 80043fe:	2308      	movs	r3, #8
 8004400:	e00c      	b.n	800441c <HAL_GPIO_Init+0x228>
 8004402:	2306      	movs	r3, #6
 8004404:	e00a      	b.n	800441c <HAL_GPIO_Init+0x228>
 8004406:	2305      	movs	r3, #5
 8004408:	e008      	b.n	800441c <HAL_GPIO_Init+0x228>
 800440a:	2304      	movs	r3, #4
 800440c:	e006      	b.n	800441c <HAL_GPIO_Init+0x228>
 800440e:	2303      	movs	r3, #3
 8004410:	e004      	b.n	800441c <HAL_GPIO_Init+0x228>
 8004412:	2302      	movs	r3, #2
 8004414:	e002      	b.n	800441c <HAL_GPIO_Init+0x228>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_GPIO_Init+0x228>
 800441a:	2300      	movs	r3, #0
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f002 0203 	and.w	r2, r2, #3
 8004422:	0092      	lsls	r2, r2, #2
 8004424:	4093      	lsls	r3, r2
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800442c:	4935      	ldr	r1, [pc, #212]	; (8004504 <HAL_GPIO_Init+0x310>)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_GPIO_Init+0x334>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800445e:	4a32      	ldr	r2, [pc, #200]	; (8004528 <HAL_GPIO_Init+0x334>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004464:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_GPIO_Init+0x334>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <HAL_GPIO_Init+0x334>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448e:	4b26      	ldr	r3, [pc, #152]	; (8004528 <HAL_GPIO_Init+0x334>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_GPIO_Init+0x334>)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_GPIO_Init+0x334>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044dc:	4a12      	ldr	r2, [pc, #72]	; (8004528 <HAL_GPIO_Init+0x334>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	f67f ae90 	bls.w	8004210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40013800 	.word	0x40013800
 8004508:	40020000 	.word	0x40020000
 800450c:	40020400 	.word	0x40020400
 8004510:	40020800 	.word	0x40020800
 8004514:	40020c00 	.word	0x40020c00
 8004518:	40021000 	.word	0x40021000
 800451c:	40021400 	.word	0x40021400
 8004520:	40021800 	.word	0x40021800
 8004524:	40021c00 	.word	0x40021c00
 8004528:	40013c00 	.word	0x40013c00

0800452c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
 8004538:	4613      	mov	r3, r2
 800453a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800453c:	787b      	ldrb	r3, [r7, #1]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004548:	e003      	b.n	8004552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800454a:	887b      	ldrh	r3, [r7, #2]
 800454c:	041a      	lsls	r2, r3, #16
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	619a      	str	r2, [r3, #24]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	041a      	lsls	r2, r3, #16
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43d9      	mvns	r1, r3
 800457c:	887b      	ldrh	r3, [r7, #2]
 800457e:	400b      	ands	r3, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	619a      	str	r2, [r3, #24]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e12b      	b.n	80047fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd f85e 	bl	800167c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	; 0x24
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045f8:	f000 fd5c 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 80045fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a81      	ldr	r2, [pc, #516]	; (8004808 <HAL_I2C_Init+0x274>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d807      	bhi.n	8004618 <HAL_I2C_Init+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a80      	ldr	r2, [pc, #512]	; (800480c <HAL_I2C_Init+0x278>)
 800460c:	4293      	cmp	r3, r2
 800460e:	bf94      	ite	ls
 8004610:	2301      	movls	r3, #1
 8004612:	2300      	movhi	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e006      	b.n	8004626 <HAL_I2C_Init+0x92>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a7d      	ldr	r2, [pc, #500]	; (8004810 <HAL_I2C_Init+0x27c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	bf94      	ite	ls
 8004620:	2301      	movls	r3, #1
 8004622:	2300      	movhi	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0e7      	b.n	80047fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a78      	ldr	r2, [pc, #480]	; (8004814 <HAL_I2C_Init+0x280>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0c9b      	lsrs	r3, r3, #18
 8004638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4a6a      	ldr	r2, [pc, #424]	; (8004808 <HAL_I2C_Init+0x274>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d802      	bhi.n	8004668 <HAL_I2C_Init+0xd4>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3301      	adds	r3, #1
 8004666:	e009      	b.n	800467c <HAL_I2C_Init+0xe8>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	4a69      	ldr	r2, [pc, #420]	; (8004818 <HAL_I2C_Init+0x284>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	3301      	adds	r3, #1
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	430b      	orrs	r3, r1
 8004682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800468e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	495c      	ldr	r1, [pc, #368]	; (8004808 <HAL_I2C_Init+0x274>)
 8004698:	428b      	cmp	r3, r1
 800469a:	d819      	bhi.n	80046d0 <HAL_I2C_Init+0x13c>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e59      	subs	r1, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046b0:	400b      	ands	r3, r1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_I2C_Init+0x138>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1e59      	subs	r1, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ca:	e051      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 80046cc:	2304      	movs	r3, #4
 80046ce:	e04f      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d111      	bne.n	80046fc <HAL_I2C_Init+0x168>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	440b      	add	r3, r1
 80046e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ea:	3301      	adds	r3, #1
 80046ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e012      	b.n	8004722 <HAL_I2C_Init+0x18e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e58      	subs	r0, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6859      	ldr	r1, [r3, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	0099      	lsls	r1, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004712:	3301      	adds	r3, #1
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Init+0x196>
 8004726:	2301      	movs	r3, #1
 8004728:	e022      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10e      	bne.n	8004750 <HAL_I2C_Init+0x1bc>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e58      	subs	r0, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	440b      	add	r3, r1
 8004740:	fbb0 f3f3 	udiv	r3, r0, r3
 8004744:	3301      	adds	r3, #1
 8004746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474e:	e00f      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1e58      	subs	r0, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	0099      	lsls	r1, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	fbb0 f3f3 	udiv	r3, r0, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	6809      	ldr	r1, [r1, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800479e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6911      	ldr	r1, [r2, #16]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68d2      	ldr	r2, [r2, #12]
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	000186a0 	.word	0x000186a0
 800480c:	001e847f 	.word	0x001e847f
 8004810:	003d08ff 	.word	0x003d08ff
 8004814:	431bde83 	.word	0x431bde83
 8004818:	10624dd3 	.word	0x10624dd3

0800481c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e264      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	4ba3      	ldr	r3, [pc, #652]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00c      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4ba0      	ldr	r3, [pc, #640]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	2b08      	cmp	r3, #8
 8004850:	d112      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004852:	4b9d      	ldr	r3, [pc, #628]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e23f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b91      	ldr	r3, [pc, #580]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a90      	ldr	r2, [pc, #576]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b8b      	ldr	r3, [pc, #556]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a8a      	ldr	r2, [pc, #552]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a87      	ldr	r2, [pc, #540]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a83      	ldr	r2, [pc, #524]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a80      	ldr	r2, [pc, #512]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fb38 	bl	8002f48 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fe fb34 	bl	8002f48 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e204      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fb24 	bl	8002f48 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004904:	f7fe fb20 	bl	8002f48 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1f0      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b62      	ldr	r3, [pc, #392]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b5f      	ldr	r3, [pc, #380]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b5c      	ldr	r3, [pc, #368]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1c4      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b56      	ldr	r3, [pc, #344]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4952      	ldr	r1, [pc, #328]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b4f      	ldr	r3, [pc, #316]	; (8004acc <HAL_RCC_OscConfig+0x2b0>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe fad9 	bl	8002f48 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499a:	f7fe fad5 	bl	8002f48 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1a5      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4940      	ldr	r1, [pc, #256]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCC_OscConfig+0x2b0>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fab8 	bl	8002f48 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fe fab4 	bl	8002f48 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e184      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d030      	beq.n	8004a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <HAL_RCC_OscConfig+0x2b4>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe fa98 	bl	8002f48 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fa94 	bl	8002f48 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e164      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
 8004a3a:	e015      	b.n	8004a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_RCC_OscConfig+0x2b4>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fa81 	bl	8002f48 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fa7d 	bl	8002f48 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e14d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a0 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_OscConfig+0x2b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d121      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <HAL_RCC_OscConfig+0x2b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <HAL_RCC_OscConfig+0x2b8>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fa43 	bl	8002f48 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	e011      	b.n	8004aea <HAL_RCC_OscConfig+0x2ce>
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	42470000 	.word	0x42470000
 8004ad0:	42470e80 	.word	0x42470e80
 8004ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fe fa36 	bl	8002f48 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e106      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <HAL_RCC_OscConfig+0x4e4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_OscConfig+0x2f0>
 8004afe:	4b81      	ldr	r3, [pc, #516]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a80      	ldr	r2, [pc, #512]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	e01c      	b.n	8004b46 <HAL_RCC_OscConfig+0x32a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	d10c      	bne.n	8004b2e <HAL_RCC_OscConfig+0x312>
 8004b14:	4b7b      	ldr	r3, [pc, #492]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a7a      	ldr	r2, [pc, #488]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	4b78      	ldr	r3, [pc, #480]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	4a77      	ldr	r2, [pc, #476]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2c:	e00b      	b.n	8004b46 <HAL_RCC_OscConfig+0x32a>
 8004b2e:	4b75      	ldr	r3, [pc, #468]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a74      	ldr	r2, [pc, #464]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	4b72      	ldr	r3, [pc, #456]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a71      	ldr	r2, [pc, #452]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d015      	beq.n	8004b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fe f9fb 	bl	8002f48 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fe f9f7 	bl	8002f48 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0c5      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6c:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ee      	beq.n	8004b56 <HAL_RCC_OscConfig+0x33a>
 8004b78:	e014      	b.n	8004ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7a:	f7fe f9e5 	bl	8002f48 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fe f9e1 	bl	8002f48 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0af      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b98:	4b5a      	ldr	r3, [pc, #360]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ee      	bne.n	8004b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b56      	ldr	r3, [pc, #344]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a55      	ldr	r2, [pc, #340]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 809b 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc0:	4b50      	ldr	r3, [pc, #320]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d05c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d141      	bne.n	8004c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_RCC_OscConfig+0x4ec>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fe f9b5 	bl	8002f48 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be2:	f7fe f9b1 	bl	8002f48 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e081      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf4:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	4937      	ldr	r1, [pc, #220]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_RCC_OscConfig+0x4ec>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe f98a 	bl	8002f48 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe f986 	bl	8002f48 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e056      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x41c>
 8004c56:	e04e      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <HAL_RCC_OscConfig+0x4ec>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fe f973 	bl	8002f48 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fe f96f 	bl	8002f48 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e03f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCC_OscConfig+0x44a>
 8004c84:	e037      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e032      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <HAL_RCC_OscConfig+0x4e8>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d028      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d121      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d11a      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d111      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40007000 	.word	0x40007000
 8004d04:	40023800 	.word	0x40023800
 8004d08:	42470060 	.word	0x42470060

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0cc      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90c      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0b8      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d78:	4b53      	ldr	r3, [pc, #332]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a52      	ldr	r2, [pc, #328]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494d      	ldr	r1, [pc, #308]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d119      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e067      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4934      	ldr	r1, [pc, #208]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fe f8a4 	bl	8002f48 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fe f8a0 	bl	8002f48 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e04f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20c      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e032      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4916      	ldr	r1, [pc, #88]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e92:	f000 f821 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	490a      	ldr	r1, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	5ccb      	ldrb	r3, [r1, r3]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe f804 	bl	8002ec0 <HAL_InitTick>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800dac4 	.word	0x0800dac4
 8004ed0:	20000008 	.word	0x20000008
 8004ed4:	2000000c 	.word	0x2000000c

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef0:	4b67      	ldr	r3, [pc, #412]	; (8005090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d00d      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x40>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	f200 80bd 	bhi.w	800507c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x34>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0a:	e0b7      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f0e:	60bb      	str	r3, [r7, #8]
       break;
 8004f10:	e0b7      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f14:	60bb      	str	r3, [r7, #8]
      break;
 8004f16:	e0b4      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f18:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f22:	4b5b      	ldr	r3, [pc, #364]	; (8005090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d04d      	beq.n	8004fca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2e:	4b58      	ldr	r3, [pc, #352]	; (8005090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	461a      	mov	r2, r3
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	ea02 0800 	and.w	r8, r2, r0
 8004f46:	ea03 0901 	and.w	r9, r3, r1
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	014b      	lsls	r3, r1, #5
 8004f58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f5c:	0142      	lsls	r2, r0, #5
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	ebb0 0008 	subs.w	r0, r0, r8
 8004f66:	eb61 0109 	sbc.w	r1, r1, r9
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	018b      	lsls	r3, r1, #6
 8004f74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f78:	0182      	lsls	r2, r0, #6
 8004f7a:	1a12      	subs	r2, r2, r0
 8004f7c:	eb63 0301 	sbc.w	r3, r3, r1
 8004f80:	f04f 0000 	mov.w	r0, #0
 8004f84:	f04f 0100 	mov.w	r1, #0
 8004f88:	00d9      	lsls	r1, r3, #3
 8004f8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f8e:	00d0      	lsls	r0, r2, #3
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	eb12 0208 	adds.w	r2, r2, r8
 8004f98:	eb43 0309 	adc.w	r3, r3, r9
 8004f9c:	f04f 0000 	mov.w	r0, #0
 8004fa0:	f04f 0100 	mov.w	r1, #0
 8004fa4:	0259      	lsls	r1, r3, #9
 8004fa6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004faa:	0250      	lsls	r0, r2, #9
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	f7fb fdf4 	bl	8000ba8 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e04a      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	099b      	lsrs	r3, r3, #6
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	ea02 0400 	and.w	r4, r2, r0
 8004fe2:	ea03 0501 	and.w	r5, r3, r1
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	014b      	lsls	r3, r1, #5
 8004ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ff8:	0142      	lsls	r2, r0, #5
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	1b00      	subs	r0, r0, r4
 8005000:	eb61 0105 	sbc.w	r1, r1, r5
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	018b      	lsls	r3, r1, #6
 800500e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005012:	0182      	lsls	r2, r0, #6
 8005014:	1a12      	subs	r2, r2, r0
 8005016:	eb63 0301 	sbc.w	r3, r3, r1
 800501a:	f04f 0000 	mov.w	r0, #0
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	00d9      	lsls	r1, r3, #3
 8005024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005028:	00d0      	lsls	r0, r2, #3
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	1912      	adds	r2, r2, r4
 8005030:	eb45 0303 	adc.w	r3, r5, r3
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	0299      	lsls	r1, r3, #10
 800503e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005042:	0290      	lsls	r0, r2, #10
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	461a      	mov	r2, r3
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f7fb fda8 	bl	8000ba8 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	3301      	adds	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]
      break;
 800507a:	e002      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800507e:	60bb      	str	r3, [r7, #8]
      break;
 8005080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005082:	68bb      	ldr	r3, [r7, #8]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	00f42400 	.word	0x00f42400
 8005098:	007a1200 	.word	0x007a1200

0800509c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000008 	.word	0x20000008

080050b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b8:	f7ff fff0 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800dad4 	.word	0x0800dad4

080050dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050e0:	f7ff ffdc 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0b5b      	lsrs	r3, r3, #13
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	0800dad4 	.word	0x0800dad4

08005104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e07b      	b.n	800520e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005126:	d009      	beq.n	800513c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
 800512e:	e005      	b.n	800513c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fd f9f4 	bl	8002544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	ea42 0103 	orr.w	r1, r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	f003 0104 	and.w	r1, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0210 	and.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b088      	sub	sp, #32
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_SPI_Transmit+0x22>
 8005234:	2302      	movs	r3, #2
 8005236:	e126      	b.n	8005486 <HAL_SPI_Transmit+0x270>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005240:	f7fd fe82 	bl	8002f48 <HAL_GetTick>
 8005244:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b01      	cmp	r3, #1
 8005254:	d002      	beq.n	800525c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005256:	2302      	movs	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]
    goto error;
 800525a:	e10b      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x52>
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800526c:	e102      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2203      	movs	r2, #3
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	88fa      	ldrh	r2, [r7, #6]
 8005286:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b4:	d10f      	bne.n	80052d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d007      	beq.n	80052f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d14b      	bne.n	8005396 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_SPI_Transmit+0xf6>
 8005306:	8afb      	ldrh	r3, [r7, #22]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d13e      	bne.n	800538a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	881a      	ldrh	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	1c9a      	adds	r2, r3, #2
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005330:	e02b      	b.n	800538a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d112      	bne.n	8005366 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	1c9a      	adds	r2, r3, #2
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	86da      	strh	r2, [r3, #54]	; 0x36
 8005364:	e011      	b.n	800538a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005366:	f7fd fdef 	bl	8002f48 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d803      	bhi.n	800537e <HAL_SPI_Transmit+0x168>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800537c:	d102      	bne.n	8005384 <HAL_SPI_Transmit+0x16e>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005388:	e074      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1ce      	bne.n	8005332 <HAL_SPI_Transmit+0x11c>
 8005394:	e04c      	b.n	8005430 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_Transmit+0x18e>
 800539e:	8afb      	ldrh	r3, [r7, #22]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d140      	bne.n	8005426 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053ca:	e02c      	b.n	8005426 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d113      	bne.n	8005402 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005400:	e011      	b.n	8005426 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005402:	f7fd fda1 	bl	8002f48 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d803      	bhi.n	800541a <HAL_SPI_Transmit+0x204>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005418:	d102      	bne.n	8005420 <HAL_SPI_Transmit+0x20a>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005424:	e026      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1cd      	bne.n	80053cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fbcb 	bl	8005bd0 <SPI_EndRxTxTransaction>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e000      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005484:	7ffb      	ldrb	r3, [r7, #31]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b088      	sub	sp, #32
 8005492:	af02      	add	r7, sp, #8
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d112      	bne.n	80054d2 <HAL_SPI_Receive+0x44>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10e      	bne.n	80054d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2204      	movs	r2, #4
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f8f1 	bl	80056b0 <HAL_SPI_TransmitReceive>
 80054ce:	4603      	mov	r3, r0
 80054d0:	e0ea      	b.n	80056a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_SPI_Receive+0x52>
 80054dc:	2302      	movs	r3, #2
 80054de:	e0e3      	b.n	80056a8 <HAL_SPI_Receive+0x21a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e8:	f7fd fd2e 	bl	8002f48 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
 80054fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054fe:	e0ca      	b.n	8005696 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Receive+0x7e>
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005510:	e0c1      	b.n	8005696 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2204      	movs	r2, #4
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005558:	d10f      	bne.n	800557a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d007      	beq.n	8005598 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d162      	bne.n	8005666 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055a0:	e02e      	b.n	8005600 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d115      	bne.n	80055dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f103 020c 	add.w	r2, r3, #12
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055da:	e011      	b.n	8005600 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055dc:	f7fd fcb4 	bl	8002f48 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d803      	bhi.n	80055f4 <HAL_SPI_Receive+0x166>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f2:	d102      	bne.n	80055fa <HAL_SPI_Receive+0x16c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055fe:	e04a      	b.n	8005696 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1cb      	bne.n	80055a2 <HAL_SPI_Receive+0x114>
 800560a:	e031      	b.n	8005670 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d113      	bne.n	8005642 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005640:	e011      	b.n	8005666 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005642:	f7fd fc81 	bl	8002f48 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d803      	bhi.n	800565a <HAL_SPI_Receive+0x1cc>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005658:	d102      	bne.n	8005660 <HAL_SPI_Receive+0x1d2>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005664:	e017      	b.n	8005696 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1cd      	bne.n	800560c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fa45 	bl	8005b04 <SPI_EndRxTransaction>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
 8005692:	e000      	b.n	8005696 <HAL_SPI_Receive+0x208>
  }

error :
 8005694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	; 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056be:	2301      	movs	r3, #1
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x26>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e18a      	b.n	80059ec <HAL_SPI_TransmitReceive+0x33c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056de:	f7fd fc33 	bl	8002f48 <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d00f      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x70>
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d107      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x68>
 8005710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005714:	2b04      	cmp	r3, #4
 8005716:	d003      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005718:	2302      	movs	r3, #2
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800571e:	e15b      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x82>
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005738:	e14e      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b04      	cmp	r3, #4
 8005744:	d003      	beq.n	800574e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2205      	movs	r2, #5
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d007      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057aa:	d178      	bne.n	800589e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x10a>
 80057b4:	8b7b      	ldrh	r3, [r7, #26]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d166      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057de:	e053      	b.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d11b      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x176>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x176>
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d113      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x1b8>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d014      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	b292      	uxth	r2, r2
 800584a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005868:	f7fd fb6e 	bl	8002f48 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005874:	429a      	cmp	r2, r3
 8005876:	d807      	bhi.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800587e:	d003      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005886:	e0a7      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1a6      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x130>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1a1      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x130>
 800589c:	e07c      	b.n	8005998 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x1fc>
 80058a6:	8b7b      	ldrh	r3, [r7, #26]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d16b      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d2:	e057      	b.n	8005984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d11c      	bne.n	800591c <HAL_SPI_TransmitReceive+0x26c>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <HAL_SPI_TransmitReceive+0x26c>
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d114      	bne.n	800591c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d119      	bne.n	800595e <HAL_SPI_TransmitReceive+0x2ae>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d014      	beq.n	800595e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800595a:	2301      	movs	r3, #1
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800595e:	f7fd faf3 	bl	8002f48 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800596a:	429a      	cmp	r2, r3
 800596c:	d803      	bhi.n	8005976 <HAL_SPI_TransmitReceive+0x2c6>
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005974:	d102      	bne.n	800597c <HAL_SPI_TransmitReceive+0x2cc>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d103      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005982:	e029      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1a2      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x224>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d19d      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f917 	bl	8005bd0 <SPI_EndRxTxTransaction>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059b4:	e010      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	e000      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3730      	adds	r7, #48	; 0x30
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a04:	f7fd faa0 	bl	8002f48 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	4413      	add	r3, r2
 8005a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a14:	f7fd fa98 	bl	8002f48 <HAL_GetTick>
 8005a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	015b      	lsls	r3, r3, #5
 8005a20:	0d1b      	lsrs	r3, r3, #20
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a2a:	e054      	b.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a32:	d050      	beq.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a34:	f7fd fa88 	bl	8002f48 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d902      	bls.n	8005a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d13d      	bne.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a62:	d111      	bne.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d004      	beq.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a76:	d107      	bne.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a90:	d10f      	bne.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e017      	b.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d19b      	bne.n	8005a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000008 	.word	0x20000008

08005b04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b18:	d111      	bne.n	8005b3e <SPI_EndRxTransaction+0x3a>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d004      	beq.n	8005b2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2c:	d107      	bne.n	8005b3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b46:	d12a      	bne.n	8005b9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b50:	d012      	beq.n	8005b78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ff49 	bl	80059f4 <SPI_WaitFlagStateUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02d      	beq.n	8005bc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e026      	b.n	8005bc6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2101      	movs	r1, #1
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff ff36 	bl	80059f4 <SPI_WaitFlagStateUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01a      	beq.n	8005bc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e013      	b.n	8005bc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff ff23 	bl	80059f4 <SPI_WaitFlagStateUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	f043 0220 	orr.w	r2, r3, #32
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e000      	b.n	8005bc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	; (8005c4c <SPI_EndRxTxTransaction+0x7c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <SPI_EndRxTxTransaction+0x80>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	0d5b      	lsrs	r3, r3, #21
 8005be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bfa:	d112      	bne.n	8005c22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fef4 	bl	80059f4 <SPI_WaitFlagStateUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e00f      	b.n	8005c42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d0f2      	beq.n	8005c22 <SPI_EndRxTxTransaction+0x52>
 8005c3c:	e000      	b.n	8005c40 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c3e:	bf00      	nop
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000008 	.word	0x20000008
 8005c50:	165e9f81 	.word	0x165e9f81

08005c54 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e034      	b.n	8005cd4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7fb fb8a 	bl	8001398 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f001 ffa2 	bl	8007bd8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	f001 ffec 	bl	8007c7c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6858      	ldr	r0, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	f002 f821 	bl	8007cf8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	6892      	ldr	r2, [r2, #8]
 8005cbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	6892      	ldr	r2, [r2, #8]
 8005cca:	f041 0101 	orr.w	r1, r1, #1
 8005cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e041      	b.n	8005d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fc fea2 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fc1a 	bl	8006554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d001      	beq.n	8005d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e046      	b.n	8005e22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a23      	ldr	r2, [pc, #140]	; (8005e30 <HAL_TIM_Base_Start+0xb4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d01d      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <HAL_TIM_Base_Start+0xb8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	; (8005e38 <HAL_TIM_Base_Start+0xbc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <HAL_TIM_Base_Start+0xc0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <HAL_TIM_Base_Start+0xc4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a19      	ldr	r2, [pc, #100]	; (8005e44 <HAL_TIM_Base_Start+0xc8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_TIM_Base_Start+0x70>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <HAL_TIM_Base_Start+0xcc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d111      	bne.n	8005e10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d010      	beq.n	8005e20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	e007      	b.n	8005e20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e04e      	b.n	8005f02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a23      	ldr	r2, [pc, #140]	; (8005f10 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d01d      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1f      	ldr	r2, [pc, #124]	; (8005f14 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1b      	ldr	r2, [pc, #108]	; (8005f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d111      	bne.n	8005ef0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d010      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	e007      	b.n	8005f00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40010400 	.word	0x40010400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40001800 	.word	0x40001800

08005f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e041      	b.n	8005fc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f839 	bl	8005fca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 faf2 	bl	8006554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d122      	bne.n	800603a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d11b      	bne.n	800603a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0202 	mvn.w	r2, #2
 800600a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fa78 	bl	8006516 <HAL_TIM_IC_CaptureCallback>
 8006026:	e005      	b.n	8006034 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa6a 	bl	8006502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fa7b 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d122      	bne.n	800608e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b04      	cmp	r3, #4
 8006054:	d11b      	bne.n	800608e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f06f 0204 	mvn.w	r2, #4
 800605e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa4e 	bl	8006516 <HAL_TIM_IC_CaptureCallback>
 800607a:	e005      	b.n	8006088 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa40 	bl	8006502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa51 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d122      	bne.n	80060e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d11b      	bne.n	80060e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f06f 0208 	mvn.w	r2, #8
 80060b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa24 	bl	8006516 <HAL_TIM_IC_CaptureCallback>
 80060ce:	e005      	b.n	80060dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fa16 	bl	8006502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa27 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d122      	bne.n	8006136 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d11b      	bne.n	8006136 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f06f 0210 	mvn.w	r2, #16
 8006106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2208      	movs	r2, #8
 800610c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f9fa 	bl	8006516 <HAL_TIM_IC_CaptureCallback>
 8006122:	e005      	b.n	8006130 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f9ec 	bl	8006502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f9fd 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d10e      	bne.n	8006162 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f06f 0201 	mvn.w	r2, #1
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fc f975 	bl	800244c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d10e      	bne.n	800618e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b80      	cmp	r3, #128	; 0x80
 800617c:	d107      	bne.n	800618e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fd53 	bl	8006c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9c2 	bl	800653e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d10e      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d107      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0220 	mvn.w	r2, #32
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fd1d 	bl	8006c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800620a:	2302      	movs	r3, #2
 800620c:	e0ae      	b.n	800636c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	f200 809f 	bhi.w	800635c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006259 	.word	0x08006259
 8006228:	0800635d 	.word	0x0800635d
 800622c:	0800635d 	.word	0x0800635d
 8006230:	0800635d 	.word	0x0800635d
 8006234:	08006299 	.word	0x08006299
 8006238:	0800635d 	.word	0x0800635d
 800623c:	0800635d 	.word	0x0800635d
 8006240:	0800635d 	.word	0x0800635d
 8006244:	080062db 	.word	0x080062db
 8006248:	0800635d 	.word	0x0800635d
 800624c:	0800635d 	.word	0x0800635d
 8006250:	0800635d 	.word	0x0800635d
 8006254:	0800631b 	.word	0x0800631b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fa18 	bl	8006694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0208 	orr.w	r2, r2, #8
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0204 	bic.w	r2, r2, #4
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	619a      	str	r2, [r3, #24]
      break;
 8006296:	e064      	b.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fa68 	bl	8006774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	021a      	lsls	r2, r3, #8
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	619a      	str	r2, [r3, #24]
      break;
 80062d8:	e043      	b.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fabd 	bl	8006860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0208 	orr.w	r2, r2, #8
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0204 	bic.w	r2, r2, #4
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	61da      	str	r2, [r3, #28]
      break;
 8006318:	e023      	b.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fb11 	bl	8006948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	021a      	lsls	r2, r3, #8
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	61da      	str	r2, [r3, #28]
      break;
 800635a:	e002      	b.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
      break;
 8006360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_TIM_ConfigClockSource+0x1c>
 800638c:	2302      	movs	r3, #2
 800638e:	e0b4      	b.n	80064fa <HAL_TIM_ConfigClockSource+0x186>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c8:	d03e      	beq.n	8006448 <HAL_TIM_ConfigClockSource+0xd4>
 80063ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ce:	f200 8087 	bhi.w	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	f000 8086 	beq.w	80064e6 <HAL_TIM_ConfigClockSource+0x172>
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063de:	d87f      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 80063e0:	2b70      	cmp	r3, #112	; 0x70
 80063e2:	d01a      	beq.n	800641a <HAL_TIM_ConfigClockSource+0xa6>
 80063e4:	2b70      	cmp	r3, #112	; 0x70
 80063e6:	d87b      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 80063e8:	2b60      	cmp	r3, #96	; 0x60
 80063ea:	d050      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x11a>
 80063ec:	2b60      	cmp	r3, #96	; 0x60
 80063ee:	d877      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b50      	cmp	r3, #80	; 0x50
 80063f2:	d03c      	beq.n	800646e <HAL_TIM_ConfigClockSource+0xfa>
 80063f4:	2b50      	cmp	r3, #80	; 0x50
 80063f6:	d873      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b40      	cmp	r3, #64	; 0x40
 80063fa:	d058      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x13a>
 80063fc:	2b40      	cmp	r3, #64	; 0x40
 80063fe:	d86f      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b30      	cmp	r3, #48	; 0x30
 8006402:	d064      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x15a>
 8006404:	2b30      	cmp	r3, #48	; 0x30
 8006406:	d86b      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d060      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x15a>
 800640c:	2b20      	cmp	r3, #32
 800640e:	d867      	bhi.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d05c      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x15a>
 8006414:	2b10      	cmp	r3, #16
 8006416:	d05a      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x15a>
 8006418:	e062      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6899      	ldr	r1, [r3, #8]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f000 fb5d 	bl	8006ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800643c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	609a      	str	r2, [r3, #8]
      break;
 8006446:	e04f      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	6899      	ldr	r1, [r3, #8]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f000 fb46 	bl	8006ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800646a:	609a      	str	r2, [r3, #8]
      break;
 800646c:	e03c      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 faba 	bl	80069f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2150      	movs	r1, #80	; 0x50
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fb13 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 800648c:	e02c      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6859      	ldr	r1, [r3, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	461a      	mov	r2, r3
 800649c:	f000 fad9 	bl	8006a52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2160      	movs	r1, #96	; 0x60
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fb03 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 80064ac:	e01c      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6859      	ldr	r1, [r3, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f000 fa9a 	bl	80069f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2140      	movs	r1, #64	; 0x40
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 faf3 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 80064cc:	e00c      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f000 faea 	bl	8006ab2 <TIM_ITRx_SetConfig>
      break;
 80064de:	e003      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
      break;
 80064e4:	e000      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a40      	ldr	r2, [pc, #256]	; (8006668 <TIM_Base_SetConfig+0x114>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006572:	d00f      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3d      	ldr	r2, [pc, #244]	; (800666c <TIM_Base_SetConfig+0x118>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00b      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3c      	ldr	r2, [pc, #240]	; (8006670 <TIM_Base_SetConfig+0x11c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3b      	ldr	r2, [pc, #236]	; (8006674 <TIM_Base_SetConfig+0x120>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3a      	ldr	r2, [pc, #232]	; (8006678 <TIM_Base_SetConfig+0x124>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2f      	ldr	r2, [pc, #188]	; (8006668 <TIM_Base_SetConfig+0x114>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d02b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d027      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2c      	ldr	r2, [pc, #176]	; (800666c <TIM_Base_SetConfig+0x118>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d023      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2b      	ldr	r2, [pc, #172]	; (8006670 <TIM_Base_SetConfig+0x11c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01f      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <TIM_Base_SetConfig+0x120>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a29      	ldr	r2, [pc, #164]	; (8006678 <TIM_Base_SetConfig+0x124>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d017      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <TIM_Base_SetConfig+0x128>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a27      	ldr	r2, [pc, #156]	; (8006680 <TIM_Base_SetConfig+0x12c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00f      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a26      	ldr	r2, [pc, #152]	; (8006684 <TIM_Base_SetConfig+0x130>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a25      	ldr	r2, [pc, #148]	; (8006688 <TIM_Base_SetConfig+0x134>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a24      	ldr	r2, [pc, #144]	; (800668c <TIM_Base_SetConfig+0x138>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a23      	ldr	r2, [pc, #140]	; (8006690 <TIM_Base_SetConfig+0x13c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <TIM_Base_SetConfig+0x114>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0xf8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <TIM_Base_SetConfig+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d103      	bne.n	8006654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	615a      	str	r2, [r3, #20]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40010400 	.word	0x40010400
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800
 8006688:	40001800 	.word	0x40001800
 800668c:	40001c00 	.word	0x40001c00
 8006690:	40002000 	.word	0x40002000

08006694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 0302 	bic.w	r3, r3, #2
 80066dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a20      	ldr	r2, [pc, #128]	; (800676c <TIM_OC1_SetConfig+0xd8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_OC1_SetConfig+0x64>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a1f      	ldr	r2, [pc, #124]	; (8006770 <TIM_OC1_SetConfig+0xdc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d10c      	bne.n	8006712 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0308 	bic.w	r3, r3, #8
 80066fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f023 0304 	bic.w	r3, r3, #4
 8006710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a15      	ldr	r2, [pc, #84]	; (800676c <TIM_OC1_SetConfig+0xd8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC1_SetConfig+0x8e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a14      	ldr	r2, [pc, #80]	; (8006770 <TIM_OC1_SetConfig+0xdc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d111      	bne.n	8006746 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400

08006774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f023 0210 	bic.w	r2, r3, #16
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0320 	bic.w	r3, r3, #32
 80067be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a22      	ldr	r2, [pc, #136]	; (8006858 <TIM_OC2_SetConfig+0xe4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC2_SetConfig+0x68>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a21      	ldr	r2, [pc, #132]	; (800685c <TIM_OC2_SetConfig+0xe8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10d      	bne.n	80067f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <TIM_OC2_SetConfig+0xe4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC2_SetConfig+0x94>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a16      	ldr	r2, [pc, #88]	; (800685c <TIM_OC2_SetConfig+0xe8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d113      	bne.n	8006830 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	621a      	str	r2, [r3, #32]
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40010400 	.word	0x40010400

08006860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	021b      	lsls	r3, r3, #8
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a21      	ldr	r2, [pc, #132]	; (8006940 <TIM_OC3_SetConfig+0xe0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC3_SetConfig+0x66>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a20      	ldr	r2, [pc, #128]	; (8006944 <TIM_OC3_SetConfig+0xe4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d10d      	bne.n	80068e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a16      	ldr	r2, [pc, #88]	; (8006940 <TIM_OC3_SetConfig+0xe0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC3_SetConfig+0x92>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a15      	ldr	r2, [pc, #84]	; (8006944 <TIM_OC3_SetConfig+0xe4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d113      	bne.n	800691a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400

08006948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	031b      	lsls	r3, r3, #12
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <TIM_OC4_SetConfig+0xa4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC4_SetConfig+0x68>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <TIM_OC4_SetConfig+0xa8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d109      	bne.n	80069c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	019b      	lsls	r3, r3, #6
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400

080069f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 030a 	bic.w	r3, r3, #10
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b087      	sub	sp, #28
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f023 0210 	bic.w	r2, r3, #16
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f043 0307 	orr.w	r3, r3, #7
 8006ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	609a      	str	r2, [r3, #8]
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	609a      	str	r2, [r3, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e05a      	b.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d022      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8c:	d01d      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d018      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00e      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10c      	bne.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010000 	.word	0x40010000
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40001800 	.word	0x40001800

08006c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e03f      	b.n	8006cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fc f84e 	bl	8002d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2224      	movs	r2, #36	; 0x24
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fddb 	bl	8007848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b08a      	sub	sp, #40	; 0x28
 8006ce6:	af02      	add	r7, sp, #8
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d17c      	bne.n	8006dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_UART_Transmit+0x2c>
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e075      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_UART_Transmit+0x3e>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e06e      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2221      	movs	r2, #33	; 0x21
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d36:	f7fc f907 	bl	8002f48 <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d50:	d108      	bne.n	8006d64 <HAL_UART_Transmit+0x82>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e003      	b.n	8006d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d74:	e02a      	b.n	8006dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2180      	movs	r1, #128	; 0x80
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fb1f 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e036      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3302      	adds	r3, #2
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	e007      	b.n	8006dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1cf      	bne.n	8006d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2140      	movs	r1, #64	; 0x40
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 faef 	bl	80073c4 <UART_WaitOnFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	4613      	mov	r3, r2
 8006e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d11d      	bne.n	8006e5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_UART_Receive_IT+0x26>
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e016      	b.n	8006e5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Receive_IT+0x38>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e00f      	b.n	8006e5e <HAL_UART_Receive_IT+0x58>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 fb24 	bl	80074a0 <UART_Start_Receive_IT>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	e000      	b.n	8006e5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0ba      	sub	sp, #232	; 0xe8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <HAL_UART_IRQHandler+0x66>
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc03 	bl	80076d2 <UART_Receive_IT>
      return;
 8006ecc:	e256      	b.n	800737c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80de 	beq.w	8007094 <HAL_UART_IRQHandler+0x22c>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80d1 	beq.w	8007094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <HAL_UART_IRQHandler+0xae>
 8006efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f043 0201 	orr.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_UART_IRQHandler+0xd2>
 8006f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f043 0202 	orr.w	r2, r3, #2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_UART_IRQHandler+0xf6>
 8006f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <HAL_UART_IRQHandler+0x126>
 8006f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 0208 	orr.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 81ed 	beq.w	8007372 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x14e>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb8e 	bl	80076d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x17a>
 8006fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d04f      	beq.n	8007082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa96 	bl	8007514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d141      	bne.n	800707a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800700c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800702e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800703a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d9      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	4a7d      	ldr	r2, [pc, #500]	; (8007244 <HAL_UART_IRQHandler+0x3dc>)
 8007050:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	4618      	mov	r0, r3
 8007058:	f7fc fe40 	bl	8003cdc <HAL_DMA_Abort_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007070:	e00e      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f990 	bl	8007398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007078:	e00a      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f98c 	bl	8007398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	e006      	b.n	8007090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f988 	bl	8007398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800708e:	e170      	b.n	8007372 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	bf00      	nop
    return;
 8007092:	e16e      	b.n	8007372 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	f040 814a 	bne.w	8007332 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8143 	beq.w	8007332 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 813c 	beq.w	8007332 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	f040 80b4 	bne.w	8007248 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8140 	beq.w	8007376 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070fe:	429a      	cmp	r2, r3
 8007100:	f080 8139 	bcs.w	8007376 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800710a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007116:	f000 8088 	beq.w	800722a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800714a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800715e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1d9      	bne.n	800711a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800718a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800718e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800719c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e1      	bne.n	8007166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e3      	bne.n	80071a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fa:	f023 0310 	bic.w	r3, r3, #16
 80071fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800720c:	65ba      	str	r2, [r7, #88]	; 0x58
 800720e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800721a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e3      	bne.n	80071e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	4618      	mov	r0, r3
 8007226:	f7fc fce9 	bl	8003bfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007232:	b29b      	uxth	r3, r3
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8b6 	bl	80073ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007240:	e099      	b.n	8007376 <HAL_UART_IRQHandler+0x50e>
 8007242:	bf00      	nop
 8007244:	080075db 	.word	0x080075db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007250:	b29b      	uxth	r3, r3
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 808b 	beq.w	800737a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8086 	beq.w	800737a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007292:	647a      	str	r2, [r7, #68]	; 0x44
 8007294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e3      	bne.n	800726e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3314      	adds	r3, #20
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	623b      	str	r3, [r7, #32]
   return(result);
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3314      	adds	r3, #20
 80072c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072ca:	633a      	str	r2, [r7, #48]	; 0x30
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e3      	bne.n	80072a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0310 	bic.w	r3, r3, #16
 8007302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	330c      	adds	r3, #12
 800730c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007310:	61fa      	str	r2, [r7, #28]
 8007312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	69b9      	ldr	r1, [r7, #24]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	617b      	str	r3, [r7, #20]
   return(result);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e3      	bne.n	80072ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f83e 	bl	80073ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007330:	e023      	b.n	800737a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_UART_IRQHandler+0x4ea>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f959 	bl	8007602 <UART_Transmit_IT>
    return;
 8007350:	e014      	b.n	800737c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <HAL_UART_IRQHandler+0x514>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f999 	bl	80076a2 <UART_EndTransmit_IT>
    return;
 8007370:	e004      	b.n	800737c <HAL_UART_IRQHandler+0x514>
    return;
 8007372:	bf00      	nop
 8007374:	e002      	b.n	800737c <HAL_UART_IRQHandler+0x514>
      return;
 8007376:	bf00      	nop
 8007378:	e000      	b.n	800737c <HAL_UART_IRQHandler+0x514>
      return;
 800737a:	bf00      	nop
  }
}
 800737c:	37e8      	adds	r7, #232	; 0xe8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop

08007384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b090      	sub	sp, #64	; 0x40
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d4:	e050      	b.n	8007478 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073dc:	d04c      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80073e4:	f7fb fdb0 	bl	8002f48 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d241      	bcs.n	8007478 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007414:	637a      	str	r2, [r7, #52]	; 0x34
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800741a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e5      	bne.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3314      	adds	r3, #20
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	613b      	str	r3, [r7, #16]
   return(result);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007448:	623a      	str	r2, [r7, #32]
 800744a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	69f9      	ldr	r1, [r7, #28]
 800744e:	6a3a      	ldr	r2, [r7, #32]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	61bb      	str	r3, [r7, #24]
   return(result);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e00f      	b.n	8007498 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d09f      	beq.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3740      	adds	r7, #64	; 0x40
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	88fa      	ldrh	r2, [r7, #6]
 80074be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2222      	movs	r2, #34	; 0x22
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695a      	ldr	r2, [r3, #20]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0201 	orr.w	r2, r2, #1
 80074f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0220 	orr.w	r2, r2, #32
 8007504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b095      	sub	sp, #84	; 0x54
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	330c      	adds	r3, #12
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800753c:	643a      	str	r2, [r7, #64]	; 0x40
 800753e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3314      	adds	r3, #20
 8007556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	64bb      	str	r3, [r7, #72]	; 0x48
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e5      	bne.n	8007550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	2b01      	cmp	r3, #1
 800758a:	d119      	bne.n	80075c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	60bb      	str	r3, [r7, #8]
   return(result);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f023 0310 	bic.w	r3, r3, #16
 80075a2:	647b      	str	r3, [r7, #68]	; 0x44
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ac:	61ba      	str	r2, [r7, #24]
 80075ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6979      	ldr	r1, [r7, #20]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075ce:	bf00      	nop
 80075d0:	3754      	adds	r7, #84	; 0x54
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff fecf 	bl	8007398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b21      	cmp	r3, #33	; 0x21
 8007614:	d13e      	bne.n	8007694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	d114      	bne.n	800764a <UART_Transmit_IT+0x48>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d110      	bne.n	800764a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800763c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	1c9a      	adds	r2, r3, #2
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	621a      	str	r2, [r3, #32]
 8007648:	e008      	b.n	800765c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6211      	str	r1, [r2, #32]
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	b29b      	uxth	r3, r3
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	4619      	mov	r1, r3
 800766a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10f      	bne.n	8007690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800767e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800768e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fe5e 	bl	8007384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b08c      	sub	sp, #48	; 0x30
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b22      	cmp	r3, #34	; 0x22
 80076e4:	f040 80ab 	bne.w	800783e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f0:	d117      	bne.n	8007722 <UART_Receive_IT+0x50>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d113      	bne.n	8007722 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007710:	b29a      	uxth	r2, r3
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	1c9a      	adds	r2, r3, #2
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	629a      	str	r2, [r3, #40]	; 0x28
 8007720:	e026      	b.n	8007770 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007734:	d007      	beq.n	8007746 <UART_Receive_IT+0x74>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <UART_Receive_IT+0x82>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b2da      	uxtb	r2, r3
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	e008      	b.n	8007766 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007760:	b2da      	uxtb	r2, r3
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4619      	mov	r1, r3
 800777e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007780:	2b00      	cmp	r3, #0
 8007782:	d15a      	bne.n	800783a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0220 	bic.w	r2, r2, #32
 8007792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0201 	bic.w	r2, r2, #1
 80077b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d135      	bne.n	8007830 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	330c      	adds	r3, #12
 80077d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	613b      	str	r3, [r7, #16]
   return(result);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f023 0310 	bic.w	r3, r3, #16
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	623a      	str	r2, [r7, #32]
 80077ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	69f9      	ldr	r1, [r7, #28]
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b10      	cmp	r3, #16
 800780a:	d10a      	bne.n	8007822 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff fdbf 	bl	80073ac <HAL_UARTEx_RxEventCallback>
 800782e:	e002      	b.n	8007836 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7fb f9bf 	bl	8002bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	e002      	b.n	8007840 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	e000      	b.n	8007840 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800783e:	2302      	movs	r3, #2
  }
}
 8007840:	4618      	mov	r0, r3
 8007842:	3730      	adds	r7, #48	; 0x30
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	b09f      	sub	sp, #124	; 0x7c
 800784e:	af00      	add	r7, sp, #0
 8007850:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800785c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785e:	68d9      	ldr	r1, [r3, #12]
 8007860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	ea40 0301 	orr.w	r3, r0, r1
 8007868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800786a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	431a      	orrs	r2, r3
 8007874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	431a      	orrs	r2, r3
 800787a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	4313      	orrs	r3, r2
 8007880:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800788c:	f021 010c 	bic.w	r1, r1, #12
 8007890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007896:	430b      	orrs	r3, r1
 8007898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800789a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a6:	6999      	ldr	r1, [r3, #24]
 80078a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	ea40 0301 	orr.w	r3, r0, r1
 80078b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4bc5      	ldr	r3, [pc, #788]	; (8007bcc <UART_SetConfig+0x384>)
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d004      	beq.n	80078c6 <UART_SetConfig+0x7e>
 80078bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	4bc3      	ldr	r3, [pc, #780]	; (8007bd0 <UART_SetConfig+0x388>)
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d103      	bne.n	80078ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078c6:	f7fd fc09 	bl	80050dc <HAL_RCC_GetPCLK2Freq>
 80078ca:	6778      	str	r0, [r7, #116]	; 0x74
 80078cc:	e002      	b.n	80078d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ce:	f7fd fbf1 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 80078d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078dc:	f040 80b6 	bne.w	8007a4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e2:	461c      	mov	r4, r3
 80078e4:	f04f 0500 	mov.w	r5, #0
 80078e8:	4622      	mov	r2, r4
 80078ea:	462b      	mov	r3, r5
 80078ec:	1891      	adds	r1, r2, r2
 80078ee:	6439      	str	r1, [r7, #64]	; 0x40
 80078f0:	415b      	adcs	r3, r3
 80078f2:	647b      	str	r3, [r7, #68]	; 0x44
 80078f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078f8:	1912      	adds	r2, r2, r4
 80078fa:	eb45 0303 	adc.w	r3, r5, r3
 80078fe:	f04f 0000 	mov.w	r0, #0
 8007902:	f04f 0100 	mov.w	r1, #0
 8007906:	00d9      	lsls	r1, r3, #3
 8007908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800790c:	00d0      	lsls	r0, r2, #3
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	1911      	adds	r1, r2, r4
 8007914:	6639      	str	r1, [r7, #96]	; 0x60
 8007916:	416b      	adcs	r3, r5
 8007918:	667b      	str	r3, [r7, #100]	; 0x64
 800791a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	461a      	mov	r2, r3
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	1891      	adds	r1, r2, r2
 8007926:	63b9      	str	r1, [r7, #56]	; 0x38
 8007928:	415b      	adcs	r3, r3
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007930:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007934:	f7f9 f938 	bl	8000ba8 <__aeabi_uldivmod>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4ba5      	ldr	r3, [pc, #660]	; (8007bd4 <UART_SetConfig+0x38c>)
 800793e:	fba3 2302 	umull	r2, r3, r3, r2
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	011e      	lsls	r6, r3, #4
 8007946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007948:	461c      	mov	r4, r3
 800794a:	f04f 0500 	mov.w	r5, #0
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	1891      	adds	r1, r2, r2
 8007954:	6339      	str	r1, [r7, #48]	; 0x30
 8007956:	415b      	adcs	r3, r3
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
 800795a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800795e:	1912      	adds	r2, r2, r4
 8007960:	eb45 0303 	adc.w	r3, r5, r3
 8007964:	f04f 0000 	mov.w	r0, #0
 8007968:	f04f 0100 	mov.w	r1, #0
 800796c:	00d9      	lsls	r1, r3, #3
 800796e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007972:	00d0      	lsls	r0, r2, #3
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	1911      	adds	r1, r2, r4
 800797a:	65b9      	str	r1, [r7, #88]	; 0x58
 800797c:	416b      	adcs	r3, r5
 800797e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	461a      	mov	r2, r3
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	1891      	adds	r1, r2, r2
 800798c:	62b9      	str	r1, [r7, #40]	; 0x28
 800798e:	415b      	adcs	r3, r3
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007996:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800799a:	f7f9 f905 	bl	8000ba8 <__aeabi_uldivmod>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4b8c      	ldr	r3, [pc, #560]	; (8007bd4 <UART_SetConfig+0x38c>)
 80079a4:	fba3 1302 	umull	r1, r3, r3, r2
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	2164      	movs	r1, #100	; 0x64
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	3332      	adds	r3, #50	; 0x32
 80079b6:	4a87      	ldr	r2, [pc, #540]	; (8007bd4 <UART_SetConfig+0x38c>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079c4:	441e      	add	r6, r3
 80079c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c8:	4618      	mov	r0, r3
 80079ca:	f04f 0100 	mov.w	r1, #0
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	1894      	adds	r4, r2, r2
 80079d4:	623c      	str	r4, [r7, #32]
 80079d6:	415b      	adcs	r3, r3
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
 80079da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079de:	1812      	adds	r2, r2, r0
 80079e0:	eb41 0303 	adc.w	r3, r1, r3
 80079e4:	f04f 0400 	mov.w	r4, #0
 80079e8:	f04f 0500 	mov.w	r5, #0
 80079ec:	00dd      	lsls	r5, r3, #3
 80079ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079f2:	00d4      	lsls	r4, r2, #3
 80079f4:	4622      	mov	r2, r4
 80079f6:	462b      	mov	r3, r5
 80079f8:	1814      	adds	r4, r2, r0
 80079fa:	653c      	str	r4, [r7, #80]	; 0x50
 80079fc:	414b      	adcs	r3, r1
 80079fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	461a      	mov	r2, r3
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	1891      	adds	r1, r2, r2
 8007a0c:	61b9      	str	r1, [r7, #24]
 8007a0e:	415b      	adcs	r3, r3
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a1a:	f7f9 f8c5 	bl	8000ba8 <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4b6c      	ldr	r3, [pc, #432]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007a24:	fba3 1302 	umull	r1, r3, r3, r2
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	2164      	movs	r1, #100	; 0x64
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	3332      	adds	r3, #50	; 0x32
 8007a36:	4a67      	ldr	r2, [pc, #412]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	f003 0207 	and.w	r2, r3, #7
 8007a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4432      	add	r2, r6
 8007a48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a4a:	e0b9      	b.n	8007bc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4e:	461c      	mov	r4, r3
 8007a50:	f04f 0500 	mov.w	r5, #0
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	1891      	adds	r1, r2, r2
 8007a5a:	6139      	str	r1, [r7, #16]
 8007a5c:	415b      	adcs	r3, r3
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a64:	1912      	adds	r2, r2, r4
 8007a66:	eb45 0303 	adc.w	r3, r5, r3
 8007a6a:	f04f 0000 	mov.w	r0, #0
 8007a6e:	f04f 0100 	mov.w	r1, #0
 8007a72:	00d9      	lsls	r1, r3, #3
 8007a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a78:	00d0      	lsls	r0, r2, #3
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	eb12 0804 	adds.w	r8, r2, r4
 8007a82:	eb43 0905 	adc.w	r9, r3, r5
 8007a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f04f 0100 	mov.w	r1, #0
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	008b      	lsls	r3, r1, #2
 8007a9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a9e:	0082      	lsls	r2, r0, #2
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f9 f880 	bl	8000ba8 <__aeabi_uldivmod>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007aae:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	011e      	lsls	r6, r3, #4
 8007ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f04f 0100 	mov.w	r1, #0
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	1894      	adds	r4, r2, r2
 8007ac4:	60bc      	str	r4, [r7, #8]
 8007ac6:	415b      	adcs	r3, r3
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ace:	1812      	adds	r2, r2, r0
 8007ad0:	eb41 0303 	adc.w	r3, r1, r3
 8007ad4:	f04f 0400 	mov.w	r4, #0
 8007ad8:	f04f 0500 	mov.w	r5, #0
 8007adc:	00dd      	lsls	r5, r3, #3
 8007ade:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ae2:	00d4      	lsls	r4, r2, #3
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	1814      	adds	r4, r2, r0
 8007aea:	64bc      	str	r4, [r7, #72]	; 0x48
 8007aec:	414b      	adcs	r3, r1
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f04f 0100 	mov.w	r1, #0
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	008b      	lsls	r3, r1, #2
 8007b04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b08:	0082      	lsls	r2, r0, #2
 8007b0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b0e:	f7f9 f84b 	bl	8000ba8 <__aeabi_uldivmod>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4b2f      	ldr	r3, [pc, #188]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007b18:	fba3 1302 	umull	r1, r3, r3, r2
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	2164      	movs	r1, #100	; 0x64
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	3332      	adds	r3, #50	; 0x32
 8007b2a:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	095b      	lsrs	r3, r3, #5
 8007b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b36:	441e      	add	r6, r3
 8007b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f04f 0100 	mov.w	r1, #0
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	1894      	adds	r4, r2, r2
 8007b46:	603c      	str	r4, [r7, #0]
 8007b48:	415b      	adcs	r3, r3
 8007b4a:	607b      	str	r3, [r7, #4]
 8007b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b50:	1812      	adds	r2, r2, r0
 8007b52:	eb41 0303 	adc.w	r3, r1, r3
 8007b56:	f04f 0400 	mov.w	r4, #0
 8007b5a:	f04f 0500 	mov.w	r5, #0
 8007b5e:	00dd      	lsls	r5, r3, #3
 8007b60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b64:	00d4      	lsls	r4, r2, #3
 8007b66:	4622      	mov	r2, r4
 8007b68:	462b      	mov	r3, r5
 8007b6a:	eb12 0a00 	adds.w	sl, r2, r0
 8007b6e:	eb43 0b01 	adc.w	fp, r3, r1
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f04f 0100 	mov.w	r1, #0
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	008b      	lsls	r3, r1, #2
 8007b86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b8a:	0082      	lsls	r2, r0, #2
 8007b8c:	4650      	mov	r0, sl
 8007b8e:	4659      	mov	r1, fp
 8007b90:	f7f9 f80a 	bl	8000ba8 <__aeabi_uldivmod>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	2164      	movs	r1, #100	; 0x64
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	3332      	adds	r3, #50	; 0x32
 8007bac:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <UART_SetConfig+0x38c>)
 8007bae:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	f003 020f 	and.w	r2, r3, #15
 8007bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4432      	add	r2, r6
 8007bbe:	609a      	str	r2, [r3, #8]
}
 8007bc0:	bf00      	nop
 8007bc2:	377c      	adds	r7, #124	; 0x7c
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	bf00      	nop
 8007bcc:	40011000 	.word	0x40011000
 8007bd0:	40011400 	.word	0x40011400
 8007bd4:	51eb851f 	.word	0x51eb851f

08007bd8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4b20      	ldr	r3, [pc, #128]	; (8007c78 <FSMC_NORSRAM_Init+0xa0>)
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007c02:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007c08:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007c0e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007c14:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007c1a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007c20:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007c26:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007c2c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007c32:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007c38:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007c3e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007c44:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d103      	bne.n	8007c5c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	fff00080 	.word	0xfff00080

08007c7c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c96:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c9e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007caa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007cb2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007cba:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007cc4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	3b02      	subs	r3, #2
 8007ccc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007cce:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6979      	ldr	r1, [r7, #20]
 8007ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
	...

08007cf8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d10:	d122      	bne.n	8007d58 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4b15      	ldr	r3, [pc, #84]	; (8007d74 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007d2e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007d36:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007d3e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007d44:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6979      	ldr	r1, [r7, #20]
 8007d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007d56:	e005      	b.n	8007d64 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	cff00000 	.word	0xcff00000

08007d78 <__errno>:
 8007d78:	4b01      	ldr	r3, [pc, #4]	; (8007d80 <__errno+0x8>)
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20000014 	.word	0x20000014

08007d84 <__libc_init_array>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	4d0d      	ldr	r5, [pc, #52]	; (8007dbc <__libc_init_array+0x38>)
 8007d88:	4c0d      	ldr	r4, [pc, #52]	; (8007dc0 <__libc_init_array+0x3c>)
 8007d8a:	1b64      	subs	r4, r4, r5
 8007d8c:	10a4      	asrs	r4, r4, #2
 8007d8e:	2600      	movs	r6, #0
 8007d90:	42a6      	cmp	r6, r4
 8007d92:	d109      	bne.n	8007da8 <__libc_init_array+0x24>
 8007d94:	4d0b      	ldr	r5, [pc, #44]	; (8007dc4 <__libc_init_array+0x40>)
 8007d96:	4c0c      	ldr	r4, [pc, #48]	; (8007dc8 <__libc_init_array+0x44>)
 8007d98:	f002 feb4 	bl	800ab04 <_init>
 8007d9c:	1b64      	subs	r4, r4, r5
 8007d9e:	10a4      	asrs	r4, r4, #2
 8007da0:	2600      	movs	r6, #0
 8007da2:	42a6      	cmp	r6, r4
 8007da4:	d105      	bne.n	8007db2 <__libc_init_array+0x2e>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dac:	4798      	blx	r3
 8007dae:	3601      	adds	r6, #1
 8007db0:	e7ee      	b.n	8007d90 <__libc_init_array+0xc>
 8007db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db6:	4798      	blx	r3
 8007db8:	3601      	adds	r6, #1
 8007dba:	e7f2      	b.n	8007da2 <__libc_init_array+0x1e>
 8007dbc:	0800decc 	.word	0x0800decc
 8007dc0:	0800decc 	.word	0x0800decc
 8007dc4:	0800decc 	.word	0x0800decc
 8007dc8:	0800ded0 	.word	0x0800ded0

08007dcc <memset>:
 8007dcc:	4402      	add	r2, r0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d100      	bne.n	8007dd6 <memset+0xa>
 8007dd4:	4770      	bx	lr
 8007dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dda:	e7f9      	b.n	8007dd0 <memset+0x4>

08007ddc <__cvt>:
 8007ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	ec55 4b10 	vmov	r4, r5, d0
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	460e      	mov	r6, r1
 8007de8:	4619      	mov	r1, r3
 8007dea:	462b      	mov	r3, r5
 8007dec:	bfbb      	ittet	lt
 8007dee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007df2:	461d      	movlt	r5, r3
 8007df4:	2300      	movge	r3, #0
 8007df6:	232d      	movlt	r3, #45	; 0x2d
 8007df8:	700b      	strb	r3, [r1, #0]
 8007dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e00:	4691      	mov	r9, r2
 8007e02:	f023 0820 	bic.w	r8, r3, #32
 8007e06:	bfbc      	itt	lt
 8007e08:	4622      	movlt	r2, r4
 8007e0a:	4614      	movlt	r4, r2
 8007e0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e10:	d005      	beq.n	8007e1e <__cvt+0x42>
 8007e12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e16:	d100      	bne.n	8007e1a <__cvt+0x3e>
 8007e18:	3601      	adds	r6, #1
 8007e1a:	2102      	movs	r1, #2
 8007e1c:	e000      	b.n	8007e20 <__cvt+0x44>
 8007e1e:	2103      	movs	r1, #3
 8007e20:	ab03      	add	r3, sp, #12
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	ab02      	add	r3, sp, #8
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	ec45 4b10 	vmov	d0, r4, r5
 8007e2c:	4653      	mov	r3, sl
 8007e2e:	4632      	mov	r2, r6
 8007e30:	f000 fcea 	bl	8008808 <_dtoa_r>
 8007e34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e38:	4607      	mov	r7, r0
 8007e3a:	d102      	bne.n	8007e42 <__cvt+0x66>
 8007e3c:	f019 0f01 	tst.w	r9, #1
 8007e40:	d022      	beq.n	8007e88 <__cvt+0xac>
 8007e42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e46:	eb07 0906 	add.w	r9, r7, r6
 8007e4a:	d110      	bne.n	8007e6e <__cvt+0x92>
 8007e4c:	783b      	ldrb	r3, [r7, #0]
 8007e4e:	2b30      	cmp	r3, #48	; 0x30
 8007e50:	d10a      	bne.n	8007e68 <__cvt+0x8c>
 8007e52:	2200      	movs	r2, #0
 8007e54:	2300      	movs	r3, #0
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e5e:	b918      	cbnz	r0, 8007e68 <__cvt+0x8c>
 8007e60:	f1c6 0601 	rsb	r6, r6, #1
 8007e64:	f8ca 6000 	str.w	r6, [sl]
 8007e68:	f8da 3000 	ldr.w	r3, [sl]
 8007e6c:	4499      	add	r9, r3
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2300      	movs	r3, #0
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e7a:	b108      	cbz	r0, 8007e80 <__cvt+0xa4>
 8007e7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e80:	2230      	movs	r2, #48	; 0x30
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	454b      	cmp	r3, r9
 8007e86:	d307      	bcc.n	8007e98 <__cvt+0xbc>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e8c:	1bdb      	subs	r3, r3, r7
 8007e8e:	4638      	mov	r0, r7
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	b004      	add	sp, #16
 8007e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e7f0      	b.n	8007e82 <__cvt+0xa6>

08007ea0 <__exponent>:
 8007ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	bfb8      	it	lt
 8007ea8:	4249      	neglt	r1, r1
 8007eaa:	f803 2b02 	strb.w	r2, [r3], #2
 8007eae:	bfb4      	ite	lt
 8007eb0:	222d      	movlt	r2, #45	; 0x2d
 8007eb2:	222b      	movge	r2, #43	; 0x2b
 8007eb4:	2909      	cmp	r1, #9
 8007eb6:	7042      	strb	r2, [r0, #1]
 8007eb8:	dd2a      	ble.n	8007f10 <__exponent+0x70>
 8007eba:	f10d 0407 	add.w	r4, sp, #7
 8007ebe:	46a4      	mov	ip, r4
 8007ec0:	270a      	movs	r7, #10
 8007ec2:	46a6      	mov	lr, r4
 8007ec4:	460a      	mov	r2, r1
 8007ec6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007eca:	fb07 1516 	mls	r5, r7, r6, r1
 8007ece:	3530      	adds	r5, #48	; 0x30
 8007ed0:	2a63      	cmp	r2, #99	; 0x63
 8007ed2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007ed6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007eda:	4631      	mov	r1, r6
 8007edc:	dcf1      	bgt.n	8007ec2 <__exponent+0x22>
 8007ede:	3130      	adds	r1, #48	; 0x30
 8007ee0:	f1ae 0502 	sub.w	r5, lr, #2
 8007ee4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ee8:	1c44      	adds	r4, r0, #1
 8007eea:	4629      	mov	r1, r5
 8007eec:	4561      	cmp	r1, ip
 8007eee:	d30a      	bcc.n	8007f06 <__exponent+0x66>
 8007ef0:	f10d 0209 	add.w	r2, sp, #9
 8007ef4:	eba2 020e 	sub.w	r2, r2, lr
 8007ef8:	4565      	cmp	r5, ip
 8007efa:	bf88      	it	hi
 8007efc:	2200      	movhi	r2, #0
 8007efe:	4413      	add	r3, r2
 8007f00:	1a18      	subs	r0, r3, r0
 8007f02:	b003      	add	sp, #12
 8007f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f0e:	e7ed      	b.n	8007eec <__exponent+0x4c>
 8007f10:	2330      	movs	r3, #48	; 0x30
 8007f12:	3130      	adds	r1, #48	; 0x30
 8007f14:	7083      	strb	r3, [r0, #2]
 8007f16:	70c1      	strb	r1, [r0, #3]
 8007f18:	1d03      	adds	r3, r0, #4
 8007f1a:	e7f1      	b.n	8007f00 <__exponent+0x60>

08007f1c <_printf_float>:
 8007f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	ed2d 8b02 	vpush	{d8}
 8007f24:	b08d      	sub	sp, #52	; 0x34
 8007f26:	460c      	mov	r4, r1
 8007f28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	461f      	mov	r7, r3
 8007f30:	4605      	mov	r5, r0
 8007f32:	f001 fa55 	bl	80093e0 <_localeconv_r>
 8007f36:	f8d0 a000 	ldr.w	sl, [r0]
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f7f8 f948 	bl	80001d0 <strlen>
 8007f40:	2300      	movs	r3, #0
 8007f42:	930a      	str	r3, [sp, #40]	; 0x28
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	9305      	str	r3, [sp, #20]
 8007f48:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f50:	3307      	adds	r3, #7
 8007f52:	f023 0307 	bic.w	r3, r3, #7
 8007f56:	f103 0208 	add.w	r2, r3, #8
 8007f5a:	f8c8 2000 	str.w	r2, [r8]
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f74:	ee08 0a10 	vmov	s16, r0
 8007f78:	4b9f      	ldr	r3, [pc, #636]	; (80081f8 <_printf_float+0x2dc>)
 8007f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f82:	f7f8 fdd3 	bl	8000b2c <__aeabi_dcmpun>
 8007f86:	bb88      	cbnz	r0, 8007fec <_printf_float+0xd0>
 8007f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f8c:	4b9a      	ldr	r3, [pc, #616]	; (80081f8 <_printf_float+0x2dc>)
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f92:	f7f8 fdad 	bl	8000af0 <__aeabi_dcmple>
 8007f96:	bb48      	cbnz	r0, 8007fec <_printf_float+0xd0>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f7f8 fd9c 	bl	8000adc <__aeabi_dcmplt>
 8007fa4:	b110      	cbz	r0, 8007fac <_printf_float+0x90>
 8007fa6:	232d      	movs	r3, #45	; 0x2d
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	4b93      	ldr	r3, [pc, #588]	; (80081fc <_printf_float+0x2e0>)
 8007fae:	4894      	ldr	r0, [pc, #592]	; (8008200 <_printf_float+0x2e4>)
 8007fb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fb4:	bf94      	ite	ls
 8007fb6:	4698      	movls	r8, r3
 8007fb8:	4680      	movhi	r8, r0
 8007fba:	2303      	movs	r3, #3
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	f023 0204 	bic.w	r2, r3, #4
 8007fc4:	6022      	str	r2, [r4, #0]
 8007fc6:	f04f 0900 	mov.w	r9, #0
 8007fca:	9700      	str	r7, [sp, #0]
 8007fcc:	4633      	mov	r3, r6
 8007fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f9d8 	bl	8008388 <_printf_common>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f040 8090 	bne.w	80080fe <_printf_float+0x1e2>
 8007fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe2:	b00d      	add	sp, #52	; 0x34
 8007fe4:	ecbd 8b02 	vpop	{d8}
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 fd9a 	bl	8000b2c <__aeabi_dcmpun>
 8007ff8:	b140      	cbz	r0, 800800c <_printf_float+0xf0>
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfbc      	itt	lt
 8008000:	232d      	movlt	r3, #45	; 0x2d
 8008002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008006:	487f      	ldr	r0, [pc, #508]	; (8008204 <_printf_float+0x2e8>)
 8008008:	4b7f      	ldr	r3, [pc, #508]	; (8008208 <_printf_float+0x2ec>)
 800800a:	e7d1      	b.n	8007fb0 <_printf_float+0x94>
 800800c:	6863      	ldr	r3, [r4, #4]
 800800e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008012:	9206      	str	r2, [sp, #24]
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	d13f      	bne.n	8008098 <_printf_float+0x17c>
 8008018:	2306      	movs	r3, #6
 800801a:	6063      	str	r3, [r4, #4]
 800801c:	9b05      	ldr	r3, [sp, #20]
 800801e:	6861      	ldr	r1, [r4, #4]
 8008020:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008024:	2300      	movs	r3, #0
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	ab0a      	add	r3, sp, #40	; 0x28
 800802a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800802e:	ab09      	add	r3, sp, #36	; 0x24
 8008030:	ec49 8b10 	vmov	d0, r8, r9
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800803c:	4628      	mov	r0, r5
 800803e:	f7ff fecd 	bl	8007ddc <__cvt>
 8008042:	9b06      	ldr	r3, [sp, #24]
 8008044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008046:	2b47      	cmp	r3, #71	; 0x47
 8008048:	4680      	mov	r8, r0
 800804a:	d108      	bne.n	800805e <_printf_float+0x142>
 800804c:	1cc8      	adds	r0, r1, #3
 800804e:	db02      	blt.n	8008056 <_printf_float+0x13a>
 8008050:	6863      	ldr	r3, [r4, #4]
 8008052:	4299      	cmp	r1, r3
 8008054:	dd41      	ble.n	80080da <_printf_float+0x1be>
 8008056:	f1ab 0b02 	sub.w	fp, fp, #2
 800805a:	fa5f fb8b 	uxtb.w	fp, fp
 800805e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008062:	d820      	bhi.n	80080a6 <_printf_float+0x18a>
 8008064:	3901      	subs	r1, #1
 8008066:	465a      	mov	r2, fp
 8008068:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800806c:	9109      	str	r1, [sp, #36]	; 0x24
 800806e:	f7ff ff17 	bl	8007ea0 <__exponent>
 8008072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008074:	1813      	adds	r3, r2, r0
 8008076:	2a01      	cmp	r2, #1
 8008078:	4681      	mov	r9, r0
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	dc02      	bgt.n	8008084 <_printf_float+0x168>
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	07d2      	lsls	r2, r2, #31
 8008082:	d501      	bpl.n	8008088 <_printf_float+0x16c>
 8008084:	3301      	adds	r3, #1
 8008086:	6123      	str	r3, [r4, #16]
 8008088:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800808c:	2b00      	cmp	r3, #0
 800808e:	d09c      	beq.n	8007fca <_printf_float+0xae>
 8008090:	232d      	movs	r3, #45	; 0x2d
 8008092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008096:	e798      	b.n	8007fca <_printf_float+0xae>
 8008098:	9a06      	ldr	r2, [sp, #24]
 800809a:	2a47      	cmp	r2, #71	; 0x47
 800809c:	d1be      	bne.n	800801c <_printf_float+0x100>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1bc      	bne.n	800801c <_printf_float+0x100>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7b9      	b.n	800801a <_printf_float+0xfe>
 80080a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080aa:	d118      	bne.n	80080de <_printf_float+0x1c2>
 80080ac:	2900      	cmp	r1, #0
 80080ae:	6863      	ldr	r3, [r4, #4]
 80080b0:	dd0b      	ble.n	80080ca <_printf_float+0x1ae>
 80080b2:	6121      	str	r1, [r4, #16]
 80080b4:	b913      	cbnz	r3, 80080bc <_printf_float+0x1a0>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	07d0      	lsls	r0, r2, #31
 80080ba:	d502      	bpl.n	80080c2 <_printf_float+0x1a6>
 80080bc:	3301      	adds	r3, #1
 80080be:	440b      	add	r3, r1
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80080c4:	f04f 0900 	mov.w	r9, #0
 80080c8:	e7de      	b.n	8008088 <_printf_float+0x16c>
 80080ca:	b913      	cbnz	r3, 80080d2 <_printf_float+0x1b6>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	07d2      	lsls	r2, r2, #31
 80080d0:	d501      	bpl.n	80080d6 <_printf_float+0x1ba>
 80080d2:	3302      	adds	r3, #2
 80080d4:	e7f4      	b.n	80080c0 <_printf_float+0x1a4>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e7f2      	b.n	80080c0 <_printf_float+0x1a4>
 80080da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	4299      	cmp	r1, r3
 80080e2:	db05      	blt.n	80080f0 <_printf_float+0x1d4>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	6121      	str	r1, [r4, #16]
 80080e8:	07d8      	lsls	r0, r3, #31
 80080ea:	d5ea      	bpl.n	80080c2 <_printf_float+0x1a6>
 80080ec:	1c4b      	adds	r3, r1, #1
 80080ee:	e7e7      	b.n	80080c0 <_printf_float+0x1a4>
 80080f0:	2900      	cmp	r1, #0
 80080f2:	bfd4      	ite	le
 80080f4:	f1c1 0202 	rsble	r2, r1, #2
 80080f8:	2201      	movgt	r2, #1
 80080fa:	4413      	add	r3, r2
 80080fc:	e7e0      	b.n	80080c0 <_printf_float+0x1a4>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	055a      	lsls	r2, r3, #21
 8008102:	d407      	bmi.n	8008114 <_printf_float+0x1f8>
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	4642      	mov	r2, r8
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	d12c      	bne.n	800816c <_printf_float+0x250>
 8008112:	e764      	b.n	8007fde <_printf_float+0xc2>
 8008114:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008118:	f240 80e0 	bls.w	80082dc <_printf_float+0x3c0>
 800811c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008120:	2200      	movs	r2, #0
 8008122:	2300      	movs	r3, #0
 8008124:	f7f8 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008128:	2800      	cmp	r0, #0
 800812a:	d034      	beq.n	8008196 <_printf_float+0x27a>
 800812c:	4a37      	ldr	r2, [pc, #220]	; (800820c <_printf_float+0x2f0>)
 800812e:	2301      	movs	r3, #1
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	f43f af51 	beq.w	8007fde <_printf_float+0xc2>
 800813c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008140:	429a      	cmp	r2, r3
 8008142:	db02      	blt.n	800814a <_printf_float+0x22e>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	07d8      	lsls	r0, r3, #31
 8008148:	d510      	bpl.n	800816c <_printf_float+0x250>
 800814a:	ee18 3a10 	vmov	r3, s16
 800814e:	4652      	mov	r2, sl
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af41 	beq.w	8007fde <_printf_float+0xc2>
 800815c:	f04f 0800 	mov.w	r8, #0
 8008160:	f104 091a 	add.w	r9, r4, #26
 8008164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008166:	3b01      	subs	r3, #1
 8008168:	4543      	cmp	r3, r8
 800816a:	dc09      	bgt.n	8008180 <_printf_float+0x264>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	079b      	lsls	r3, r3, #30
 8008170:	f100 8105 	bmi.w	800837e <_printf_float+0x462>
 8008174:	68e0      	ldr	r0, [r4, #12]
 8008176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008178:	4298      	cmp	r0, r3
 800817a:	bfb8      	it	lt
 800817c:	4618      	movlt	r0, r3
 800817e:	e730      	b.n	8007fe2 <_printf_float+0xc6>
 8008180:	2301      	movs	r3, #1
 8008182:	464a      	mov	r2, r9
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af27 	beq.w	8007fde <_printf_float+0xc2>
 8008190:	f108 0801 	add.w	r8, r8, #1
 8008194:	e7e6      	b.n	8008164 <_printf_float+0x248>
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc39      	bgt.n	8008210 <_printf_float+0x2f4>
 800819c:	4a1b      	ldr	r2, [pc, #108]	; (800820c <_printf_float+0x2f0>)
 800819e:	2301      	movs	r3, #1
 80081a0:	4631      	mov	r1, r6
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b8      	blx	r7
 80081a6:	3001      	adds	r0, #1
 80081a8:	f43f af19 	beq.w	8007fde <_printf_float+0xc2>
 80081ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b0:	4313      	orrs	r3, r2
 80081b2:	d102      	bne.n	80081ba <_printf_float+0x29e>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	07d9      	lsls	r1, r3, #31
 80081b8:	d5d8      	bpl.n	800816c <_printf_float+0x250>
 80081ba:	ee18 3a10 	vmov	r3, s16
 80081be:	4652      	mov	r2, sl
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	f43f af09 	beq.w	8007fde <_printf_float+0xc2>
 80081cc:	f04f 0900 	mov.w	r9, #0
 80081d0:	f104 0a1a 	add.w	sl, r4, #26
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	425b      	negs	r3, r3
 80081d8:	454b      	cmp	r3, r9
 80081da:	dc01      	bgt.n	80081e0 <_printf_float+0x2c4>
 80081dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081de:	e792      	b.n	8008106 <_printf_float+0x1ea>
 80081e0:	2301      	movs	r3, #1
 80081e2:	4652      	mov	r2, sl
 80081e4:	4631      	mov	r1, r6
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f aef7 	beq.w	8007fde <_printf_float+0xc2>
 80081f0:	f109 0901 	add.w	r9, r9, #1
 80081f4:	e7ee      	b.n	80081d4 <_printf_float+0x2b8>
 80081f6:	bf00      	nop
 80081f8:	7fefffff 	.word	0x7fefffff
 80081fc:	0800dae8 	.word	0x0800dae8
 8008200:	0800daec 	.word	0x0800daec
 8008204:	0800daf4 	.word	0x0800daf4
 8008208:	0800daf0 	.word	0x0800daf0
 800820c:	0800daf8 	.word	0x0800daf8
 8008210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008214:	429a      	cmp	r2, r3
 8008216:	bfa8      	it	ge
 8008218:	461a      	movge	r2, r3
 800821a:	2a00      	cmp	r2, #0
 800821c:	4691      	mov	r9, r2
 800821e:	dc37      	bgt.n	8008290 <_printf_float+0x374>
 8008220:	f04f 0b00 	mov.w	fp, #0
 8008224:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008228:	f104 021a 	add.w	r2, r4, #26
 800822c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	eba3 0309 	sub.w	r3, r3, r9
 8008234:	455b      	cmp	r3, fp
 8008236:	dc33      	bgt.n	80082a0 <_printf_float+0x384>
 8008238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800823c:	429a      	cmp	r2, r3
 800823e:	db3b      	blt.n	80082b8 <_printf_float+0x39c>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	07da      	lsls	r2, r3, #31
 8008244:	d438      	bmi.n	80082b8 <_printf_float+0x39c>
 8008246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	eba2 0901 	sub.w	r9, r2, r1
 8008252:	4599      	cmp	r9, r3
 8008254:	bfa8      	it	ge
 8008256:	4699      	movge	r9, r3
 8008258:	f1b9 0f00 	cmp.w	r9, #0
 800825c:	dc35      	bgt.n	80082ca <_printf_float+0x3ae>
 800825e:	f04f 0800 	mov.w	r8, #0
 8008262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008266:	f104 0a1a 	add.w	sl, r4, #26
 800826a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800826e:	1a9b      	subs	r3, r3, r2
 8008270:	eba3 0309 	sub.w	r3, r3, r9
 8008274:	4543      	cmp	r3, r8
 8008276:	f77f af79 	ble.w	800816c <_printf_float+0x250>
 800827a:	2301      	movs	r3, #1
 800827c:	4652      	mov	r2, sl
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	47b8      	blx	r7
 8008284:	3001      	adds	r0, #1
 8008286:	f43f aeaa 	beq.w	8007fde <_printf_float+0xc2>
 800828a:	f108 0801 	add.w	r8, r8, #1
 800828e:	e7ec      	b.n	800826a <_printf_float+0x34e>
 8008290:	4613      	mov	r3, r2
 8008292:	4631      	mov	r1, r6
 8008294:	4642      	mov	r2, r8
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	d1c0      	bne.n	8008220 <_printf_float+0x304>
 800829e:	e69e      	b.n	8007fde <_printf_float+0xc2>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	9205      	str	r2, [sp, #20]
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f ae97 	beq.w	8007fde <_printf_float+0xc2>
 80082b0:	9a05      	ldr	r2, [sp, #20]
 80082b2:	f10b 0b01 	add.w	fp, fp, #1
 80082b6:	e7b9      	b.n	800822c <_printf_float+0x310>
 80082b8:	ee18 3a10 	vmov	r3, s16
 80082bc:	4652      	mov	r2, sl
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	d1be      	bne.n	8008246 <_printf_float+0x32a>
 80082c8:	e689      	b.n	8007fde <_printf_float+0xc2>
 80082ca:	9a05      	ldr	r2, [sp, #20]
 80082cc:	464b      	mov	r3, r9
 80082ce:	4442      	add	r2, r8
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	d1c1      	bne.n	800825e <_printf_float+0x342>
 80082da:	e680      	b.n	8007fde <_printf_float+0xc2>
 80082dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082de:	2a01      	cmp	r2, #1
 80082e0:	dc01      	bgt.n	80082e6 <_printf_float+0x3ca>
 80082e2:	07db      	lsls	r3, r3, #31
 80082e4:	d538      	bpl.n	8008358 <_printf_float+0x43c>
 80082e6:	2301      	movs	r3, #1
 80082e8:	4642      	mov	r2, r8
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	f43f ae74 	beq.w	8007fde <_printf_float+0xc2>
 80082f6:	ee18 3a10 	vmov	r3, s16
 80082fa:	4652      	mov	r2, sl
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	47b8      	blx	r7
 8008302:	3001      	adds	r0, #1
 8008304:	f43f ae6b 	beq.w	8007fde <_printf_float+0xc2>
 8008308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	f7f8 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008314:	b9d8      	cbnz	r0, 800834e <_printf_float+0x432>
 8008316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008318:	f108 0201 	add.w	r2, r8, #1
 800831c:	3b01      	subs	r3, #1
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	d10e      	bne.n	8008346 <_printf_float+0x42a>
 8008328:	e659      	b.n	8007fde <_printf_float+0xc2>
 800832a:	2301      	movs	r3, #1
 800832c:	4652      	mov	r2, sl
 800832e:	4631      	mov	r1, r6
 8008330:	4628      	mov	r0, r5
 8008332:	47b8      	blx	r7
 8008334:	3001      	adds	r0, #1
 8008336:	f43f ae52 	beq.w	8007fde <_printf_float+0xc2>
 800833a:	f108 0801 	add.w	r8, r8, #1
 800833e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008340:	3b01      	subs	r3, #1
 8008342:	4543      	cmp	r3, r8
 8008344:	dcf1      	bgt.n	800832a <_printf_float+0x40e>
 8008346:	464b      	mov	r3, r9
 8008348:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800834c:	e6dc      	b.n	8008108 <_printf_float+0x1ec>
 800834e:	f04f 0800 	mov.w	r8, #0
 8008352:	f104 0a1a 	add.w	sl, r4, #26
 8008356:	e7f2      	b.n	800833e <_printf_float+0x422>
 8008358:	2301      	movs	r3, #1
 800835a:	4642      	mov	r2, r8
 800835c:	e7df      	b.n	800831e <_printf_float+0x402>
 800835e:	2301      	movs	r3, #1
 8008360:	464a      	mov	r2, r9
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f ae38 	beq.w	8007fde <_printf_float+0xc2>
 800836e:	f108 0801 	add.w	r8, r8, #1
 8008372:	68e3      	ldr	r3, [r4, #12]
 8008374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008376:	1a5b      	subs	r3, r3, r1
 8008378:	4543      	cmp	r3, r8
 800837a:	dcf0      	bgt.n	800835e <_printf_float+0x442>
 800837c:	e6fa      	b.n	8008174 <_printf_float+0x258>
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	f104 0919 	add.w	r9, r4, #25
 8008386:	e7f4      	b.n	8008372 <_printf_float+0x456>

08008388 <_printf_common>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	4616      	mov	r6, r2
 800838e:	4699      	mov	r9, r3
 8008390:	688a      	ldr	r2, [r1, #8]
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008398:	4293      	cmp	r3, r2
 800839a:	bfb8      	it	lt
 800839c:	4613      	movlt	r3, r2
 800839e:	6033      	str	r3, [r6, #0]
 80083a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083a4:	4607      	mov	r7, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	b10a      	cbz	r2, 80083ae <_printf_common+0x26>
 80083aa:	3301      	adds	r3, #1
 80083ac:	6033      	str	r3, [r6, #0]
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	0699      	lsls	r1, r3, #26
 80083b2:	bf42      	ittt	mi
 80083b4:	6833      	ldrmi	r3, [r6, #0]
 80083b6:	3302      	addmi	r3, #2
 80083b8:	6033      	strmi	r3, [r6, #0]
 80083ba:	6825      	ldr	r5, [r4, #0]
 80083bc:	f015 0506 	ands.w	r5, r5, #6
 80083c0:	d106      	bne.n	80083d0 <_printf_common+0x48>
 80083c2:	f104 0a19 	add.w	sl, r4, #25
 80083c6:	68e3      	ldr	r3, [r4, #12]
 80083c8:	6832      	ldr	r2, [r6, #0]
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	dc26      	bgt.n	800841e <_printf_common+0x96>
 80083d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083d4:	1e13      	subs	r3, r2, #0
 80083d6:	6822      	ldr	r2, [r4, #0]
 80083d8:	bf18      	it	ne
 80083da:	2301      	movne	r3, #1
 80083dc:	0692      	lsls	r2, r2, #26
 80083de:	d42b      	bmi.n	8008438 <_printf_common+0xb0>
 80083e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083e4:	4649      	mov	r1, r9
 80083e6:	4638      	mov	r0, r7
 80083e8:	47c0      	blx	r8
 80083ea:	3001      	adds	r0, #1
 80083ec:	d01e      	beq.n	800842c <_printf_common+0xa4>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	68e5      	ldr	r5, [r4, #12]
 80083f2:	6832      	ldr	r2, [r6, #0]
 80083f4:	f003 0306 	and.w	r3, r3, #6
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	bf08      	it	eq
 80083fc:	1aad      	subeq	r5, r5, r2
 80083fe:	68a3      	ldr	r3, [r4, #8]
 8008400:	6922      	ldr	r2, [r4, #16]
 8008402:	bf0c      	ite	eq
 8008404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008408:	2500      	movne	r5, #0
 800840a:	4293      	cmp	r3, r2
 800840c:	bfc4      	itt	gt
 800840e:	1a9b      	subgt	r3, r3, r2
 8008410:	18ed      	addgt	r5, r5, r3
 8008412:	2600      	movs	r6, #0
 8008414:	341a      	adds	r4, #26
 8008416:	42b5      	cmp	r5, r6
 8008418:	d11a      	bne.n	8008450 <_printf_common+0xc8>
 800841a:	2000      	movs	r0, #0
 800841c:	e008      	b.n	8008430 <_printf_common+0xa8>
 800841e:	2301      	movs	r3, #1
 8008420:	4652      	mov	r2, sl
 8008422:	4649      	mov	r1, r9
 8008424:	4638      	mov	r0, r7
 8008426:	47c0      	blx	r8
 8008428:	3001      	adds	r0, #1
 800842a:	d103      	bne.n	8008434 <_printf_common+0xac>
 800842c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008434:	3501      	adds	r5, #1
 8008436:	e7c6      	b.n	80083c6 <_printf_common+0x3e>
 8008438:	18e1      	adds	r1, r4, r3
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	2030      	movs	r0, #48	; 0x30
 800843e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008442:	4422      	add	r2, r4
 8008444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800844c:	3302      	adds	r3, #2
 800844e:	e7c7      	b.n	80083e0 <_printf_common+0x58>
 8008450:	2301      	movs	r3, #1
 8008452:	4622      	mov	r2, r4
 8008454:	4649      	mov	r1, r9
 8008456:	4638      	mov	r0, r7
 8008458:	47c0      	blx	r8
 800845a:	3001      	adds	r0, #1
 800845c:	d0e6      	beq.n	800842c <_printf_common+0xa4>
 800845e:	3601      	adds	r6, #1
 8008460:	e7d9      	b.n	8008416 <_printf_common+0x8e>
	...

08008464 <_printf_i>:
 8008464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	460c      	mov	r4, r1
 800846a:	4691      	mov	r9, r2
 800846c:	7e27      	ldrb	r7, [r4, #24]
 800846e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008470:	2f78      	cmp	r7, #120	; 0x78
 8008472:	4680      	mov	r8, r0
 8008474:	469a      	mov	sl, r3
 8008476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800847a:	d807      	bhi.n	800848c <_printf_i+0x28>
 800847c:	2f62      	cmp	r7, #98	; 0x62
 800847e:	d80a      	bhi.n	8008496 <_printf_i+0x32>
 8008480:	2f00      	cmp	r7, #0
 8008482:	f000 80d8 	beq.w	8008636 <_printf_i+0x1d2>
 8008486:	2f58      	cmp	r7, #88	; 0x58
 8008488:	f000 80a3 	beq.w	80085d2 <_printf_i+0x16e>
 800848c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008494:	e03a      	b.n	800850c <_printf_i+0xa8>
 8008496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800849a:	2b15      	cmp	r3, #21
 800849c:	d8f6      	bhi.n	800848c <_printf_i+0x28>
 800849e:	a001      	add	r0, pc, #4	; (adr r0, 80084a4 <_printf_i+0x40>)
 80084a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084a4:	080084fd 	.word	0x080084fd
 80084a8:	08008511 	.word	0x08008511
 80084ac:	0800848d 	.word	0x0800848d
 80084b0:	0800848d 	.word	0x0800848d
 80084b4:	0800848d 	.word	0x0800848d
 80084b8:	0800848d 	.word	0x0800848d
 80084bc:	08008511 	.word	0x08008511
 80084c0:	0800848d 	.word	0x0800848d
 80084c4:	0800848d 	.word	0x0800848d
 80084c8:	0800848d 	.word	0x0800848d
 80084cc:	0800848d 	.word	0x0800848d
 80084d0:	0800861d 	.word	0x0800861d
 80084d4:	08008541 	.word	0x08008541
 80084d8:	080085ff 	.word	0x080085ff
 80084dc:	0800848d 	.word	0x0800848d
 80084e0:	0800848d 	.word	0x0800848d
 80084e4:	0800863f 	.word	0x0800863f
 80084e8:	0800848d 	.word	0x0800848d
 80084ec:	08008541 	.word	0x08008541
 80084f0:	0800848d 	.word	0x0800848d
 80084f4:	0800848d 	.word	0x0800848d
 80084f8:	08008607 	.word	0x08008607
 80084fc:	680b      	ldr	r3, [r1, #0]
 80084fe:	1d1a      	adds	r2, r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	600a      	str	r2, [r1, #0]
 8008504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800850c:	2301      	movs	r3, #1
 800850e:	e0a3      	b.n	8008658 <_printf_i+0x1f4>
 8008510:	6825      	ldr	r5, [r4, #0]
 8008512:	6808      	ldr	r0, [r1, #0]
 8008514:	062e      	lsls	r6, r5, #24
 8008516:	f100 0304 	add.w	r3, r0, #4
 800851a:	d50a      	bpl.n	8008532 <_printf_i+0xce>
 800851c:	6805      	ldr	r5, [r0, #0]
 800851e:	600b      	str	r3, [r1, #0]
 8008520:	2d00      	cmp	r5, #0
 8008522:	da03      	bge.n	800852c <_printf_i+0xc8>
 8008524:	232d      	movs	r3, #45	; 0x2d
 8008526:	426d      	negs	r5, r5
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800852c:	485e      	ldr	r0, [pc, #376]	; (80086a8 <_printf_i+0x244>)
 800852e:	230a      	movs	r3, #10
 8008530:	e019      	b.n	8008566 <_printf_i+0x102>
 8008532:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008536:	6805      	ldr	r5, [r0, #0]
 8008538:	600b      	str	r3, [r1, #0]
 800853a:	bf18      	it	ne
 800853c:	b22d      	sxthne	r5, r5
 800853e:	e7ef      	b.n	8008520 <_printf_i+0xbc>
 8008540:	680b      	ldr	r3, [r1, #0]
 8008542:	6825      	ldr	r5, [r4, #0]
 8008544:	1d18      	adds	r0, r3, #4
 8008546:	6008      	str	r0, [r1, #0]
 8008548:	0628      	lsls	r0, r5, #24
 800854a:	d501      	bpl.n	8008550 <_printf_i+0xec>
 800854c:	681d      	ldr	r5, [r3, #0]
 800854e:	e002      	b.n	8008556 <_printf_i+0xf2>
 8008550:	0669      	lsls	r1, r5, #25
 8008552:	d5fb      	bpl.n	800854c <_printf_i+0xe8>
 8008554:	881d      	ldrh	r5, [r3, #0]
 8008556:	4854      	ldr	r0, [pc, #336]	; (80086a8 <_printf_i+0x244>)
 8008558:	2f6f      	cmp	r7, #111	; 0x6f
 800855a:	bf0c      	ite	eq
 800855c:	2308      	moveq	r3, #8
 800855e:	230a      	movne	r3, #10
 8008560:	2100      	movs	r1, #0
 8008562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008566:	6866      	ldr	r6, [r4, #4]
 8008568:	60a6      	str	r6, [r4, #8]
 800856a:	2e00      	cmp	r6, #0
 800856c:	bfa2      	ittt	ge
 800856e:	6821      	ldrge	r1, [r4, #0]
 8008570:	f021 0104 	bicge.w	r1, r1, #4
 8008574:	6021      	strge	r1, [r4, #0]
 8008576:	b90d      	cbnz	r5, 800857c <_printf_i+0x118>
 8008578:	2e00      	cmp	r6, #0
 800857a:	d04d      	beq.n	8008618 <_printf_i+0x1b4>
 800857c:	4616      	mov	r6, r2
 800857e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008582:	fb03 5711 	mls	r7, r3, r1, r5
 8008586:	5dc7      	ldrb	r7, [r0, r7]
 8008588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800858c:	462f      	mov	r7, r5
 800858e:	42bb      	cmp	r3, r7
 8008590:	460d      	mov	r5, r1
 8008592:	d9f4      	bls.n	800857e <_printf_i+0x11a>
 8008594:	2b08      	cmp	r3, #8
 8008596:	d10b      	bne.n	80085b0 <_printf_i+0x14c>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	07df      	lsls	r7, r3, #31
 800859c:	d508      	bpl.n	80085b0 <_printf_i+0x14c>
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	6861      	ldr	r1, [r4, #4]
 80085a2:	4299      	cmp	r1, r3
 80085a4:	bfde      	ittt	le
 80085a6:	2330      	movle	r3, #48	; 0x30
 80085a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80085b0:	1b92      	subs	r2, r2, r6
 80085b2:	6122      	str	r2, [r4, #16]
 80085b4:	f8cd a000 	str.w	sl, [sp]
 80085b8:	464b      	mov	r3, r9
 80085ba:	aa03      	add	r2, sp, #12
 80085bc:	4621      	mov	r1, r4
 80085be:	4640      	mov	r0, r8
 80085c0:	f7ff fee2 	bl	8008388 <_printf_common>
 80085c4:	3001      	adds	r0, #1
 80085c6:	d14c      	bne.n	8008662 <_printf_i+0x1fe>
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085cc:	b004      	add	sp, #16
 80085ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d2:	4835      	ldr	r0, [pc, #212]	; (80086a8 <_printf_i+0x244>)
 80085d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	680e      	ldr	r6, [r1, #0]
 80085dc:	061f      	lsls	r7, r3, #24
 80085de:	f856 5b04 	ldr.w	r5, [r6], #4
 80085e2:	600e      	str	r6, [r1, #0]
 80085e4:	d514      	bpl.n	8008610 <_printf_i+0x1ac>
 80085e6:	07d9      	lsls	r1, r3, #31
 80085e8:	bf44      	itt	mi
 80085ea:	f043 0320 	orrmi.w	r3, r3, #32
 80085ee:	6023      	strmi	r3, [r4, #0]
 80085f0:	b91d      	cbnz	r5, 80085fa <_printf_i+0x196>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	f023 0320 	bic.w	r3, r3, #32
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	2310      	movs	r3, #16
 80085fc:	e7b0      	b.n	8008560 <_printf_i+0xfc>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	f043 0320 	orr.w	r3, r3, #32
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	2378      	movs	r3, #120	; 0x78
 8008608:	4828      	ldr	r0, [pc, #160]	; (80086ac <_printf_i+0x248>)
 800860a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800860e:	e7e3      	b.n	80085d8 <_printf_i+0x174>
 8008610:	065e      	lsls	r6, r3, #25
 8008612:	bf48      	it	mi
 8008614:	b2ad      	uxthmi	r5, r5
 8008616:	e7e6      	b.n	80085e6 <_printf_i+0x182>
 8008618:	4616      	mov	r6, r2
 800861a:	e7bb      	b.n	8008594 <_printf_i+0x130>
 800861c:	680b      	ldr	r3, [r1, #0]
 800861e:	6826      	ldr	r6, [r4, #0]
 8008620:	6960      	ldr	r0, [r4, #20]
 8008622:	1d1d      	adds	r5, r3, #4
 8008624:	600d      	str	r5, [r1, #0]
 8008626:	0635      	lsls	r5, r6, #24
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	d501      	bpl.n	8008630 <_printf_i+0x1cc>
 800862c:	6018      	str	r0, [r3, #0]
 800862e:	e002      	b.n	8008636 <_printf_i+0x1d2>
 8008630:	0671      	lsls	r1, r6, #25
 8008632:	d5fb      	bpl.n	800862c <_printf_i+0x1c8>
 8008634:	8018      	strh	r0, [r3, #0]
 8008636:	2300      	movs	r3, #0
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	4616      	mov	r6, r2
 800863c:	e7ba      	b.n	80085b4 <_printf_i+0x150>
 800863e:	680b      	ldr	r3, [r1, #0]
 8008640:	1d1a      	adds	r2, r3, #4
 8008642:	600a      	str	r2, [r1, #0]
 8008644:	681e      	ldr	r6, [r3, #0]
 8008646:	6862      	ldr	r2, [r4, #4]
 8008648:	2100      	movs	r1, #0
 800864a:	4630      	mov	r0, r6
 800864c:	f7f7 fdc8 	bl	80001e0 <memchr>
 8008650:	b108      	cbz	r0, 8008656 <_printf_i+0x1f2>
 8008652:	1b80      	subs	r0, r0, r6
 8008654:	6060      	str	r0, [r4, #4]
 8008656:	6863      	ldr	r3, [r4, #4]
 8008658:	6123      	str	r3, [r4, #16]
 800865a:	2300      	movs	r3, #0
 800865c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008660:	e7a8      	b.n	80085b4 <_printf_i+0x150>
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	4632      	mov	r2, r6
 8008666:	4649      	mov	r1, r9
 8008668:	4640      	mov	r0, r8
 800866a:	47d0      	blx	sl
 800866c:	3001      	adds	r0, #1
 800866e:	d0ab      	beq.n	80085c8 <_printf_i+0x164>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	079b      	lsls	r3, r3, #30
 8008674:	d413      	bmi.n	800869e <_printf_i+0x23a>
 8008676:	68e0      	ldr	r0, [r4, #12]
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	4298      	cmp	r0, r3
 800867c:	bfb8      	it	lt
 800867e:	4618      	movlt	r0, r3
 8008680:	e7a4      	b.n	80085cc <_printf_i+0x168>
 8008682:	2301      	movs	r3, #1
 8008684:	4632      	mov	r2, r6
 8008686:	4649      	mov	r1, r9
 8008688:	4640      	mov	r0, r8
 800868a:	47d0      	blx	sl
 800868c:	3001      	adds	r0, #1
 800868e:	d09b      	beq.n	80085c8 <_printf_i+0x164>
 8008690:	3501      	adds	r5, #1
 8008692:	68e3      	ldr	r3, [r4, #12]
 8008694:	9903      	ldr	r1, [sp, #12]
 8008696:	1a5b      	subs	r3, r3, r1
 8008698:	42ab      	cmp	r3, r5
 800869a:	dcf2      	bgt.n	8008682 <_printf_i+0x21e>
 800869c:	e7eb      	b.n	8008676 <_printf_i+0x212>
 800869e:	2500      	movs	r5, #0
 80086a0:	f104 0619 	add.w	r6, r4, #25
 80086a4:	e7f5      	b.n	8008692 <_printf_i+0x22e>
 80086a6:	bf00      	nop
 80086a8:	0800dafa 	.word	0x0800dafa
 80086ac:	0800db0b 	.word	0x0800db0b

080086b0 <siprintf>:
 80086b0:	b40e      	push	{r1, r2, r3}
 80086b2:	b500      	push	{lr}
 80086b4:	b09c      	sub	sp, #112	; 0x70
 80086b6:	ab1d      	add	r3, sp, #116	; 0x74
 80086b8:	9002      	str	r0, [sp, #8]
 80086ba:	9006      	str	r0, [sp, #24]
 80086bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c0:	4809      	ldr	r0, [pc, #36]	; (80086e8 <siprintf+0x38>)
 80086c2:	9107      	str	r1, [sp, #28]
 80086c4:	9104      	str	r1, [sp, #16]
 80086c6:	4909      	ldr	r1, [pc, #36]	; (80086ec <siprintf+0x3c>)
 80086c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086cc:	9105      	str	r1, [sp, #20]
 80086ce:	6800      	ldr	r0, [r0, #0]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	a902      	add	r1, sp, #8
 80086d4:	f001 fb32 	bl	8009d3c <_svfiprintf_r>
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	b01c      	add	sp, #112	; 0x70
 80086e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e4:	b003      	add	sp, #12
 80086e6:	4770      	bx	lr
 80086e8:	20000014 	.word	0x20000014
 80086ec:	ffff0208 	.word	0xffff0208

080086f0 <quorem>:
 80086f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	6903      	ldr	r3, [r0, #16]
 80086f6:	690c      	ldr	r4, [r1, #16]
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	4607      	mov	r7, r0
 80086fc:	f2c0 8081 	blt.w	8008802 <quorem+0x112>
 8008700:	3c01      	subs	r4, #1
 8008702:	f101 0814 	add.w	r8, r1, #20
 8008706:	f100 0514 	add.w	r5, r0, #20
 800870a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008718:	3301      	adds	r3, #1
 800871a:	429a      	cmp	r2, r3
 800871c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008724:	fbb2 f6f3 	udiv	r6, r2, r3
 8008728:	d331      	bcc.n	800878e <quorem+0x9e>
 800872a:	f04f 0e00 	mov.w	lr, #0
 800872e:	4640      	mov	r0, r8
 8008730:	46ac      	mov	ip, r5
 8008732:	46f2      	mov	sl, lr
 8008734:	f850 2b04 	ldr.w	r2, [r0], #4
 8008738:	b293      	uxth	r3, r2
 800873a:	fb06 e303 	mla	r3, r6, r3, lr
 800873e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008742:	b29b      	uxth	r3, r3
 8008744:	ebaa 0303 	sub.w	r3, sl, r3
 8008748:	0c12      	lsrs	r2, r2, #16
 800874a:	f8dc a000 	ldr.w	sl, [ip]
 800874e:	fb06 e202 	mla	r2, r6, r2, lr
 8008752:	fa13 f38a 	uxtah	r3, r3, sl
 8008756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800875a:	fa1f fa82 	uxth.w	sl, r2
 800875e:	f8dc 2000 	ldr.w	r2, [ip]
 8008762:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008770:	4581      	cmp	r9, r0
 8008772:	f84c 3b04 	str.w	r3, [ip], #4
 8008776:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800877a:	d2db      	bcs.n	8008734 <quorem+0x44>
 800877c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008780:	b92b      	cbnz	r3, 800878e <quorem+0x9e>
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	3b04      	subs	r3, #4
 8008786:	429d      	cmp	r5, r3
 8008788:	461a      	mov	r2, r3
 800878a:	d32e      	bcc.n	80087ea <quorem+0xfa>
 800878c:	613c      	str	r4, [r7, #16]
 800878e:	4638      	mov	r0, r7
 8008790:	f001 f8be 	bl	8009910 <__mcmp>
 8008794:	2800      	cmp	r0, #0
 8008796:	db24      	blt.n	80087e2 <quorem+0xf2>
 8008798:	3601      	adds	r6, #1
 800879a:	4628      	mov	r0, r5
 800879c:	f04f 0c00 	mov.w	ip, #0
 80087a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80087a4:	f8d0 e000 	ldr.w	lr, [r0]
 80087a8:	b293      	uxth	r3, r2
 80087aa:	ebac 0303 	sub.w	r3, ip, r3
 80087ae:	0c12      	lsrs	r2, r2, #16
 80087b0:	fa13 f38e 	uxtah	r3, r3, lr
 80087b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087bc:	b29b      	uxth	r3, r3
 80087be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c2:	45c1      	cmp	r9, r8
 80087c4:	f840 3b04 	str.w	r3, [r0], #4
 80087c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087cc:	d2e8      	bcs.n	80087a0 <quorem+0xb0>
 80087ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d6:	b922      	cbnz	r2, 80087e2 <quorem+0xf2>
 80087d8:	3b04      	subs	r3, #4
 80087da:	429d      	cmp	r5, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	d30a      	bcc.n	80087f6 <quorem+0x106>
 80087e0:	613c      	str	r4, [r7, #16]
 80087e2:	4630      	mov	r0, r6
 80087e4:	b003      	add	sp, #12
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	3b04      	subs	r3, #4
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	d1cc      	bne.n	800878c <quorem+0x9c>
 80087f2:	3c01      	subs	r4, #1
 80087f4:	e7c7      	b.n	8008786 <quorem+0x96>
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	3b04      	subs	r3, #4
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	d1f0      	bne.n	80087e0 <quorem+0xf0>
 80087fe:	3c01      	subs	r4, #1
 8008800:	e7eb      	b.n	80087da <quorem+0xea>
 8008802:	2000      	movs	r0, #0
 8008804:	e7ee      	b.n	80087e4 <quorem+0xf4>
	...

08008808 <_dtoa_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	ed2d 8b02 	vpush	{d8}
 8008810:	ec57 6b10 	vmov	r6, r7, d0
 8008814:	b095      	sub	sp, #84	; 0x54
 8008816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008818:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800881c:	9105      	str	r1, [sp, #20]
 800881e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008822:	4604      	mov	r4, r0
 8008824:	9209      	str	r2, [sp, #36]	; 0x24
 8008826:	930f      	str	r3, [sp, #60]	; 0x3c
 8008828:	b975      	cbnz	r5, 8008848 <_dtoa_r+0x40>
 800882a:	2010      	movs	r0, #16
 800882c:	f000 fddc 	bl	80093e8 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	6260      	str	r0, [r4, #36]	; 0x24
 8008834:	b920      	cbnz	r0, 8008840 <_dtoa_r+0x38>
 8008836:	4bb2      	ldr	r3, [pc, #712]	; (8008b00 <_dtoa_r+0x2f8>)
 8008838:	21ea      	movs	r1, #234	; 0xea
 800883a:	48b2      	ldr	r0, [pc, #712]	; (8008b04 <_dtoa_r+0x2fc>)
 800883c:	f001 fb8e 	bl	8009f5c <__assert_func>
 8008840:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008844:	6005      	str	r5, [r0, #0]
 8008846:	60c5      	str	r5, [r0, #12]
 8008848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800884a:	6819      	ldr	r1, [r3, #0]
 800884c:	b151      	cbz	r1, 8008864 <_dtoa_r+0x5c>
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	604a      	str	r2, [r1, #4]
 8008852:	2301      	movs	r3, #1
 8008854:	4093      	lsls	r3, r2
 8008856:	608b      	str	r3, [r1, #8]
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fe1b 	bl	8009494 <_Bfree>
 800885e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	1e3b      	subs	r3, r7, #0
 8008866:	bfb9      	ittee	lt
 8008868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800886c:	9303      	strlt	r3, [sp, #12]
 800886e:	2300      	movge	r3, #0
 8008870:	f8c8 3000 	strge.w	r3, [r8]
 8008874:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008878:	4ba3      	ldr	r3, [pc, #652]	; (8008b08 <_dtoa_r+0x300>)
 800887a:	bfbc      	itt	lt
 800887c:	2201      	movlt	r2, #1
 800887e:	f8c8 2000 	strlt.w	r2, [r8]
 8008882:	ea33 0309 	bics.w	r3, r3, r9
 8008886:	d11b      	bne.n	80088c0 <_dtoa_r+0xb8>
 8008888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800888a:	f242 730f 	movw	r3, #9999	; 0x270f
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008894:	4333      	orrs	r3, r6
 8008896:	f000 857a 	beq.w	800938e <_dtoa_r+0xb86>
 800889a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800889c:	b963      	cbnz	r3, 80088b8 <_dtoa_r+0xb0>
 800889e:	4b9b      	ldr	r3, [pc, #620]	; (8008b0c <_dtoa_r+0x304>)
 80088a0:	e024      	b.n	80088ec <_dtoa_r+0xe4>
 80088a2:	4b9b      	ldr	r3, [pc, #620]	; (8008b10 <_dtoa_r+0x308>)
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	9800      	ldr	r0, [sp, #0]
 80088ae:	b015      	add	sp, #84	; 0x54
 80088b0:	ecbd 8b02 	vpop	{d8}
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	4b94      	ldr	r3, [pc, #592]	; (8008b0c <_dtoa_r+0x304>)
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	3303      	adds	r3, #3
 80088be:	e7f3      	b.n	80088a8 <_dtoa_r+0xa0>
 80088c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088c4:	2200      	movs	r2, #0
 80088c6:	ec51 0b17 	vmov	r0, r1, d7
 80088ca:	2300      	movs	r3, #0
 80088cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80088d0:	f7f8 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d4:	4680      	mov	r8, r0
 80088d6:	b158      	cbz	r0, 80088f0 <_dtoa_r+0xe8>
 80088d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088da:	2301      	movs	r3, #1
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8551 	beq.w	8009388 <_dtoa_r+0xb80>
 80088e6:	488b      	ldr	r0, [pc, #556]	; (8008b14 <_dtoa_r+0x30c>)
 80088e8:	6018      	str	r0, [r3, #0]
 80088ea:	1e43      	subs	r3, r0, #1
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	e7dd      	b.n	80088ac <_dtoa_r+0xa4>
 80088f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80088f4:	aa12      	add	r2, sp, #72	; 0x48
 80088f6:	a913      	add	r1, sp, #76	; 0x4c
 80088f8:	4620      	mov	r0, r4
 80088fa:	f001 f8ad 	bl	8009a58 <__d2b>
 80088fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008902:	4683      	mov	fp, r0
 8008904:	2d00      	cmp	r5, #0
 8008906:	d07c      	beq.n	8008a02 <_dtoa_r+0x1fa>
 8008908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800890e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008912:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008916:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800891a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800891e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008922:	4b7d      	ldr	r3, [pc, #500]	; (8008b18 <_dtoa_r+0x310>)
 8008924:	2200      	movs	r2, #0
 8008926:	4630      	mov	r0, r6
 8008928:	4639      	mov	r1, r7
 800892a:	f7f7 fcad 	bl	8000288 <__aeabi_dsub>
 800892e:	a36e      	add	r3, pc, #440	; (adr r3, 8008ae8 <_dtoa_r+0x2e0>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f7f7 fe60 	bl	80005f8 <__aeabi_dmul>
 8008938:	a36d      	add	r3, pc, #436	; (adr r3, 8008af0 <_dtoa_r+0x2e8>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fca5 	bl	800028c <__adddf3>
 8008942:	4606      	mov	r6, r0
 8008944:	4628      	mov	r0, r5
 8008946:	460f      	mov	r7, r1
 8008948:	f7f7 fdec 	bl	8000524 <__aeabi_i2d>
 800894c:	a36a      	add	r3, pc, #424	; (adr r3, 8008af8 <_dtoa_r+0x2f0>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fe51 	bl	80005f8 <__aeabi_dmul>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4630      	mov	r0, r6
 800895c:	4639      	mov	r1, r7
 800895e:	f7f7 fc95 	bl	800028c <__adddf3>
 8008962:	4606      	mov	r6, r0
 8008964:	460f      	mov	r7, r1
 8008966:	f7f8 f8f7 	bl	8000b58 <__aeabi_d2iz>
 800896a:	2200      	movs	r2, #0
 800896c:	4682      	mov	sl, r0
 800896e:	2300      	movs	r3, #0
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f8 f8b2 	bl	8000adc <__aeabi_dcmplt>
 8008978:	b148      	cbz	r0, 800898e <_dtoa_r+0x186>
 800897a:	4650      	mov	r0, sl
 800897c:	f7f7 fdd2 	bl	8000524 <__aeabi_i2d>
 8008980:	4632      	mov	r2, r6
 8008982:	463b      	mov	r3, r7
 8008984:	f7f8 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008988:	b908      	cbnz	r0, 800898e <_dtoa_r+0x186>
 800898a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800898e:	f1ba 0f16 	cmp.w	sl, #22
 8008992:	d854      	bhi.n	8008a3e <_dtoa_r+0x236>
 8008994:	4b61      	ldr	r3, [pc, #388]	; (8008b1c <_dtoa_r+0x314>)
 8008996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089a2:	f7f8 f89b 	bl	8000adc <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d04b      	beq.n	8008a42 <_dtoa_r+0x23a>
 80089aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089ae:	2300      	movs	r3, #0
 80089b0:	930e      	str	r3, [sp, #56]	; 0x38
 80089b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b4:	1b5d      	subs	r5, r3, r5
 80089b6:	1e6b      	subs	r3, r5, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	bf43      	ittte	mi
 80089bc:	2300      	movmi	r3, #0
 80089be:	f1c5 0801 	rsbmi	r8, r5, #1
 80089c2:	9304      	strmi	r3, [sp, #16]
 80089c4:	f04f 0800 	movpl.w	r8, #0
 80089c8:	f1ba 0f00 	cmp.w	sl, #0
 80089cc:	db3b      	blt.n	8008a46 <_dtoa_r+0x23e>
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80089d4:	4453      	add	r3, sl
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	2300      	movs	r3, #0
 80089da:	9306      	str	r3, [sp, #24]
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	2b09      	cmp	r3, #9
 80089e0:	d869      	bhi.n	8008ab6 <_dtoa_r+0x2ae>
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	bfc4      	itt	gt
 80089e6:	3b04      	subgt	r3, #4
 80089e8:	9305      	strgt	r3, [sp, #20]
 80089ea:	9b05      	ldr	r3, [sp, #20]
 80089ec:	f1a3 0302 	sub.w	r3, r3, #2
 80089f0:	bfcc      	ite	gt
 80089f2:	2500      	movgt	r5, #0
 80089f4:	2501      	movle	r5, #1
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d869      	bhi.n	8008ace <_dtoa_r+0x2c6>
 80089fa:	e8df f003 	tbb	[pc, r3]
 80089fe:	4e2c      	.short	0x4e2c
 8008a00:	5a4c      	.short	0x5a4c
 8008a02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a06:	441d      	add	r5, r3
 8008a08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	bfc1      	itttt	gt
 8008a10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a18:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a20:	bfda      	itte	le
 8008a22:	f1c3 0320 	rsble	r3, r3, #32
 8008a26:	fa06 f003 	lslle.w	r0, r6, r3
 8008a2a:	4318      	orrgt	r0, r3
 8008a2c:	f7f7 fd6a 	bl	8000504 <__aeabi_ui2d>
 8008a30:	2301      	movs	r3, #1
 8008a32:	4606      	mov	r6, r0
 8008a34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a38:	3d01      	subs	r5, #1
 8008a3a:	9310      	str	r3, [sp, #64]	; 0x40
 8008a3c:	e771      	b.n	8008922 <_dtoa_r+0x11a>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e7b6      	b.n	80089b0 <_dtoa_r+0x1a8>
 8008a42:	900e      	str	r0, [sp, #56]	; 0x38
 8008a44:	e7b5      	b.n	80089b2 <_dtoa_r+0x1aa>
 8008a46:	f1ca 0300 	rsb	r3, sl, #0
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	eba8 080a 	sub.w	r8, r8, sl
 8008a52:	930d      	str	r3, [sp, #52]	; 0x34
 8008a54:	e7c2      	b.n	80089dc <_dtoa_r+0x1d4>
 8008a56:	2300      	movs	r3, #0
 8008a58:	9308      	str	r3, [sp, #32]
 8008a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dc39      	bgt.n	8008ad4 <_dtoa_r+0x2cc>
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a68:	464b      	mov	r3, r9
 8008a6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a70:	2200      	movs	r2, #0
 8008a72:	6042      	str	r2, [r0, #4]
 8008a74:	2204      	movs	r2, #4
 8008a76:	f102 0614 	add.w	r6, r2, #20
 8008a7a:	429e      	cmp	r6, r3
 8008a7c:	6841      	ldr	r1, [r0, #4]
 8008a7e:	d92f      	bls.n	8008ae0 <_dtoa_r+0x2d8>
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fcc7 	bl	8009414 <_Balloc>
 8008a86:	9000      	str	r0, [sp, #0]
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d14b      	bne.n	8008b24 <_dtoa_r+0x31c>
 8008a8c:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <_dtoa_r+0x318>)
 8008a8e:	4602      	mov	r2, r0
 8008a90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a94:	e6d1      	b.n	800883a <_dtoa_r+0x32>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7de      	b.n	8008a58 <_dtoa_r+0x250>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9308      	str	r3, [sp, #32]
 8008a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa0:	eb0a 0903 	add.w	r9, sl, r3
 8008aa4:	f109 0301 	add.w	r3, r9, #1
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	bfb8      	it	lt
 8008aae:	2301      	movlt	r3, #1
 8008ab0:	e7dd      	b.n	8008a6e <_dtoa_r+0x266>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7f2      	b.n	8008a9c <_dtoa_r+0x294>
 8008ab6:	2501      	movs	r5, #1
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9305      	str	r3, [sp, #20]
 8008abc:	9508      	str	r5, [sp, #32]
 8008abe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ac8:	2312      	movs	r3, #18
 8008aca:	9209      	str	r2, [sp, #36]	; 0x24
 8008acc:	e7cf      	b.n	8008a6e <_dtoa_r+0x266>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	e7f4      	b.n	8008abe <_dtoa_r+0x2b6>
 8008ad4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ad8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008adc:	464b      	mov	r3, r9
 8008ade:	e7c6      	b.n	8008a6e <_dtoa_r+0x266>
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	6041      	str	r1, [r0, #4]
 8008ae4:	0052      	lsls	r2, r2, #1
 8008ae6:	e7c6      	b.n	8008a76 <_dtoa_r+0x26e>
 8008ae8:	636f4361 	.word	0x636f4361
 8008aec:	3fd287a7 	.word	0x3fd287a7
 8008af0:	8b60c8b3 	.word	0x8b60c8b3
 8008af4:	3fc68a28 	.word	0x3fc68a28
 8008af8:	509f79fb 	.word	0x509f79fb
 8008afc:	3fd34413 	.word	0x3fd34413
 8008b00:	0800db29 	.word	0x0800db29
 8008b04:	0800db40 	.word	0x0800db40
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	0800db25 	.word	0x0800db25
 8008b10:	0800db1c 	.word	0x0800db1c
 8008b14:	0800daf9 	.word	0x0800daf9
 8008b18:	3ff80000 	.word	0x3ff80000
 8008b1c:	0800dc38 	.word	0x0800dc38
 8008b20:	0800db9f 	.word	0x0800db9f
 8008b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b26:	9a00      	ldr	r2, [sp, #0]
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	9b01      	ldr	r3, [sp, #4]
 8008b2c:	2b0e      	cmp	r3, #14
 8008b2e:	f200 80ad 	bhi.w	8008c8c <_dtoa_r+0x484>
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	f000 80aa 	beq.w	8008c8c <_dtoa_r+0x484>
 8008b38:	f1ba 0f00 	cmp.w	sl, #0
 8008b3c:	dd36      	ble.n	8008bac <_dtoa_r+0x3a4>
 8008b3e:	4ac3      	ldr	r2, [pc, #780]	; (8008e4c <_dtoa_r+0x644>)
 8008b40:	f00a 030f 	and.w	r3, sl, #15
 8008b44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b48:	ed93 7b00 	vldr	d7, [r3]
 8008b4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b50:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008b54:	eeb0 8a47 	vmov.f32	s16, s14
 8008b58:	eef0 8a67 	vmov.f32	s17, s15
 8008b5c:	d016      	beq.n	8008b8c <_dtoa_r+0x384>
 8008b5e:	4bbc      	ldr	r3, [pc, #752]	; (8008e50 <_dtoa_r+0x648>)
 8008b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b68:	f7f7 fe70 	bl	800084c <__aeabi_ddiv>
 8008b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b70:	f007 070f 	and.w	r7, r7, #15
 8008b74:	2503      	movs	r5, #3
 8008b76:	4eb6      	ldr	r6, [pc, #728]	; (8008e50 <_dtoa_r+0x648>)
 8008b78:	b957      	cbnz	r7, 8008b90 <_dtoa_r+0x388>
 8008b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7e:	ec53 2b18 	vmov	r2, r3, d8
 8008b82:	f7f7 fe63 	bl	800084c <__aeabi_ddiv>
 8008b86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b8a:	e029      	b.n	8008be0 <_dtoa_r+0x3d8>
 8008b8c:	2502      	movs	r5, #2
 8008b8e:	e7f2      	b.n	8008b76 <_dtoa_r+0x36e>
 8008b90:	07f9      	lsls	r1, r7, #31
 8008b92:	d508      	bpl.n	8008ba6 <_dtoa_r+0x39e>
 8008b94:	ec51 0b18 	vmov	r0, r1, d8
 8008b98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	ec41 0b18 	vmov	d8, r0, r1
 8008ba4:	3501      	adds	r5, #1
 8008ba6:	107f      	asrs	r7, r7, #1
 8008ba8:	3608      	adds	r6, #8
 8008baa:	e7e5      	b.n	8008b78 <_dtoa_r+0x370>
 8008bac:	f000 80a6 	beq.w	8008cfc <_dtoa_r+0x4f4>
 8008bb0:	f1ca 0600 	rsb	r6, sl, #0
 8008bb4:	4ba5      	ldr	r3, [pc, #660]	; (8008e4c <_dtoa_r+0x644>)
 8008bb6:	4fa6      	ldr	r7, [pc, #664]	; (8008e50 <_dtoa_r+0x648>)
 8008bb8:	f006 020f 	and.w	r2, r6, #15
 8008bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bc8:	f7f7 fd16 	bl	80005f8 <__aeabi_dmul>
 8008bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd0:	1136      	asrs	r6, r6, #4
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2502      	movs	r5, #2
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	f040 8085 	bne.w	8008ce6 <_dtoa_r+0x4de>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1d2      	bne.n	8008b86 <_dtoa_r+0x37e>
 8008be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 808c 	beq.w	8008d00 <_dtoa_r+0x4f8>
 8008be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bec:	4b99      	ldr	r3, [pc, #612]	; (8008e54 <_dtoa_r+0x64c>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 ff72 	bl	8000adc <__aeabi_dcmplt>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	f000 8081 	beq.w	8008d00 <_dtoa_r+0x4f8>
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d07d      	beq.n	8008d00 <_dtoa_r+0x4f8>
 8008c04:	f1b9 0f00 	cmp.w	r9, #0
 8008c08:	dd3c      	ble.n	8008c84 <_dtoa_r+0x47c>
 8008c0a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b91      	ldr	r3, [pc, #580]	; (8008e58 <_dtoa_r+0x650>)
 8008c14:	4630      	mov	r0, r6
 8008c16:	4639      	mov	r1, r7
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c20:	3501      	adds	r5, #1
 8008c22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f7f7 fc7a 	bl	8000524 <__aeabi_i2d>
 8008c30:	4632      	mov	r2, r6
 8008c32:	463b      	mov	r3, r7
 8008c34:	f7f7 fce0 	bl	80005f8 <__aeabi_dmul>
 8008c38:	4b88      	ldr	r3, [pc, #544]	; (8008e5c <_dtoa_r+0x654>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f7f7 fb26 	bl	800028c <__adddf3>
 8008c40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d15c      	bne.n	8008d0a <_dtoa_r+0x502>
 8008c50:	4b83      	ldr	r3, [pc, #524]	; (8008e60 <_dtoa_r+0x658>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	4630      	mov	r0, r6
 8008c56:	4639      	mov	r1, r7
 8008c58:	f7f7 fb16 	bl	8000288 <__aeabi_dsub>
 8008c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c60:	4606      	mov	r6, r0
 8008c62:	460f      	mov	r7, r1
 8008c64:	f7f7 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	f040 8296 	bne.w	800919a <_dtoa_r+0x992>
 8008c6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c72:	4630      	mov	r0, r6
 8008c74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 ff2f 	bl	8000adc <__aeabi_dcmplt>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f040 8288 	bne.w	8009194 <_dtoa_r+0x98c>
 8008c84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f2c0 8158 	blt.w	8008f44 <_dtoa_r+0x73c>
 8008c94:	f1ba 0f0e 	cmp.w	sl, #14
 8008c98:	f300 8154 	bgt.w	8008f44 <_dtoa_r+0x73c>
 8008c9c:	4b6b      	ldr	r3, [pc, #428]	; (8008e4c <_dtoa_r+0x644>)
 8008c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ca2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f280 80e3 	bge.w	8008e74 <_dtoa_r+0x66c>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f300 80df 	bgt.w	8008e74 <_dtoa_r+0x66c>
 8008cb6:	f040 826d 	bne.w	8009194 <_dtoa_r+0x98c>
 8008cba:	4b69      	ldr	r3, [pc, #420]	; (8008e60 <_dtoa_r+0x658>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fc99 	bl	80005f8 <__aeabi_dmul>
 8008cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cca:	f7f7 ff1b 	bl	8000b04 <__aeabi_dcmpge>
 8008cce:	9e01      	ldr	r6, [sp, #4]
 8008cd0:	4637      	mov	r7, r6
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f040 8243 	bne.w	800915e <_dtoa_r+0x956>
 8008cd8:	9d00      	ldr	r5, [sp, #0]
 8008cda:	2331      	movs	r3, #49	; 0x31
 8008cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ce0:	f10a 0a01 	add.w	sl, sl, #1
 8008ce4:	e23f      	b.n	8009166 <_dtoa_r+0x95e>
 8008ce6:	07f2      	lsls	r2, r6, #31
 8008ce8:	d505      	bpl.n	8008cf6 <_dtoa_r+0x4ee>
 8008cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cee:	f7f7 fc83 	bl	80005f8 <__aeabi_dmul>
 8008cf2:	3501      	adds	r5, #1
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	1076      	asrs	r6, r6, #1
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	e76c      	b.n	8008bd6 <_dtoa_r+0x3ce>
 8008cfc:	2502      	movs	r5, #2
 8008cfe:	e76f      	b.n	8008be0 <_dtoa_r+0x3d8>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d06:	930c      	str	r3, [sp, #48]	; 0x30
 8008d08:	e78d      	b.n	8008c26 <_dtoa_r+0x41e>
 8008d0a:	9900      	ldr	r1, [sp, #0]
 8008d0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d10:	4b4e      	ldr	r3, [pc, #312]	; (8008e4c <_dtoa_r+0x644>)
 8008d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d16:	4401      	add	r1, r0
 8008d18:	9102      	str	r1, [sp, #8]
 8008d1a:	9908      	ldr	r1, [sp, #32]
 8008d1c:	eeb0 8a47 	vmov.f32	s16, s14
 8008d20:	eef0 8a67 	vmov.f32	s17, s15
 8008d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d045      	beq.n	8008dbc <_dtoa_r+0x5b4>
 8008d30:	494c      	ldr	r1, [pc, #304]	; (8008e64 <_dtoa_r+0x65c>)
 8008d32:	2000      	movs	r0, #0
 8008d34:	f7f7 fd8a 	bl	800084c <__aeabi_ddiv>
 8008d38:	ec53 2b18 	vmov	r2, r3, d8
 8008d3c:	f7f7 faa4 	bl	8000288 <__aeabi_dsub>
 8008d40:	9d00      	ldr	r5, [sp, #0]
 8008d42:	ec41 0b18 	vmov	d8, r0, r1
 8008d46:	4639      	mov	r1, r7
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7f7 ff05 	bl	8000b58 <__aeabi_d2iz>
 8008d4e:	900c      	str	r0, [sp, #48]	; 0x30
 8008d50:	f7f7 fbe8 	bl	8000524 <__aeabi_i2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fa94 	bl	8000288 <__aeabi_dsub>
 8008d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d62:	3330      	adds	r3, #48	; 0x30
 8008d64:	f805 3b01 	strb.w	r3, [r5], #1
 8008d68:	ec53 2b18 	vmov	r2, r3, d8
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f7f7 feb4 	bl	8000adc <__aeabi_dcmplt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d165      	bne.n	8008e44 <_dtoa_r+0x63c>
 8008d78:	4632      	mov	r2, r6
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	4935      	ldr	r1, [pc, #212]	; (8008e54 <_dtoa_r+0x64c>)
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f7f7 fa82 	bl	8000288 <__aeabi_dsub>
 8008d84:	ec53 2b18 	vmov	r2, r3, d8
 8008d88:	f7f7 fea8 	bl	8000adc <__aeabi_dcmplt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f040 80b9 	bne.w	8008f04 <_dtoa_r+0x6fc>
 8008d92:	9b02      	ldr	r3, [sp, #8]
 8008d94:	429d      	cmp	r5, r3
 8008d96:	f43f af75 	beq.w	8008c84 <_dtoa_r+0x47c>
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <_dtoa_r+0x650>)
 8008d9c:	ec51 0b18 	vmov	r0, r1, d8
 8008da0:	2200      	movs	r2, #0
 8008da2:	f7f7 fc29 	bl	80005f8 <__aeabi_dmul>
 8008da6:	4b2c      	ldr	r3, [pc, #176]	; (8008e58 <_dtoa_r+0x650>)
 8008da8:	ec41 0b18 	vmov	d8, r0, r1
 8008dac:	2200      	movs	r2, #0
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fc21 	bl	80005f8 <__aeabi_dmul>
 8008db6:	4606      	mov	r6, r0
 8008db8:	460f      	mov	r7, r1
 8008dba:	e7c4      	b.n	8008d46 <_dtoa_r+0x53e>
 8008dbc:	ec51 0b17 	vmov	r0, r1, d7
 8008dc0:	f7f7 fc1a 	bl	80005f8 <__aeabi_dmul>
 8008dc4:	9b02      	ldr	r3, [sp, #8]
 8008dc6:	9d00      	ldr	r5, [sp, #0]
 8008dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dca:	ec41 0b18 	vmov	d8, r0, r1
 8008dce:	4639      	mov	r1, r7
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7f7 fec1 	bl	8000b58 <__aeabi_d2iz>
 8008dd6:	9011      	str	r0, [sp, #68]	; 0x44
 8008dd8:	f7f7 fba4 	bl	8000524 <__aeabi_i2d>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 fa50 	bl	8000288 <__aeabi_dsub>
 8008de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dea:	3330      	adds	r3, #48	; 0x30
 8008dec:	f805 3b01 	strb.w	r3, [r5], #1
 8008df0:	9b02      	ldr	r3, [sp, #8]
 8008df2:	429d      	cmp	r5, r3
 8008df4:	4606      	mov	r6, r0
 8008df6:	460f      	mov	r7, r1
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	d134      	bne.n	8008e68 <_dtoa_r+0x660>
 8008dfe:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <_dtoa_r+0x65c>)
 8008e00:	ec51 0b18 	vmov	r0, r1, d8
 8008e04:	f7f7 fa42 	bl	800028c <__adddf3>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fe82 	bl	8000b18 <__aeabi_dcmpgt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d175      	bne.n	8008f04 <_dtoa_r+0x6fc>
 8008e18:	ec53 2b18 	vmov	r2, r3, d8
 8008e1c:	4911      	ldr	r1, [pc, #68]	; (8008e64 <_dtoa_r+0x65c>)
 8008e1e:	2000      	movs	r0, #0
 8008e20:	f7f7 fa32 	bl	8000288 <__aeabi_dsub>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f7 fe56 	bl	8000adc <__aeabi_dcmplt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	f43f af27 	beq.w	8008c84 <_dtoa_r+0x47c>
 8008e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e38:	1e6b      	subs	r3, r5, #1
 8008e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e40:	2b30      	cmp	r3, #48	; 0x30
 8008e42:	d0f8      	beq.n	8008e36 <_dtoa_r+0x62e>
 8008e44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e48:	e04a      	b.n	8008ee0 <_dtoa_r+0x6d8>
 8008e4a:	bf00      	nop
 8008e4c:	0800dc38 	.word	0x0800dc38
 8008e50:	0800dc10 	.word	0x0800dc10
 8008e54:	3ff00000 	.word	0x3ff00000
 8008e58:	40240000 	.word	0x40240000
 8008e5c:	401c0000 	.word	0x401c0000
 8008e60:	40140000 	.word	0x40140000
 8008e64:	3fe00000 	.word	0x3fe00000
 8008e68:	4baf      	ldr	r3, [pc, #700]	; (8009128 <_dtoa_r+0x920>)
 8008e6a:	f7f7 fbc5 	bl	80005f8 <__aeabi_dmul>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	e7ac      	b.n	8008dce <_dtoa_r+0x5c6>
 8008e74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e78:	9d00      	ldr	r5, [sp, #0]
 8008e7a:	4642      	mov	r2, r8
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	4630      	mov	r0, r6
 8008e80:	4639      	mov	r1, r7
 8008e82:	f7f7 fce3 	bl	800084c <__aeabi_ddiv>
 8008e86:	f7f7 fe67 	bl	8000b58 <__aeabi_d2iz>
 8008e8a:	9002      	str	r0, [sp, #8]
 8008e8c:	f7f7 fb4a 	bl	8000524 <__aeabi_i2d>
 8008e90:	4642      	mov	r2, r8
 8008e92:	464b      	mov	r3, r9
 8008e94:	f7f7 fbb0 	bl	80005f8 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 f9f2 	bl	8000288 <__aeabi_dsub>
 8008ea4:	9e02      	ldr	r6, [sp, #8]
 8008ea6:	9f01      	ldr	r7, [sp, #4]
 8008ea8:	3630      	adds	r6, #48	; 0x30
 8008eaa:	f805 6b01 	strb.w	r6, [r5], #1
 8008eae:	9e00      	ldr	r6, [sp, #0]
 8008eb0:	1bae      	subs	r6, r5, r6
 8008eb2:	42b7      	cmp	r7, r6
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	d137      	bne.n	8008f2a <_dtoa_r+0x722>
 8008eba:	f7f7 f9e7 	bl	800028c <__adddf3>
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460f      	mov	r7, r1
 8008ec6:	f7f7 fe27 	bl	8000b18 <__aeabi_dcmpgt>
 8008eca:	b9c8      	cbnz	r0, 8008f00 <_dtoa_r+0x6f8>
 8008ecc:	4642      	mov	r2, r8
 8008ece:	464b      	mov	r3, r9
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ed8:	b110      	cbz	r0, 8008ee0 <_dtoa_r+0x6d8>
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	07d9      	lsls	r1, r3, #31
 8008ede:	d40f      	bmi.n	8008f00 <_dtoa_r+0x6f8>
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	f000 fad6 	bl	8009494 <_Bfree>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	702b      	strb	r3, [r5, #0]
 8008eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eee:	f10a 0001 	add.w	r0, sl, #1
 8008ef2:	6018      	str	r0, [r3, #0]
 8008ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f43f acd8 	beq.w	80088ac <_dtoa_r+0xa4>
 8008efc:	601d      	str	r5, [r3, #0]
 8008efe:	e4d5      	b.n	80088ac <_dtoa_r+0xa4>
 8008f00:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f04:	462b      	mov	r3, r5
 8008f06:	461d      	mov	r5, r3
 8008f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f0c:	2a39      	cmp	r2, #57	; 0x39
 8008f0e:	d108      	bne.n	8008f22 <_dtoa_r+0x71a>
 8008f10:	9a00      	ldr	r2, [sp, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d1f7      	bne.n	8008f06 <_dtoa_r+0x6fe>
 8008f16:	9a07      	ldr	r2, [sp, #28]
 8008f18:	9900      	ldr	r1, [sp, #0]
 8008f1a:	3201      	adds	r2, #1
 8008f1c:	9207      	str	r2, [sp, #28]
 8008f1e:	2230      	movs	r2, #48	; 0x30
 8008f20:	700a      	strb	r2, [r1, #0]
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	3201      	adds	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e78c      	b.n	8008e44 <_dtoa_r+0x63c>
 8008f2a:	4b7f      	ldr	r3, [pc, #508]	; (8009128 <_dtoa_r+0x920>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f7f7 fb63 	bl	80005f8 <__aeabi_dmul>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	f7f7 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d09b      	beq.n	8008e7a <_dtoa_r+0x672>
 8008f42:	e7cd      	b.n	8008ee0 <_dtoa_r+0x6d8>
 8008f44:	9a08      	ldr	r2, [sp, #32]
 8008f46:	2a00      	cmp	r2, #0
 8008f48:	f000 80c4 	beq.w	80090d4 <_dtoa_r+0x8cc>
 8008f4c:	9a05      	ldr	r2, [sp, #20]
 8008f4e:	2a01      	cmp	r2, #1
 8008f50:	f300 80a8 	bgt.w	80090a4 <_dtoa_r+0x89c>
 8008f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f56:	2a00      	cmp	r2, #0
 8008f58:	f000 80a0 	beq.w	800909c <_dtoa_r+0x894>
 8008f5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f60:	9e06      	ldr	r6, [sp, #24]
 8008f62:	4645      	mov	r5, r8
 8008f64:	9a04      	ldr	r2, [sp, #16]
 8008f66:	2101      	movs	r1, #1
 8008f68:	441a      	add	r2, r3
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4498      	add	r8, r3
 8008f6e:	9204      	str	r2, [sp, #16]
 8008f70:	f000 fb4c 	bl	800960c <__i2b>
 8008f74:	4607      	mov	r7, r0
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	dd0b      	ble.n	8008f92 <_dtoa_r+0x78a>
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd08      	ble.n	8008f92 <_dtoa_r+0x78a>
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	9a04      	ldr	r2, [sp, #16]
 8008f84:	bfa8      	it	ge
 8008f86:	462b      	movge	r3, r5
 8008f88:	eba8 0803 	sub.w	r8, r8, r3
 8008f8c:	1aed      	subs	r5, r5, r3
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	9b06      	ldr	r3, [sp, #24]
 8008f94:	b1fb      	cbz	r3, 8008fd6 <_dtoa_r+0x7ce>
 8008f96:	9b08      	ldr	r3, [sp, #32]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 809f 	beq.w	80090dc <_dtoa_r+0x8d4>
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	dd11      	ble.n	8008fc6 <_dtoa_r+0x7be>
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4632      	mov	r2, r6
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 fbec 	bl	8009784 <__pow5mult>
 8008fac:	465a      	mov	r2, fp
 8008fae:	4601      	mov	r1, r0
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fb40 	bl	8009638 <__multiply>
 8008fb8:	4659      	mov	r1, fp
 8008fba:	9007      	str	r0, [sp, #28]
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fa69 	bl	8009494 <_Bfree>
 8008fc2:	9b07      	ldr	r3, [sp, #28]
 8008fc4:	469b      	mov	fp, r3
 8008fc6:	9b06      	ldr	r3, [sp, #24]
 8008fc8:	1b9a      	subs	r2, r3, r6
 8008fca:	d004      	beq.n	8008fd6 <_dtoa_r+0x7ce>
 8008fcc:	4659      	mov	r1, fp
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 fbd8 	bl	8009784 <__pow5mult>
 8008fd4:	4683      	mov	fp, r0
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fb17 	bl	800960c <__i2b>
 8008fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	dd7c      	ble.n	80090e0 <_dtoa_r+0x8d8>
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4601      	mov	r1, r0
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fbca 	bl	8009784 <__pow5mult>
 8008ff0:	9b05      	ldr	r3, [sp, #20]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	dd76      	ble.n	80090e6 <_dtoa_r+0x8de>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	9306      	str	r3, [sp, #24]
 8008ffc:	6933      	ldr	r3, [r6, #16]
 8008ffe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009002:	6918      	ldr	r0, [r3, #16]
 8009004:	f000 fab2 	bl	800956c <__hi0bits>
 8009008:	f1c0 0020 	rsb	r0, r0, #32
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	4418      	add	r0, r3
 8009010:	f010 001f 	ands.w	r0, r0, #31
 8009014:	f000 8086 	beq.w	8009124 <_dtoa_r+0x91c>
 8009018:	f1c0 0320 	rsb	r3, r0, #32
 800901c:	2b04      	cmp	r3, #4
 800901e:	dd7f      	ble.n	8009120 <_dtoa_r+0x918>
 8009020:	f1c0 001c 	rsb	r0, r0, #28
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4403      	add	r3, r0
 8009028:	4480      	add	r8, r0
 800902a:	4405      	add	r5, r0
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	dd05      	ble.n	8009040 <_dtoa_r+0x838>
 8009034:	4659      	mov	r1, fp
 8009036:	4642      	mov	r2, r8
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fbfd 	bl	8009838 <__lshift>
 800903e:	4683      	mov	fp, r0
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	dd05      	ble.n	8009052 <_dtoa_r+0x84a>
 8009046:	4631      	mov	r1, r6
 8009048:	461a      	mov	r2, r3
 800904a:	4620      	mov	r0, r4
 800904c:	f000 fbf4 	bl	8009838 <__lshift>
 8009050:	4606      	mov	r6, r0
 8009052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d069      	beq.n	800912c <_dtoa_r+0x924>
 8009058:	4631      	mov	r1, r6
 800905a:	4658      	mov	r0, fp
 800905c:	f000 fc58 	bl	8009910 <__mcmp>
 8009060:	2800      	cmp	r0, #0
 8009062:	da63      	bge.n	800912c <_dtoa_r+0x924>
 8009064:	2300      	movs	r3, #0
 8009066:	4659      	mov	r1, fp
 8009068:	220a      	movs	r2, #10
 800906a:	4620      	mov	r0, r4
 800906c:	f000 fa34 	bl	80094d8 <__multadd>
 8009070:	9b08      	ldr	r3, [sp, #32]
 8009072:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009076:	4683      	mov	fp, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 818f 	beq.w	800939c <_dtoa_r+0xb94>
 800907e:	4639      	mov	r1, r7
 8009080:	2300      	movs	r3, #0
 8009082:	220a      	movs	r2, #10
 8009084:	4620      	mov	r0, r4
 8009086:	f000 fa27 	bl	80094d8 <__multadd>
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	4607      	mov	r7, r0
 8009090:	f300 808e 	bgt.w	80091b0 <_dtoa_r+0x9a8>
 8009094:	9b05      	ldr	r3, [sp, #20]
 8009096:	2b02      	cmp	r3, #2
 8009098:	dc50      	bgt.n	800913c <_dtoa_r+0x934>
 800909a:	e089      	b.n	80091b0 <_dtoa_r+0x9a8>
 800909c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800909e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090a2:	e75d      	b.n	8008f60 <_dtoa_r+0x758>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	1e5e      	subs	r6, r3, #1
 80090a8:	9b06      	ldr	r3, [sp, #24]
 80090aa:	42b3      	cmp	r3, r6
 80090ac:	bfbf      	itttt	lt
 80090ae:	9b06      	ldrlt	r3, [sp, #24]
 80090b0:	9606      	strlt	r6, [sp, #24]
 80090b2:	1af2      	sublt	r2, r6, r3
 80090b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80090b6:	bfb6      	itet	lt
 80090b8:	189b      	addlt	r3, r3, r2
 80090ba:	1b9e      	subge	r6, r3, r6
 80090bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	bfb8      	it	lt
 80090c2:	2600      	movlt	r6, #0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	bfb5      	itete	lt
 80090c8:	eba8 0503 	sublt.w	r5, r8, r3
 80090cc:	9b01      	ldrge	r3, [sp, #4]
 80090ce:	2300      	movlt	r3, #0
 80090d0:	4645      	movge	r5, r8
 80090d2:	e747      	b.n	8008f64 <_dtoa_r+0x75c>
 80090d4:	9e06      	ldr	r6, [sp, #24]
 80090d6:	9f08      	ldr	r7, [sp, #32]
 80090d8:	4645      	mov	r5, r8
 80090da:	e74c      	b.n	8008f76 <_dtoa_r+0x76e>
 80090dc:	9a06      	ldr	r2, [sp, #24]
 80090de:	e775      	b.n	8008fcc <_dtoa_r+0x7c4>
 80090e0:	9b05      	ldr	r3, [sp, #20]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	dc18      	bgt.n	8009118 <_dtoa_r+0x910>
 80090e6:	9b02      	ldr	r3, [sp, #8]
 80090e8:	b9b3      	cbnz	r3, 8009118 <_dtoa_r+0x910>
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090f0:	b9a3      	cbnz	r3, 800911c <_dtoa_r+0x914>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090f8:	0d1b      	lsrs	r3, r3, #20
 80090fa:	051b      	lsls	r3, r3, #20
 80090fc:	b12b      	cbz	r3, 800910a <_dtoa_r+0x902>
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	3301      	adds	r3, #1
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	f108 0801 	add.w	r8, r8, #1
 8009108:	2301      	movs	r3, #1
 800910a:	9306      	str	r3, [sp, #24]
 800910c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800910e:	2b00      	cmp	r3, #0
 8009110:	f47f af74 	bne.w	8008ffc <_dtoa_r+0x7f4>
 8009114:	2001      	movs	r0, #1
 8009116:	e779      	b.n	800900c <_dtoa_r+0x804>
 8009118:	2300      	movs	r3, #0
 800911a:	e7f6      	b.n	800910a <_dtoa_r+0x902>
 800911c:	9b02      	ldr	r3, [sp, #8]
 800911e:	e7f4      	b.n	800910a <_dtoa_r+0x902>
 8009120:	d085      	beq.n	800902e <_dtoa_r+0x826>
 8009122:	4618      	mov	r0, r3
 8009124:	301c      	adds	r0, #28
 8009126:	e77d      	b.n	8009024 <_dtoa_r+0x81c>
 8009128:	40240000 	.word	0x40240000
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	dc38      	bgt.n	80091a4 <_dtoa_r+0x99c>
 8009132:	9b05      	ldr	r3, [sp, #20]
 8009134:	2b02      	cmp	r3, #2
 8009136:	dd35      	ble.n	80091a4 <_dtoa_r+0x99c>
 8009138:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800913c:	f1b9 0f00 	cmp.w	r9, #0
 8009140:	d10d      	bne.n	800915e <_dtoa_r+0x956>
 8009142:	4631      	mov	r1, r6
 8009144:	464b      	mov	r3, r9
 8009146:	2205      	movs	r2, #5
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f9c5 	bl	80094d8 <__multadd>
 800914e:	4601      	mov	r1, r0
 8009150:	4606      	mov	r6, r0
 8009152:	4658      	mov	r0, fp
 8009154:	f000 fbdc 	bl	8009910 <__mcmp>
 8009158:	2800      	cmp	r0, #0
 800915a:	f73f adbd 	bgt.w	8008cd8 <_dtoa_r+0x4d0>
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	9d00      	ldr	r5, [sp, #0]
 8009162:	ea6f 0a03 	mvn.w	sl, r3
 8009166:	f04f 0800 	mov.w	r8, #0
 800916a:	4631      	mov	r1, r6
 800916c:	4620      	mov	r0, r4
 800916e:	f000 f991 	bl	8009494 <_Bfree>
 8009172:	2f00      	cmp	r7, #0
 8009174:	f43f aeb4 	beq.w	8008ee0 <_dtoa_r+0x6d8>
 8009178:	f1b8 0f00 	cmp.w	r8, #0
 800917c:	d005      	beq.n	800918a <_dtoa_r+0x982>
 800917e:	45b8      	cmp	r8, r7
 8009180:	d003      	beq.n	800918a <_dtoa_r+0x982>
 8009182:	4641      	mov	r1, r8
 8009184:	4620      	mov	r0, r4
 8009186:	f000 f985 	bl	8009494 <_Bfree>
 800918a:	4639      	mov	r1, r7
 800918c:	4620      	mov	r0, r4
 800918e:	f000 f981 	bl	8009494 <_Bfree>
 8009192:	e6a5      	b.n	8008ee0 <_dtoa_r+0x6d8>
 8009194:	2600      	movs	r6, #0
 8009196:	4637      	mov	r7, r6
 8009198:	e7e1      	b.n	800915e <_dtoa_r+0x956>
 800919a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800919c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091a0:	4637      	mov	r7, r6
 80091a2:	e599      	b.n	8008cd8 <_dtoa_r+0x4d0>
 80091a4:	9b08      	ldr	r3, [sp, #32]
 80091a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 80fd 	beq.w	80093aa <_dtoa_r+0xba2>
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	dd05      	ble.n	80091c0 <_dtoa_r+0x9b8>
 80091b4:	4639      	mov	r1, r7
 80091b6:	462a      	mov	r2, r5
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fb3d 	bl	8009838 <__lshift>
 80091be:	4607      	mov	r7, r0
 80091c0:	9b06      	ldr	r3, [sp, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d05c      	beq.n	8009280 <_dtoa_r+0xa78>
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 f923 	bl	8009414 <_Balloc>
 80091ce:	4605      	mov	r5, r0
 80091d0:	b928      	cbnz	r0, 80091de <_dtoa_r+0x9d6>
 80091d2:	4b80      	ldr	r3, [pc, #512]	; (80093d4 <_dtoa_r+0xbcc>)
 80091d4:	4602      	mov	r2, r0
 80091d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091da:	f7ff bb2e 	b.w	800883a <_dtoa_r+0x32>
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	0092      	lsls	r2, r2, #2
 80091e4:	f107 010c 	add.w	r1, r7, #12
 80091e8:	300c      	adds	r0, #12
 80091ea:	f000 f905 	bl	80093f8 <memcpy>
 80091ee:	2201      	movs	r2, #1
 80091f0:	4629      	mov	r1, r5
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 fb20 	bl	8009838 <__lshift>
 80091f8:	9b00      	ldr	r3, [sp, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	444b      	add	r3, r9
 8009202:	9307      	str	r3, [sp, #28]
 8009204:	9b02      	ldr	r3, [sp, #8]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	46b8      	mov	r8, r7
 800920c:	9306      	str	r3, [sp, #24]
 800920e:	4607      	mov	r7, r0
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	4631      	mov	r1, r6
 8009214:	3b01      	subs	r3, #1
 8009216:	4658      	mov	r0, fp
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	f7ff fa69 	bl	80086f0 <quorem>
 800921e:	4603      	mov	r3, r0
 8009220:	3330      	adds	r3, #48	; 0x30
 8009222:	9004      	str	r0, [sp, #16]
 8009224:	4641      	mov	r1, r8
 8009226:	4658      	mov	r0, fp
 8009228:	9308      	str	r3, [sp, #32]
 800922a:	f000 fb71 	bl	8009910 <__mcmp>
 800922e:	463a      	mov	r2, r7
 8009230:	4681      	mov	r9, r0
 8009232:	4631      	mov	r1, r6
 8009234:	4620      	mov	r0, r4
 8009236:	f000 fb87 	bl	8009948 <__mdiff>
 800923a:	68c2      	ldr	r2, [r0, #12]
 800923c:	9b08      	ldr	r3, [sp, #32]
 800923e:	4605      	mov	r5, r0
 8009240:	bb02      	cbnz	r2, 8009284 <_dtoa_r+0xa7c>
 8009242:	4601      	mov	r1, r0
 8009244:	4658      	mov	r0, fp
 8009246:	f000 fb63 	bl	8009910 <__mcmp>
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	4602      	mov	r2, r0
 800924e:	4629      	mov	r1, r5
 8009250:	4620      	mov	r0, r4
 8009252:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009256:	f000 f91d 	bl	8009494 <_Bfree>
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800925e:	9d01      	ldr	r5, [sp, #4]
 8009260:	ea43 0102 	orr.w	r1, r3, r2
 8009264:	9b06      	ldr	r3, [sp, #24]
 8009266:	430b      	orrs	r3, r1
 8009268:	9b08      	ldr	r3, [sp, #32]
 800926a:	d10d      	bne.n	8009288 <_dtoa_r+0xa80>
 800926c:	2b39      	cmp	r3, #57	; 0x39
 800926e:	d029      	beq.n	80092c4 <_dtoa_r+0xabc>
 8009270:	f1b9 0f00 	cmp.w	r9, #0
 8009274:	dd01      	ble.n	800927a <_dtoa_r+0xa72>
 8009276:	9b04      	ldr	r3, [sp, #16]
 8009278:	3331      	adds	r3, #49	; 0x31
 800927a:	9a02      	ldr	r2, [sp, #8]
 800927c:	7013      	strb	r3, [r2, #0]
 800927e:	e774      	b.n	800916a <_dtoa_r+0x962>
 8009280:	4638      	mov	r0, r7
 8009282:	e7b9      	b.n	80091f8 <_dtoa_r+0x9f0>
 8009284:	2201      	movs	r2, #1
 8009286:	e7e2      	b.n	800924e <_dtoa_r+0xa46>
 8009288:	f1b9 0f00 	cmp.w	r9, #0
 800928c:	db06      	blt.n	800929c <_dtoa_r+0xa94>
 800928e:	9905      	ldr	r1, [sp, #20]
 8009290:	ea41 0909 	orr.w	r9, r1, r9
 8009294:	9906      	ldr	r1, [sp, #24]
 8009296:	ea59 0101 	orrs.w	r1, r9, r1
 800929a:	d120      	bne.n	80092de <_dtoa_r+0xad6>
 800929c:	2a00      	cmp	r2, #0
 800929e:	ddec      	ble.n	800927a <_dtoa_r+0xa72>
 80092a0:	4659      	mov	r1, fp
 80092a2:	2201      	movs	r2, #1
 80092a4:	4620      	mov	r0, r4
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	f000 fac6 	bl	8009838 <__lshift>
 80092ac:	4631      	mov	r1, r6
 80092ae:	4683      	mov	fp, r0
 80092b0:	f000 fb2e 	bl	8009910 <__mcmp>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	dc02      	bgt.n	80092c0 <_dtoa_r+0xab8>
 80092ba:	d1de      	bne.n	800927a <_dtoa_r+0xa72>
 80092bc:	07da      	lsls	r2, r3, #31
 80092be:	d5dc      	bpl.n	800927a <_dtoa_r+0xa72>
 80092c0:	2b39      	cmp	r3, #57	; 0x39
 80092c2:	d1d8      	bne.n	8009276 <_dtoa_r+0xa6e>
 80092c4:	9a02      	ldr	r2, [sp, #8]
 80092c6:	2339      	movs	r3, #57	; 0x39
 80092c8:	7013      	strb	r3, [r2, #0]
 80092ca:	462b      	mov	r3, r5
 80092cc:	461d      	mov	r5, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092d4:	2a39      	cmp	r2, #57	; 0x39
 80092d6:	d050      	beq.n	800937a <_dtoa_r+0xb72>
 80092d8:	3201      	adds	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
 80092dc:	e745      	b.n	800916a <_dtoa_r+0x962>
 80092de:	2a00      	cmp	r2, #0
 80092e0:	dd03      	ble.n	80092ea <_dtoa_r+0xae2>
 80092e2:	2b39      	cmp	r3, #57	; 0x39
 80092e4:	d0ee      	beq.n	80092c4 <_dtoa_r+0xabc>
 80092e6:	3301      	adds	r3, #1
 80092e8:	e7c7      	b.n	800927a <_dtoa_r+0xa72>
 80092ea:	9a01      	ldr	r2, [sp, #4]
 80092ec:	9907      	ldr	r1, [sp, #28]
 80092ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092f2:	428a      	cmp	r2, r1
 80092f4:	d02a      	beq.n	800934c <_dtoa_r+0xb44>
 80092f6:	4659      	mov	r1, fp
 80092f8:	2300      	movs	r3, #0
 80092fa:	220a      	movs	r2, #10
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 f8eb 	bl	80094d8 <__multadd>
 8009302:	45b8      	cmp	r8, r7
 8009304:	4683      	mov	fp, r0
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	f04f 020a 	mov.w	r2, #10
 800930e:	4641      	mov	r1, r8
 8009310:	4620      	mov	r0, r4
 8009312:	d107      	bne.n	8009324 <_dtoa_r+0xb1c>
 8009314:	f000 f8e0 	bl	80094d8 <__multadd>
 8009318:	4680      	mov	r8, r0
 800931a:	4607      	mov	r7, r0
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	3301      	adds	r3, #1
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	e775      	b.n	8009210 <_dtoa_r+0xa08>
 8009324:	f000 f8d8 	bl	80094d8 <__multadd>
 8009328:	4639      	mov	r1, r7
 800932a:	4680      	mov	r8, r0
 800932c:	2300      	movs	r3, #0
 800932e:	220a      	movs	r2, #10
 8009330:	4620      	mov	r0, r4
 8009332:	f000 f8d1 	bl	80094d8 <__multadd>
 8009336:	4607      	mov	r7, r0
 8009338:	e7f0      	b.n	800931c <_dtoa_r+0xb14>
 800933a:	f1b9 0f00 	cmp.w	r9, #0
 800933e:	9a00      	ldr	r2, [sp, #0]
 8009340:	bfcc      	ite	gt
 8009342:	464d      	movgt	r5, r9
 8009344:	2501      	movle	r5, #1
 8009346:	4415      	add	r5, r2
 8009348:	f04f 0800 	mov.w	r8, #0
 800934c:	4659      	mov	r1, fp
 800934e:	2201      	movs	r2, #1
 8009350:	4620      	mov	r0, r4
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	f000 fa70 	bl	8009838 <__lshift>
 8009358:	4631      	mov	r1, r6
 800935a:	4683      	mov	fp, r0
 800935c:	f000 fad8 	bl	8009910 <__mcmp>
 8009360:	2800      	cmp	r0, #0
 8009362:	dcb2      	bgt.n	80092ca <_dtoa_r+0xac2>
 8009364:	d102      	bne.n	800936c <_dtoa_r+0xb64>
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	07db      	lsls	r3, r3, #31
 800936a:	d4ae      	bmi.n	80092ca <_dtoa_r+0xac2>
 800936c:	462b      	mov	r3, r5
 800936e:	461d      	mov	r5, r3
 8009370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009374:	2a30      	cmp	r2, #48	; 0x30
 8009376:	d0fa      	beq.n	800936e <_dtoa_r+0xb66>
 8009378:	e6f7      	b.n	800916a <_dtoa_r+0x962>
 800937a:	9a00      	ldr	r2, [sp, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d1a5      	bne.n	80092cc <_dtoa_r+0xac4>
 8009380:	f10a 0a01 	add.w	sl, sl, #1
 8009384:	2331      	movs	r3, #49	; 0x31
 8009386:	e779      	b.n	800927c <_dtoa_r+0xa74>
 8009388:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <_dtoa_r+0xbd0>)
 800938a:	f7ff baaf 	b.w	80088ec <_dtoa_r+0xe4>
 800938e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009390:	2b00      	cmp	r3, #0
 8009392:	f47f aa86 	bne.w	80088a2 <_dtoa_r+0x9a>
 8009396:	4b11      	ldr	r3, [pc, #68]	; (80093dc <_dtoa_r+0xbd4>)
 8009398:	f7ff baa8 	b.w	80088ec <_dtoa_r+0xe4>
 800939c:	f1b9 0f00 	cmp.w	r9, #0
 80093a0:	dc03      	bgt.n	80093aa <_dtoa_r+0xba2>
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	f73f aec9 	bgt.w	800913c <_dtoa_r+0x934>
 80093aa:	9d00      	ldr	r5, [sp, #0]
 80093ac:	4631      	mov	r1, r6
 80093ae:	4658      	mov	r0, fp
 80093b0:	f7ff f99e 	bl	80086f0 <quorem>
 80093b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093b8:	f805 3b01 	strb.w	r3, [r5], #1
 80093bc:	9a00      	ldr	r2, [sp, #0]
 80093be:	1aaa      	subs	r2, r5, r2
 80093c0:	4591      	cmp	r9, r2
 80093c2:	ddba      	ble.n	800933a <_dtoa_r+0xb32>
 80093c4:	4659      	mov	r1, fp
 80093c6:	2300      	movs	r3, #0
 80093c8:	220a      	movs	r2, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 f884 	bl	80094d8 <__multadd>
 80093d0:	4683      	mov	fp, r0
 80093d2:	e7eb      	b.n	80093ac <_dtoa_r+0xba4>
 80093d4:	0800db9f 	.word	0x0800db9f
 80093d8:	0800daf8 	.word	0x0800daf8
 80093dc:	0800db1c 	.word	0x0800db1c

080093e0 <_localeconv_r>:
 80093e0:	4800      	ldr	r0, [pc, #0]	; (80093e4 <_localeconv_r+0x4>)
 80093e2:	4770      	bx	lr
 80093e4:	20000168 	.word	0x20000168

080093e8 <malloc>:
 80093e8:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <malloc+0xc>)
 80093ea:	4601      	mov	r1, r0
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f000 bbef 	b.w	8009bd0 <_malloc_r>
 80093f2:	bf00      	nop
 80093f4:	20000014 	.word	0x20000014

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940e:	4291      	cmp	r1, r2
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <_Balloc>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009418:	4604      	mov	r4, r0
 800941a:	460d      	mov	r5, r1
 800941c:	b976      	cbnz	r6, 800943c <_Balloc+0x28>
 800941e:	2010      	movs	r0, #16
 8009420:	f7ff ffe2 	bl	80093e8 <malloc>
 8009424:	4602      	mov	r2, r0
 8009426:	6260      	str	r0, [r4, #36]	; 0x24
 8009428:	b920      	cbnz	r0, 8009434 <_Balloc+0x20>
 800942a:	4b18      	ldr	r3, [pc, #96]	; (800948c <_Balloc+0x78>)
 800942c:	4818      	ldr	r0, [pc, #96]	; (8009490 <_Balloc+0x7c>)
 800942e:	2166      	movs	r1, #102	; 0x66
 8009430:	f000 fd94 	bl	8009f5c <__assert_func>
 8009434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009438:	6006      	str	r6, [r0, #0]
 800943a:	60c6      	str	r6, [r0, #12]
 800943c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800943e:	68f3      	ldr	r3, [r6, #12]
 8009440:	b183      	cbz	r3, 8009464 <_Balloc+0x50>
 8009442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800944a:	b9b8      	cbnz	r0, 800947c <_Balloc+0x68>
 800944c:	2101      	movs	r1, #1
 800944e:	fa01 f605 	lsl.w	r6, r1, r5
 8009452:	1d72      	adds	r2, r6, #5
 8009454:	0092      	lsls	r2, r2, #2
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fb5a 	bl	8009b10 <_calloc_r>
 800945c:	b160      	cbz	r0, 8009478 <_Balloc+0x64>
 800945e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009462:	e00e      	b.n	8009482 <_Balloc+0x6e>
 8009464:	2221      	movs	r2, #33	; 0x21
 8009466:	2104      	movs	r1, #4
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fb51 	bl	8009b10 <_calloc_r>
 800946e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009470:	60f0      	str	r0, [r6, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e4      	bne.n	8009442 <_Balloc+0x2e>
 8009478:	2000      	movs	r0, #0
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	6802      	ldr	r2, [r0, #0]
 800947e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009482:	2300      	movs	r3, #0
 8009484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009488:	e7f7      	b.n	800947a <_Balloc+0x66>
 800948a:	bf00      	nop
 800948c:	0800db29 	.word	0x0800db29
 8009490:	0800dbb0 	.word	0x0800dbb0

08009494 <_Bfree>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009498:	4605      	mov	r5, r0
 800949a:	460c      	mov	r4, r1
 800949c:	b976      	cbnz	r6, 80094bc <_Bfree+0x28>
 800949e:	2010      	movs	r0, #16
 80094a0:	f7ff ffa2 	bl	80093e8 <malloc>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6268      	str	r0, [r5, #36]	; 0x24
 80094a8:	b920      	cbnz	r0, 80094b4 <_Bfree+0x20>
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <_Bfree+0x3c>)
 80094ac:	4809      	ldr	r0, [pc, #36]	; (80094d4 <_Bfree+0x40>)
 80094ae:	218a      	movs	r1, #138	; 0x8a
 80094b0:	f000 fd54 	bl	8009f5c <__assert_func>
 80094b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b8:	6006      	str	r6, [r0, #0]
 80094ba:	60c6      	str	r6, [r0, #12]
 80094bc:	b13c      	cbz	r4, 80094ce <_Bfree+0x3a>
 80094be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094c0:	6862      	ldr	r2, [r4, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c8:	6021      	str	r1, [r4, #0]
 80094ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	0800db29 	.word	0x0800db29
 80094d4:	0800dbb0 	.word	0x0800dbb0

080094d8 <__multadd>:
 80094d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	690e      	ldr	r6, [r1, #16]
 80094de:	4607      	mov	r7, r0
 80094e0:	4698      	mov	r8, r3
 80094e2:	460c      	mov	r4, r1
 80094e4:	f101 0014 	add.w	r0, r1, #20
 80094e8:	2300      	movs	r3, #0
 80094ea:	6805      	ldr	r5, [r0, #0]
 80094ec:	b2a9      	uxth	r1, r5
 80094ee:	fb02 8101 	mla	r1, r2, r1, r8
 80094f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80094f6:	0c2d      	lsrs	r5, r5, #16
 80094f8:	fb02 c505 	mla	r5, r2, r5, ip
 80094fc:	b289      	uxth	r1, r1
 80094fe:	3301      	adds	r3, #1
 8009500:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009504:	429e      	cmp	r6, r3
 8009506:	f840 1b04 	str.w	r1, [r0], #4
 800950a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800950e:	dcec      	bgt.n	80094ea <__multadd+0x12>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d022      	beq.n	800955c <__multadd+0x84>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	42b3      	cmp	r3, r6
 800951a:	dc19      	bgt.n	8009550 <__multadd+0x78>
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	4638      	mov	r0, r7
 8009520:	3101      	adds	r1, #1
 8009522:	f7ff ff77 	bl	8009414 <_Balloc>
 8009526:	4605      	mov	r5, r0
 8009528:	b928      	cbnz	r0, 8009536 <__multadd+0x5e>
 800952a:	4602      	mov	r2, r0
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <__multadd+0x8c>)
 800952e:	480e      	ldr	r0, [pc, #56]	; (8009568 <__multadd+0x90>)
 8009530:	21b5      	movs	r1, #181	; 0xb5
 8009532:	f000 fd13 	bl	8009f5c <__assert_func>
 8009536:	6922      	ldr	r2, [r4, #16]
 8009538:	3202      	adds	r2, #2
 800953a:	f104 010c 	add.w	r1, r4, #12
 800953e:	0092      	lsls	r2, r2, #2
 8009540:	300c      	adds	r0, #12
 8009542:	f7ff ff59 	bl	80093f8 <memcpy>
 8009546:	4621      	mov	r1, r4
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ffa3 	bl	8009494 <_Bfree>
 800954e:	462c      	mov	r4, r5
 8009550:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009554:	3601      	adds	r6, #1
 8009556:	f8c3 8014 	str.w	r8, [r3, #20]
 800955a:	6126      	str	r6, [r4, #16]
 800955c:	4620      	mov	r0, r4
 800955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009562:	bf00      	nop
 8009564:	0800db9f 	.word	0x0800db9f
 8009568:	0800dbb0 	.word	0x0800dbb0

0800956c <__hi0bits>:
 800956c:	0c03      	lsrs	r3, r0, #16
 800956e:	041b      	lsls	r3, r3, #16
 8009570:	b9d3      	cbnz	r3, 80095a8 <__hi0bits+0x3c>
 8009572:	0400      	lsls	r0, r0, #16
 8009574:	2310      	movs	r3, #16
 8009576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800957a:	bf04      	itt	eq
 800957c:	0200      	lsleq	r0, r0, #8
 800957e:	3308      	addeq	r3, #8
 8009580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009584:	bf04      	itt	eq
 8009586:	0100      	lsleq	r0, r0, #4
 8009588:	3304      	addeq	r3, #4
 800958a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800958e:	bf04      	itt	eq
 8009590:	0080      	lsleq	r0, r0, #2
 8009592:	3302      	addeq	r3, #2
 8009594:	2800      	cmp	r0, #0
 8009596:	db05      	blt.n	80095a4 <__hi0bits+0x38>
 8009598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800959c:	f103 0301 	add.w	r3, r3, #1
 80095a0:	bf08      	it	eq
 80095a2:	2320      	moveq	r3, #32
 80095a4:	4618      	mov	r0, r3
 80095a6:	4770      	bx	lr
 80095a8:	2300      	movs	r3, #0
 80095aa:	e7e4      	b.n	8009576 <__hi0bits+0xa>

080095ac <__lo0bits>:
 80095ac:	6803      	ldr	r3, [r0, #0]
 80095ae:	f013 0207 	ands.w	r2, r3, #7
 80095b2:	4601      	mov	r1, r0
 80095b4:	d00b      	beq.n	80095ce <__lo0bits+0x22>
 80095b6:	07da      	lsls	r2, r3, #31
 80095b8:	d424      	bmi.n	8009604 <__lo0bits+0x58>
 80095ba:	0798      	lsls	r0, r3, #30
 80095bc:	bf49      	itett	mi
 80095be:	085b      	lsrmi	r3, r3, #1
 80095c0:	089b      	lsrpl	r3, r3, #2
 80095c2:	2001      	movmi	r0, #1
 80095c4:	600b      	strmi	r3, [r1, #0]
 80095c6:	bf5c      	itt	pl
 80095c8:	600b      	strpl	r3, [r1, #0]
 80095ca:	2002      	movpl	r0, #2
 80095cc:	4770      	bx	lr
 80095ce:	b298      	uxth	r0, r3
 80095d0:	b9b0      	cbnz	r0, 8009600 <__lo0bits+0x54>
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	2010      	movs	r0, #16
 80095d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095da:	bf04      	itt	eq
 80095dc:	0a1b      	lsreq	r3, r3, #8
 80095de:	3008      	addeq	r0, #8
 80095e0:	071a      	lsls	r2, r3, #28
 80095e2:	bf04      	itt	eq
 80095e4:	091b      	lsreq	r3, r3, #4
 80095e6:	3004      	addeq	r0, #4
 80095e8:	079a      	lsls	r2, r3, #30
 80095ea:	bf04      	itt	eq
 80095ec:	089b      	lsreq	r3, r3, #2
 80095ee:	3002      	addeq	r0, #2
 80095f0:	07da      	lsls	r2, r3, #31
 80095f2:	d403      	bmi.n	80095fc <__lo0bits+0x50>
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	f100 0001 	add.w	r0, r0, #1
 80095fa:	d005      	beq.n	8009608 <__lo0bits+0x5c>
 80095fc:	600b      	str	r3, [r1, #0]
 80095fe:	4770      	bx	lr
 8009600:	4610      	mov	r0, r2
 8009602:	e7e8      	b.n	80095d6 <__lo0bits+0x2a>
 8009604:	2000      	movs	r0, #0
 8009606:	4770      	bx	lr
 8009608:	2020      	movs	r0, #32
 800960a:	4770      	bx	lr

0800960c <__i2b>:
 800960c:	b510      	push	{r4, lr}
 800960e:	460c      	mov	r4, r1
 8009610:	2101      	movs	r1, #1
 8009612:	f7ff feff 	bl	8009414 <_Balloc>
 8009616:	4602      	mov	r2, r0
 8009618:	b928      	cbnz	r0, 8009626 <__i2b+0x1a>
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <__i2b+0x24>)
 800961c:	4805      	ldr	r0, [pc, #20]	; (8009634 <__i2b+0x28>)
 800961e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009622:	f000 fc9b 	bl	8009f5c <__assert_func>
 8009626:	2301      	movs	r3, #1
 8009628:	6144      	str	r4, [r0, #20]
 800962a:	6103      	str	r3, [r0, #16]
 800962c:	bd10      	pop	{r4, pc}
 800962e:	bf00      	nop
 8009630:	0800db9f 	.word	0x0800db9f
 8009634:	0800dbb0 	.word	0x0800dbb0

08009638 <__multiply>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	4614      	mov	r4, r2
 800963e:	690a      	ldr	r2, [r1, #16]
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	bfb8      	it	lt
 8009646:	460b      	movlt	r3, r1
 8009648:	460d      	mov	r5, r1
 800964a:	bfbc      	itt	lt
 800964c:	4625      	movlt	r5, r4
 800964e:	461c      	movlt	r4, r3
 8009650:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009654:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009658:	68ab      	ldr	r3, [r5, #8]
 800965a:	6869      	ldr	r1, [r5, #4]
 800965c:	eb0a 0709 	add.w	r7, sl, r9
 8009660:	42bb      	cmp	r3, r7
 8009662:	b085      	sub	sp, #20
 8009664:	bfb8      	it	lt
 8009666:	3101      	addlt	r1, #1
 8009668:	f7ff fed4 	bl	8009414 <_Balloc>
 800966c:	b930      	cbnz	r0, 800967c <__multiply+0x44>
 800966e:	4602      	mov	r2, r0
 8009670:	4b42      	ldr	r3, [pc, #264]	; (800977c <__multiply+0x144>)
 8009672:	4843      	ldr	r0, [pc, #268]	; (8009780 <__multiply+0x148>)
 8009674:	f240 115d 	movw	r1, #349	; 0x15d
 8009678:	f000 fc70 	bl	8009f5c <__assert_func>
 800967c:	f100 0614 	add.w	r6, r0, #20
 8009680:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009684:	4633      	mov	r3, r6
 8009686:	2200      	movs	r2, #0
 8009688:	4543      	cmp	r3, r8
 800968a:	d31e      	bcc.n	80096ca <__multiply+0x92>
 800968c:	f105 0c14 	add.w	ip, r5, #20
 8009690:	f104 0314 	add.w	r3, r4, #20
 8009694:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009698:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800969c:	9202      	str	r2, [sp, #8]
 800969e:	ebac 0205 	sub.w	r2, ip, r5
 80096a2:	3a15      	subs	r2, #21
 80096a4:	f022 0203 	bic.w	r2, r2, #3
 80096a8:	3204      	adds	r2, #4
 80096aa:	f105 0115 	add.w	r1, r5, #21
 80096ae:	458c      	cmp	ip, r1
 80096b0:	bf38      	it	cc
 80096b2:	2204      	movcc	r2, #4
 80096b4:	9201      	str	r2, [sp, #4]
 80096b6:	9a02      	ldr	r2, [sp, #8]
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d808      	bhi.n	80096d0 <__multiply+0x98>
 80096be:	2f00      	cmp	r7, #0
 80096c0:	dc55      	bgt.n	800976e <__multiply+0x136>
 80096c2:	6107      	str	r7, [r0, #16]
 80096c4:	b005      	add	sp, #20
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	f843 2b04 	str.w	r2, [r3], #4
 80096ce:	e7db      	b.n	8009688 <__multiply+0x50>
 80096d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80096d4:	f1ba 0f00 	cmp.w	sl, #0
 80096d8:	d020      	beq.n	800971c <__multiply+0xe4>
 80096da:	f105 0e14 	add.w	lr, r5, #20
 80096de:	46b1      	mov	r9, r6
 80096e0:	2200      	movs	r2, #0
 80096e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096e6:	f8d9 b000 	ldr.w	fp, [r9]
 80096ea:	b2a1      	uxth	r1, r4
 80096ec:	fa1f fb8b 	uxth.w	fp, fp
 80096f0:	fb0a b101 	mla	r1, sl, r1, fp
 80096f4:	4411      	add	r1, r2
 80096f6:	f8d9 2000 	ldr.w	r2, [r9]
 80096fa:	0c24      	lsrs	r4, r4, #16
 80096fc:	0c12      	lsrs	r2, r2, #16
 80096fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8009702:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009706:	b289      	uxth	r1, r1
 8009708:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800970c:	45f4      	cmp	ip, lr
 800970e:	f849 1b04 	str.w	r1, [r9], #4
 8009712:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009716:	d8e4      	bhi.n	80096e2 <__multiply+0xaa>
 8009718:	9901      	ldr	r1, [sp, #4]
 800971a:	5072      	str	r2, [r6, r1]
 800971c:	9a03      	ldr	r2, [sp, #12]
 800971e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009722:	3304      	adds	r3, #4
 8009724:	f1b9 0f00 	cmp.w	r9, #0
 8009728:	d01f      	beq.n	800976a <__multiply+0x132>
 800972a:	6834      	ldr	r4, [r6, #0]
 800972c:	f105 0114 	add.w	r1, r5, #20
 8009730:	46b6      	mov	lr, r6
 8009732:	f04f 0a00 	mov.w	sl, #0
 8009736:	880a      	ldrh	r2, [r1, #0]
 8009738:	f8be b002 	ldrh.w	fp, [lr, #2]
 800973c:	fb09 b202 	mla	r2, r9, r2, fp
 8009740:	4492      	add	sl, r2
 8009742:	b2a4      	uxth	r4, r4
 8009744:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009748:	f84e 4b04 	str.w	r4, [lr], #4
 800974c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009750:	f8be 2000 	ldrh.w	r2, [lr]
 8009754:	0c24      	lsrs	r4, r4, #16
 8009756:	fb09 2404 	mla	r4, r9, r4, r2
 800975a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800975e:	458c      	cmp	ip, r1
 8009760:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009764:	d8e7      	bhi.n	8009736 <__multiply+0xfe>
 8009766:	9a01      	ldr	r2, [sp, #4]
 8009768:	50b4      	str	r4, [r6, r2]
 800976a:	3604      	adds	r6, #4
 800976c:	e7a3      	b.n	80096b6 <__multiply+0x7e>
 800976e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1a5      	bne.n	80096c2 <__multiply+0x8a>
 8009776:	3f01      	subs	r7, #1
 8009778:	e7a1      	b.n	80096be <__multiply+0x86>
 800977a:	bf00      	nop
 800977c:	0800db9f 	.word	0x0800db9f
 8009780:	0800dbb0 	.word	0x0800dbb0

08009784 <__pow5mult>:
 8009784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009788:	4615      	mov	r5, r2
 800978a:	f012 0203 	ands.w	r2, r2, #3
 800978e:	4606      	mov	r6, r0
 8009790:	460f      	mov	r7, r1
 8009792:	d007      	beq.n	80097a4 <__pow5mult+0x20>
 8009794:	4c25      	ldr	r4, [pc, #148]	; (800982c <__pow5mult+0xa8>)
 8009796:	3a01      	subs	r2, #1
 8009798:	2300      	movs	r3, #0
 800979a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800979e:	f7ff fe9b 	bl	80094d8 <__multadd>
 80097a2:	4607      	mov	r7, r0
 80097a4:	10ad      	asrs	r5, r5, #2
 80097a6:	d03d      	beq.n	8009824 <__pow5mult+0xa0>
 80097a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097aa:	b97c      	cbnz	r4, 80097cc <__pow5mult+0x48>
 80097ac:	2010      	movs	r0, #16
 80097ae:	f7ff fe1b 	bl	80093e8 <malloc>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6270      	str	r0, [r6, #36]	; 0x24
 80097b6:	b928      	cbnz	r0, 80097c4 <__pow5mult+0x40>
 80097b8:	4b1d      	ldr	r3, [pc, #116]	; (8009830 <__pow5mult+0xac>)
 80097ba:	481e      	ldr	r0, [pc, #120]	; (8009834 <__pow5mult+0xb0>)
 80097bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097c0:	f000 fbcc 	bl	8009f5c <__assert_func>
 80097c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c8:	6004      	str	r4, [r0, #0]
 80097ca:	60c4      	str	r4, [r0, #12]
 80097cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097d4:	b94c      	cbnz	r4, 80097ea <__pow5mult+0x66>
 80097d6:	f240 2171 	movw	r1, #625	; 0x271
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff ff16 	bl	800960c <__i2b>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097e6:	4604      	mov	r4, r0
 80097e8:	6003      	str	r3, [r0, #0]
 80097ea:	f04f 0900 	mov.w	r9, #0
 80097ee:	07eb      	lsls	r3, r5, #31
 80097f0:	d50a      	bpl.n	8009808 <__pow5mult+0x84>
 80097f2:	4639      	mov	r1, r7
 80097f4:	4622      	mov	r2, r4
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ff1e 	bl	8009638 <__multiply>
 80097fc:	4639      	mov	r1, r7
 80097fe:	4680      	mov	r8, r0
 8009800:	4630      	mov	r0, r6
 8009802:	f7ff fe47 	bl	8009494 <_Bfree>
 8009806:	4647      	mov	r7, r8
 8009808:	106d      	asrs	r5, r5, #1
 800980a:	d00b      	beq.n	8009824 <__pow5mult+0xa0>
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	b938      	cbnz	r0, 8009820 <__pow5mult+0x9c>
 8009810:	4622      	mov	r2, r4
 8009812:	4621      	mov	r1, r4
 8009814:	4630      	mov	r0, r6
 8009816:	f7ff ff0f 	bl	8009638 <__multiply>
 800981a:	6020      	str	r0, [r4, #0]
 800981c:	f8c0 9000 	str.w	r9, [r0]
 8009820:	4604      	mov	r4, r0
 8009822:	e7e4      	b.n	80097ee <__pow5mult+0x6a>
 8009824:	4638      	mov	r0, r7
 8009826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982a:	bf00      	nop
 800982c:	0800dd00 	.word	0x0800dd00
 8009830:	0800db29 	.word	0x0800db29
 8009834:	0800dbb0 	.word	0x0800dbb0

08009838 <__lshift>:
 8009838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	460c      	mov	r4, r1
 800983e:	6849      	ldr	r1, [r1, #4]
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	4607      	mov	r7, r0
 800984a:	4691      	mov	r9, r2
 800984c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009850:	f108 0601 	add.w	r6, r8, #1
 8009854:	42b3      	cmp	r3, r6
 8009856:	db0b      	blt.n	8009870 <__lshift+0x38>
 8009858:	4638      	mov	r0, r7
 800985a:	f7ff fddb 	bl	8009414 <_Balloc>
 800985e:	4605      	mov	r5, r0
 8009860:	b948      	cbnz	r0, 8009876 <__lshift+0x3e>
 8009862:	4602      	mov	r2, r0
 8009864:	4b28      	ldr	r3, [pc, #160]	; (8009908 <__lshift+0xd0>)
 8009866:	4829      	ldr	r0, [pc, #164]	; (800990c <__lshift+0xd4>)
 8009868:	f240 11d9 	movw	r1, #473	; 0x1d9
 800986c:	f000 fb76 	bl	8009f5c <__assert_func>
 8009870:	3101      	adds	r1, #1
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	e7ee      	b.n	8009854 <__lshift+0x1c>
 8009876:	2300      	movs	r3, #0
 8009878:	f100 0114 	add.w	r1, r0, #20
 800987c:	f100 0210 	add.w	r2, r0, #16
 8009880:	4618      	mov	r0, r3
 8009882:	4553      	cmp	r3, sl
 8009884:	db33      	blt.n	80098ee <__lshift+0xb6>
 8009886:	6920      	ldr	r0, [r4, #16]
 8009888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800988c:	f104 0314 	add.w	r3, r4, #20
 8009890:	f019 091f 	ands.w	r9, r9, #31
 8009894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800989c:	d02b      	beq.n	80098f6 <__lshift+0xbe>
 800989e:	f1c9 0e20 	rsb	lr, r9, #32
 80098a2:	468a      	mov	sl, r1
 80098a4:	2200      	movs	r2, #0
 80098a6:	6818      	ldr	r0, [r3, #0]
 80098a8:	fa00 f009 	lsl.w	r0, r0, r9
 80098ac:	4302      	orrs	r2, r0
 80098ae:	f84a 2b04 	str.w	r2, [sl], #4
 80098b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b6:	459c      	cmp	ip, r3
 80098b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80098bc:	d8f3      	bhi.n	80098a6 <__lshift+0x6e>
 80098be:	ebac 0304 	sub.w	r3, ip, r4
 80098c2:	3b15      	subs	r3, #21
 80098c4:	f023 0303 	bic.w	r3, r3, #3
 80098c8:	3304      	adds	r3, #4
 80098ca:	f104 0015 	add.w	r0, r4, #21
 80098ce:	4584      	cmp	ip, r0
 80098d0:	bf38      	it	cc
 80098d2:	2304      	movcc	r3, #4
 80098d4:	50ca      	str	r2, [r1, r3]
 80098d6:	b10a      	cbz	r2, 80098dc <__lshift+0xa4>
 80098d8:	f108 0602 	add.w	r6, r8, #2
 80098dc:	3e01      	subs	r6, #1
 80098de:	4638      	mov	r0, r7
 80098e0:	612e      	str	r6, [r5, #16]
 80098e2:	4621      	mov	r1, r4
 80098e4:	f7ff fdd6 	bl	8009494 <_Bfree>
 80098e8:	4628      	mov	r0, r5
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80098f2:	3301      	adds	r3, #1
 80098f4:	e7c5      	b.n	8009882 <__lshift+0x4a>
 80098f6:	3904      	subs	r1, #4
 80098f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009900:	459c      	cmp	ip, r3
 8009902:	d8f9      	bhi.n	80098f8 <__lshift+0xc0>
 8009904:	e7ea      	b.n	80098dc <__lshift+0xa4>
 8009906:	bf00      	nop
 8009908:	0800db9f 	.word	0x0800db9f
 800990c:	0800dbb0 	.word	0x0800dbb0

08009910 <__mcmp>:
 8009910:	b530      	push	{r4, r5, lr}
 8009912:	6902      	ldr	r2, [r0, #16]
 8009914:	690c      	ldr	r4, [r1, #16]
 8009916:	1b12      	subs	r2, r2, r4
 8009918:	d10e      	bne.n	8009938 <__mcmp+0x28>
 800991a:	f100 0314 	add.w	r3, r0, #20
 800991e:	3114      	adds	r1, #20
 8009920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800992c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009930:	42a5      	cmp	r5, r4
 8009932:	d003      	beq.n	800993c <__mcmp+0x2c>
 8009934:	d305      	bcc.n	8009942 <__mcmp+0x32>
 8009936:	2201      	movs	r2, #1
 8009938:	4610      	mov	r0, r2
 800993a:	bd30      	pop	{r4, r5, pc}
 800993c:	4283      	cmp	r3, r0
 800993e:	d3f3      	bcc.n	8009928 <__mcmp+0x18>
 8009940:	e7fa      	b.n	8009938 <__mcmp+0x28>
 8009942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009946:	e7f7      	b.n	8009938 <__mcmp+0x28>

08009948 <__mdiff>:
 8009948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	460c      	mov	r4, r1
 800994e:	4606      	mov	r6, r0
 8009950:	4611      	mov	r1, r2
 8009952:	4620      	mov	r0, r4
 8009954:	4617      	mov	r7, r2
 8009956:	f7ff ffdb 	bl	8009910 <__mcmp>
 800995a:	1e05      	subs	r5, r0, #0
 800995c:	d110      	bne.n	8009980 <__mdiff+0x38>
 800995e:	4629      	mov	r1, r5
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff fd57 	bl	8009414 <_Balloc>
 8009966:	b930      	cbnz	r0, 8009976 <__mdiff+0x2e>
 8009968:	4b39      	ldr	r3, [pc, #228]	; (8009a50 <__mdiff+0x108>)
 800996a:	4602      	mov	r2, r0
 800996c:	f240 2132 	movw	r1, #562	; 0x232
 8009970:	4838      	ldr	r0, [pc, #224]	; (8009a54 <__mdiff+0x10c>)
 8009972:	f000 faf3 	bl	8009f5c <__assert_func>
 8009976:	2301      	movs	r3, #1
 8009978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800997c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009980:	bfa4      	itt	ge
 8009982:	463b      	movge	r3, r7
 8009984:	4627      	movge	r7, r4
 8009986:	4630      	mov	r0, r6
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	bfa6      	itte	ge
 800998c:	461c      	movge	r4, r3
 800998e:	2500      	movge	r5, #0
 8009990:	2501      	movlt	r5, #1
 8009992:	f7ff fd3f 	bl	8009414 <_Balloc>
 8009996:	b920      	cbnz	r0, 80099a2 <__mdiff+0x5a>
 8009998:	4b2d      	ldr	r3, [pc, #180]	; (8009a50 <__mdiff+0x108>)
 800999a:	4602      	mov	r2, r0
 800999c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099a0:	e7e6      	b.n	8009970 <__mdiff+0x28>
 80099a2:	693e      	ldr	r6, [r7, #16]
 80099a4:	60c5      	str	r5, [r0, #12]
 80099a6:	6925      	ldr	r5, [r4, #16]
 80099a8:	f107 0114 	add.w	r1, r7, #20
 80099ac:	f104 0914 	add.w	r9, r4, #20
 80099b0:	f100 0e14 	add.w	lr, r0, #20
 80099b4:	f107 0210 	add.w	r2, r7, #16
 80099b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099c0:	46f2      	mov	sl, lr
 80099c2:	2700      	movs	r7, #0
 80099c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80099c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099cc:	fa1f f883 	uxth.w	r8, r3
 80099d0:	fa17 f78b 	uxtah	r7, r7, fp
 80099d4:	0c1b      	lsrs	r3, r3, #16
 80099d6:	eba7 0808 	sub.w	r8, r7, r8
 80099da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099e2:	fa1f f888 	uxth.w	r8, r8
 80099e6:	141f      	asrs	r7, r3, #16
 80099e8:	454d      	cmp	r5, r9
 80099ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099ee:	f84a 3b04 	str.w	r3, [sl], #4
 80099f2:	d8e7      	bhi.n	80099c4 <__mdiff+0x7c>
 80099f4:	1b2b      	subs	r3, r5, r4
 80099f6:	3b15      	subs	r3, #21
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	3304      	adds	r3, #4
 80099fe:	3415      	adds	r4, #21
 8009a00:	42a5      	cmp	r5, r4
 8009a02:	bf38      	it	cc
 8009a04:	2304      	movcc	r3, #4
 8009a06:	4419      	add	r1, r3
 8009a08:	4473      	add	r3, lr
 8009a0a:	469e      	mov	lr, r3
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	4565      	cmp	r5, ip
 8009a10:	d30e      	bcc.n	8009a30 <__mdiff+0xe8>
 8009a12:	f10c 0203 	add.w	r2, ip, #3
 8009a16:	1a52      	subs	r2, r2, r1
 8009a18:	f022 0203 	bic.w	r2, r2, #3
 8009a1c:	3903      	subs	r1, #3
 8009a1e:	458c      	cmp	ip, r1
 8009a20:	bf38      	it	cc
 8009a22:	2200      	movcc	r2, #0
 8009a24:	441a      	add	r2, r3
 8009a26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a2a:	b17b      	cbz	r3, 8009a4c <__mdiff+0x104>
 8009a2c:	6106      	str	r6, [r0, #16]
 8009a2e:	e7a5      	b.n	800997c <__mdiff+0x34>
 8009a30:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a34:	fa17 f488 	uxtah	r4, r7, r8
 8009a38:	1422      	asrs	r2, r4, #16
 8009a3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a3e:	b2a4      	uxth	r4, r4
 8009a40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a44:	f84e 4b04 	str.w	r4, [lr], #4
 8009a48:	1417      	asrs	r7, r2, #16
 8009a4a:	e7e0      	b.n	8009a0e <__mdiff+0xc6>
 8009a4c:	3e01      	subs	r6, #1
 8009a4e:	e7ea      	b.n	8009a26 <__mdiff+0xde>
 8009a50:	0800db9f 	.word	0x0800db9f
 8009a54:	0800dbb0 	.word	0x0800dbb0

08009a58 <__d2b>:
 8009a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	4689      	mov	r9, r1
 8009a5e:	2101      	movs	r1, #1
 8009a60:	ec57 6b10 	vmov	r6, r7, d0
 8009a64:	4690      	mov	r8, r2
 8009a66:	f7ff fcd5 	bl	8009414 <_Balloc>
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	b930      	cbnz	r0, 8009a7c <__d2b+0x24>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <__d2b+0xb0>)
 8009a72:	4826      	ldr	r0, [pc, #152]	; (8009b0c <__d2b+0xb4>)
 8009a74:	f240 310a 	movw	r1, #778	; 0x30a
 8009a78:	f000 fa70 	bl	8009f5c <__assert_func>
 8009a7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a84:	bb35      	cbnz	r5, 8009ad4 <__d2b+0x7c>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	d028      	beq.n	8009ade <__d2b+0x86>
 8009a8c:	4668      	mov	r0, sp
 8009a8e:	9600      	str	r6, [sp, #0]
 8009a90:	f7ff fd8c 	bl	80095ac <__lo0bits>
 8009a94:	9900      	ldr	r1, [sp, #0]
 8009a96:	b300      	cbz	r0, 8009ada <__d2b+0x82>
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	f1c0 0320 	rsb	r3, r0, #32
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	40c2      	lsrs	r2, r0
 8009aa6:	6163      	str	r3, [r4, #20]
 8009aa8:	9201      	str	r2, [sp, #4]
 8009aaa:	9b01      	ldr	r3, [sp, #4]
 8009aac:	61a3      	str	r3, [r4, #24]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bf14      	ite	ne
 8009ab2:	2202      	movne	r2, #2
 8009ab4:	2201      	moveq	r2, #1
 8009ab6:	6122      	str	r2, [r4, #16]
 8009ab8:	b1d5      	cbz	r5, 8009af0 <__d2b+0x98>
 8009aba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009abe:	4405      	add	r5, r0
 8009ac0:	f8c9 5000 	str.w	r5, [r9]
 8009ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ac8:	f8c8 0000 	str.w	r0, [r8]
 8009acc:	4620      	mov	r0, r4
 8009ace:	b003      	add	sp, #12
 8009ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad8:	e7d5      	b.n	8009a86 <__d2b+0x2e>
 8009ada:	6161      	str	r1, [r4, #20]
 8009adc:	e7e5      	b.n	8009aaa <__d2b+0x52>
 8009ade:	a801      	add	r0, sp, #4
 8009ae0:	f7ff fd64 	bl	80095ac <__lo0bits>
 8009ae4:	9b01      	ldr	r3, [sp, #4]
 8009ae6:	6163      	str	r3, [r4, #20]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	6122      	str	r2, [r4, #16]
 8009aec:	3020      	adds	r0, #32
 8009aee:	e7e3      	b.n	8009ab8 <__d2b+0x60>
 8009af0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009af8:	f8c9 0000 	str.w	r0, [r9]
 8009afc:	6918      	ldr	r0, [r3, #16]
 8009afe:	f7ff fd35 	bl	800956c <__hi0bits>
 8009b02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b06:	e7df      	b.n	8009ac8 <__d2b+0x70>
 8009b08:	0800db9f 	.word	0x0800db9f
 8009b0c:	0800dbb0 	.word	0x0800dbb0

08009b10 <_calloc_r>:
 8009b10:	b513      	push	{r0, r1, r4, lr}
 8009b12:	434a      	muls	r2, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	9201      	str	r2, [sp, #4]
 8009b18:	f000 f85a 	bl	8009bd0 <_malloc_r>
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	b118      	cbz	r0, 8009b28 <_calloc_r+0x18>
 8009b20:	9a01      	ldr	r2, [sp, #4]
 8009b22:	2100      	movs	r1, #0
 8009b24:	f7fe f952 	bl	8007dcc <memset>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	b002      	add	sp, #8
 8009b2c:	bd10      	pop	{r4, pc}
	...

08009b30 <_free_r>:
 8009b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b32:	2900      	cmp	r1, #0
 8009b34:	d048      	beq.n	8009bc8 <_free_r+0x98>
 8009b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b3a:	9001      	str	r0, [sp, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b42:	bfb8      	it	lt
 8009b44:	18e4      	addlt	r4, r4, r3
 8009b46:	f000 fa65 	bl	800a014 <__malloc_lock>
 8009b4a:	4a20      	ldr	r2, [pc, #128]	; (8009bcc <_free_r+0x9c>)
 8009b4c:	9801      	ldr	r0, [sp, #4]
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	4615      	mov	r5, r2
 8009b52:	b933      	cbnz	r3, 8009b62 <_free_r+0x32>
 8009b54:	6063      	str	r3, [r4, #4]
 8009b56:	6014      	str	r4, [r2, #0]
 8009b58:	b003      	add	sp, #12
 8009b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b5e:	f000 ba5f 	b.w	800a020 <__malloc_unlock>
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	d90b      	bls.n	8009b7e <_free_r+0x4e>
 8009b66:	6821      	ldr	r1, [r4, #0]
 8009b68:	1862      	adds	r2, r4, r1
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	bf04      	itt	eq
 8009b6e:	681a      	ldreq	r2, [r3, #0]
 8009b70:	685b      	ldreq	r3, [r3, #4]
 8009b72:	6063      	str	r3, [r4, #4]
 8009b74:	bf04      	itt	eq
 8009b76:	1852      	addeq	r2, r2, r1
 8009b78:	6022      	streq	r2, [r4, #0]
 8009b7a:	602c      	str	r4, [r5, #0]
 8009b7c:	e7ec      	b.n	8009b58 <_free_r+0x28>
 8009b7e:	461a      	mov	r2, r3
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	b10b      	cbz	r3, 8009b88 <_free_r+0x58>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d9fa      	bls.n	8009b7e <_free_r+0x4e>
 8009b88:	6811      	ldr	r1, [r2, #0]
 8009b8a:	1855      	adds	r5, r2, r1
 8009b8c:	42a5      	cmp	r5, r4
 8009b8e:	d10b      	bne.n	8009ba8 <_free_r+0x78>
 8009b90:	6824      	ldr	r4, [r4, #0]
 8009b92:	4421      	add	r1, r4
 8009b94:	1854      	adds	r4, r2, r1
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	6011      	str	r1, [r2, #0]
 8009b9a:	d1dd      	bne.n	8009b58 <_free_r+0x28>
 8009b9c:	681c      	ldr	r4, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	6053      	str	r3, [r2, #4]
 8009ba2:	4421      	add	r1, r4
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	e7d7      	b.n	8009b58 <_free_r+0x28>
 8009ba8:	d902      	bls.n	8009bb0 <_free_r+0x80>
 8009baa:	230c      	movs	r3, #12
 8009bac:	6003      	str	r3, [r0, #0]
 8009bae:	e7d3      	b.n	8009b58 <_free_r+0x28>
 8009bb0:	6825      	ldr	r5, [r4, #0]
 8009bb2:	1961      	adds	r1, r4, r5
 8009bb4:	428b      	cmp	r3, r1
 8009bb6:	bf04      	itt	eq
 8009bb8:	6819      	ldreq	r1, [r3, #0]
 8009bba:	685b      	ldreq	r3, [r3, #4]
 8009bbc:	6063      	str	r3, [r4, #4]
 8009bbe:	bf04      	itt	eq
 8009bc0:	1949      	addeq	r1, r1, r5
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	6054      	str	r4, [r2, #4]
 8009bc6:	e7c7      	b.n	8009b58 <_free_r+0x28>
 8009bc8:	b003      	add	sp, #12
 8009bca:	bd30      	pop	{r4, r5, pc}
 8009bcc:	20000224 	.word	0x20000224

08009bd0 <_malloc_r>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	1ccd      	adds	r5, r1, #3
 8009bd4:	f025 0503 	bic.w	r5, r5, #3
 8009bd8:	3508      	adds	r5, #8
 8009bda:	2d0c      	cmp	r5, #12
 8009bdc:	bf38      	it	cc
 8009bde:	250c      	movcc	r5, #12
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	4606      	mov	r6, r0
 8009be4:	db01      	blt.n	8009bea <_malloc_r+0x1a>
 8009be6:	42a9      	cmp	r1, r5
 8009be8:	d903      	bls.n	8009bf2 <_malloc_r+0x22>
 8009bea:	230c      	movs	r3, #12
 8009bec:	6033      	str	r3, [r6, #0]
 8009bee:	2000      	movs	r0, #0
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf2:	f000 fa0f 	bl	800a014 <__malloc_lock>
 8009bf6:	4921      	ldr	r1, [pc, #132]	; (8009c7c <_malloc_r+0xac>)
 8009bf8:	680a      	ldr	r2, [r1, #0]
 8009bfa:	4614      	mov	r4, r2
 8009bfc:	b99c      	cbnz	r4, 8009c26 <_malloc_r+0x56>
 8009bfe:	4f20      	ldr	r7, [pc, #128]	; (8009c80 <_malloc_r+0xb0>)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	b923      	cbnz	r3, 8009c0e <_malloc_r+0x3e>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4630      	mov	r0, r6
 8009c08:	f000 f998 	bl	8009f3c <_sbrk_r>
 8009c0c:	6038      	str	r0, [r7, #0]
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 f993 	bl	8009f3c <_sbrk_r>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d123      	bne.n	8009c62 <_malloc_r+0x92>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	6033      	str	r3, [r6, #0]
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f000 f9fe 	bl	800a020 <__malloc_unlock>
 8009c24:	e7e3      	b.n	8009bee <_malloc_r+0x1e>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	1b5b      	subs	r3, r3, r5
 8009c2a:	d417      	bmi.n	8009c5c <_malloc_r+0x8c>
 8009c2c:	2b0b      	cmp	r3, #11
 8009c2e:	d903      	bls.n	8009c38 <_malloc_r+0x68>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	441c      	add	r4, r3
 8009c34:	6025      	str	r5, [r4, #0]
 8009c36:	e004      	b.n	8009c42 <_malloc_r+0x72>
 8009c38:	6863      	ldr	r3, [r4, #4]
 8009c3a:	42a2      	cmp	r2, r4
 8009c3c:	bf0c      	ite	eq
 8009c3e:	600b      	streq	r3, [r1, #0]
 8009c40:	6053      	strne	r3, [r2, #4]
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 f9ec 	bl	800a020 <__malloc_unlock>
 8009c48:	f104 000b 	add.w	r0, r4, #11
 8009c4c:	1d23      	adds	r3, r4, #4
 8009c4e:	f020 0007 	bic.w	r0, r0, #7
 8009c52:	1ac2      	subs	r2, r0, r3
 8009c54:	d0cc      	beq.n	8009bf0 <_malloc_r+0x20>
 8009c56:	1a1b      	subs	r3, r3, r0
 8009c58:	50a3      	str	r3, [r4, r2]
 8009c5a:	e7c9      	b.n	8009bf0 <_malloc_r+0x20>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	6864      	ldr	r4, [r4, #4]
 8009c60:	e7cc      	b.n	8009bfc <_malloc_r+0x2c>
 8009c62:	1cc4      	adds	r4, r0, #3
 8009c64:	f024 0403 	bic.w	r4, r4, #3
 8009c68:	42a0      	cmp	r0, r4
 8009c6a:	d0e3      	beq.n	8009c34 <_malloc_r+0x64>
 8009c6c:	1a21      	subs	r1, r4, r0
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f000 f964 	bl	8009f3c <_sbrk_r>
 8009c74:	3001      	adds	r0, #1
 8009c76:	d1dd      	bne.n	8009c34 <_malloc_r+0x64>
 8009c78:	e7cf      	b.n	8009c1a <_malloc_r+0x4a>
 8009c7a:	bf00      	nop
 8009c7c:	20000224 	.word	0x20000224
 8009c80:	20000228 	.word	0x20000228

08009c84 <__ssputs_r>:
 8009c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c88:	688e      	ldr	r6, [r1, #8]
 8009c8a:	429e      	cmp	r6, r3
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	4690      	mov	r8, r2
 8009c92:	461f      	mov	r7, r3
 8009c94:	d838      	bhi.n	8009d08 <__ssputs_r+0x84>
 8009c96:	898a      	ldrh	r2, [r1, #12]
 8009c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c9c:	d032      	beq.n	8009d04 <__ssputs_r+0x80>
 8009c9e:	6825      	ldr	r5, [r4, #0]
 8009ca0:	6909      	ldr	r1, [r1, #16]
 8009ca2:	eba5 0901 	sub.w	r9, r5, r1
 8009ca6:	6965      	ldr	r5, [r4, #20]
 8009ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	444b      	add	r3, r9
 8009cb4:	106d      	asrs	r5, r5, #1
 8009cb6:	429d      	cmp	r5, r3
 8009cb8:	bf38      	it	cc
 8009cba:	461d      	movcc	r5, r3
 8009cbc:	0553      	lsls	r3, r2, #21
 8009cbe:	d531      	bpl.n	8009d24 <__ssputs_r+0xa0>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7ff ff85 	bl	8009bd0 <_malloc_r>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b950      	cbnz	r0, 8009ce0 <__ssputs_r+0x5c>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	f8ca 3000 	str.w	r3, [sl]
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce0:	6921      	ldr	r1, [r4, #16]
 8009ce2:	464a      	mov	r2, r9
 8009ce4:	f7ff fb88 	bl	80093f8 <memcpy>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	6126      	str	r6, [r4, #16]
 8009cf6:	6165      	str	r5, [r4, #20]
 8009cf8:	444e      	add	r6, r9
 8009cfa:	eba5 0509 	sub.w	r5, r5, r9
 8009cfe:	6026      	str	r6, [r4, #0]
 8009d00:	60a5      	str	r5, [r4, #8]
 8009d02:	463e      	mov	r6, r7
 8009d04:	42be      	cmp	r6, r7
 8009d06:	d900      	bls.n	8009d0a <__ssputs_r+0x86>
 8009d08:	463e      	mov	r6, r7
 8009d0a:	4632      	mov	r2, r6
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	4641      	mov	r1, r8
 8009d10:	f000 f966 	bl	8009fe0 <memmove>
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	1b9b      	subs	r3, r3, r6
 8009d1a:	4432      	add	r2, r6
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	6022      	str	r2, [r4, #0]
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7db      	b.n	8009cdc <__ssputs_r+0x58>
 8009d24:	462a      	mov	r2, r5
 8009d26:	f000 f981 	bl	800a02c <_realloc_r>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1e1      	bne.n	8009cf4 <__ssputs_r+0x70>
 8009d30:	6921      	ldr	r1, [r4, #16]
 8009d32:	4650      	mov	r0, sl
 8009d34:	f7ff fefc 	bl	8009b30 <_free_r>
 8009d38:	e7c7      	b.n	8009cca <__ssputs_r+0x46>
	...

08009d3c <_svfiprintf_r>:
 8009d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	4698      	mov	r8, r3
 8009d42:	898b      	ldrh	r3, [r1, #12]
 8009d44:	061b      	lsls	r3, r3, #24
 8009d46:	b09d      	sub	sp, #116	; 0x74
 8009d48:	4607      	mov	r7, r0
 8009d4a:	460d      	mov	r5, r1
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	d50e      	bpl.n	8009d6e <_svfiprintf_r+0x32>
 8009d50:	690b      	ldr	r3, [r1, #16]
 8009d52:	b963      	cbnz	r3, 8009d6e <_svfiprintf_r+0x32>
 8009d54:	2140      	movs	r1, #64	; 0x40
 8009d56:	f7ff ff3b 	bl	8009bd0 <_malloc_r>
 8009d5a:	6028      	str	r0, [r5, #0]
 8009d5c:	6128      	str	r0, [r5, #16]
 8009d5e:	b920      	cbnz	r0, 8009d6a <_svfiprintf_r+0x2e>
 8009d60:	230c      	movs	r3, #12
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d68:	e0d1      	b.n	8009f0e <_svfiprintf_r+0x1d2>
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	616b      	str	r3, [r5, #20]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9309      	str	r3, [sp, #36]	; 0x24
 8009d72:	2320      	movs	r3, #32
 8009d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d7c:	2330      	movs	r3, #48	; 0x30
 8009d7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f28 <_svfiprintf_r+0x1ec>
 8009d82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d86:	f04f 0901 	mov.w	r9, #1
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	469a      	mov	sl, r3
 8009d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d92:	b10a      	cbz	r2, 8009d98 <_svfiprintf_r+0x5c>
 8009d94:	2a25      	cmp	r2, #37	; 0x25
 8009d96:	d1f9      	bne.n	8009d8c <_svfiprintf_r+0x50>
 8009d98:	ebba 0b04 	subs.w	fp, sl, r4
 8009d9c:	d00b      	beq.n	8009db6 <_svfiprintf_r+0x7a>
 8009d9e:	465b      	mov	r3, fp
 8009da0:	4622      	mov	r2, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	4638      	mov	r0, r7
 8009da6:	f7ff ff6d 	bl	8009c84 <__ssputs_r>
 8009daa:	3001      	adds	r0, #1
 8009dac:	f000 80aa 	beq.w	8009f04 <_svfiprintf_r+0x1c8>
 8009db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009db2:	445a      	add	r2, fp
 8009db4:	9209      	str	r2, [sp, #36]	; 0x24
 8009db6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80a2 	beq.w	8009f04 <_svfiprintf_r+0x1c8>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dca:	f10a 0a01 	add.w	sl, sl, #1
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	9307      	str	r3, [sp, #28]
 8009dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd8:	4654      	mov	r4, sl
 8009dda:	2205      	movs	r2, #5
 8009ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de0:	4851      	ldr	r0, [pc, #324]	; (8009f28 <_svfiprintf_r+0x1ec>)
 8009de2:	f7f6 f9fd 	bl	80001e0 <memchr>
 8009de6:	9a04      	ldr	r2, [sp, #16]
 8009de8:	b9d8      	cbnz	r0, 8009e22 <_svfiprintf_r+0xe6>
 8009dea:	06d0      	lsls	r0, r2, #27
 8009dec:	bf44      	itt	mi
 8009dee:	2320      	movmi	r3, #32
 8009df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df4:	0711      	lsls	r1, r2, #28
 8009df6:	bf44      	itt	mi
 8009df8:	232b      	movmi	r3, #43	; 0x2b
 8009dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009e02:	2b2a      	cmp	r3, #42	; 0x2a
 8009e04:	d015      	beq.n	8009e32 <_svfiprintf_r+0xf6>
 8009e06:	9a07      	ldr	r2, [sp, #28]
 8009e08:	4654      	mov	r4, sl
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	f04f 0c0a 	mov.w	ip, #10
 8009e10:	4621      	mov	r1, r4
 8009e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e16:	3b30      	subs	r3, #48	; 0x30
 8009e18:	2b09      	cmp	r3, #9
 8009e1a:	d94e      	bls.n	8009eba <_svfiprintf_r+0x17e>
 8009e1c:	b1b0      	cbz	r0, 8009e4c <_svfiprintf_r+0x110>
 8009e1e:	9207      	str	r2, [sp, #28]
 8009e20:	e014      	b.n	8009e4c <_svfiprintf_r+0x110>
 8009e22:	eba0 0308 	sub.w	r3, r0, r8
 8009e26:	fa09 f303 	lsl.w	r3, r9, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	46a2      	mov	sl, r4
 8009e30:	e7d2      	b.n	8009dd8 <_svfiprintf_r+0x9c>
 8009e32:	9b03      	ldr	r3, [sp, #12]
 8009e34:	1d19      	adds	r1, r3, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	9103      	str	r1, [sp, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bfbb      	ittet	lt
 8009e3e:	425b      	neglt	r3, r3
 8009e40:	f042 0202 	orrlt.w	r2, r2, #2
 8009e44:	9307      	strge	r3, [sp, #28]
 8009e46:	9307      	strlt	r3, [sp, #28]
 8009e48:	bfb8      	it	lt
 8009e4a:	9204      	strlt	r2, [sp, #16]
 8009e4c:	7823      	ldrb	r3, [r4, #0]
 8009e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e50:	d10c      	bne.n	8009e6c <_svfiprintf_r+0x130>
 8009e52:	7863      	ldrb	r3, [r4, #1]
 8009e54:	2b2a      	cmp	r3, #42	; 0x2a
 8009e56:	d135      	bne.n	8009ec4 <_svfiprintf_r+0x188>
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	1d1a      	adds	r2, r3, #4
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	9203      	str	r2, [sp, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	bfb8      	it	lt
 8009e64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e68:	3402      	adds	r4, #2
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f38 <_svfiprintf_r+0x1fc>
 8009e70:	7821      	ldrb	r1, [r4, #0]
 8009e72:	2203      	movs	r2, #3
 8009e74:	4650      	mov	r0, sl
 8009e76:	f7f6 f9b3 	bl	80001e0 <memchr>
 8009e7a:	b140      	cbz	r0, 8009e8e <_svfiprintf_r+0x152>
 8009e7c:	2340      	movs	r3, #64	; 0x40
 8009e7e:	eba0 000a 	sub.w	r0, r0, sl
 8009e82:	fa03 f000 	lsl.w	r0, r3, r0
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	4303      	orrs	r3, r0
 8009e8a:	3401      	adds	r4, #1
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e92:	4826      	ldr	r0, [pc, #152]	; (8009f2c <_svfiprintf_r+0x1f0>)
 8009e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e98:	2206      	movs	r2, #6
 8009e9a:	f7f6 f9a1 	bl	80001e0 <memchr>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d038      	beq.n	8009f14 <_svfiprintf_r+0x1d8>
 8009ea2:	4b23      	ldr	r3, [pc, #140]	; (8009f30 <_svfiprintf_r+0x1f4>)
 8009ea4:	bb1b      	cbnz	r3, 8009eee <_svfiprintf_r+0x1b2>
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	3307      	adds	r3, #7
 8009eaa:	f023 0307 	bic.w	r3, r3, #7
 8009eae:	3308      	adds	r3, #8
 8009eb0:	9303      	str	r3, [sp, #12]
 8009eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb4:	4433      	add	r3, r6
 8009eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb8:	e767      	b.n	8009d8a <_svfiprintf_r+0x4e>
 8009eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	e7a5      	b.n	8009e10 <_svfiprintf_r+0xd4>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	3401      	adds	r4, #1
 8009ec8:	9305      	str	r3, [sp, #20]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	f04f 0c0a 	mov.w	ip, #10
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed6:	3a30      	subs	r2, #48	; 0x30
 8009ed8:	2a09      	cmp	r2, #9
 8009eda:	d903      	bls.n	8009ee4 <_svfiprintf_r+0x1a8>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0c5      	beq.n	8009e6c <_svfiprintf_r+0x130>
 8009ee0:	9105      	str	r1, [sp, #20]
 8009ee2:	e7c3      	b.n	8009e6c <_svfiprintf_r+0x130>
 8009ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ee8:	4604      	mov	r4, r0
 8009eea:	2301      	movs	r3, #1
 8009eec:	e7f0      	b.n	8009ed0 <_svfiprintf_r+0x194>
 8009eee:	ab03      	add	r3, sp, #12
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <_svfiprintf_r+0x1f8>)
 8009ef6:	a904      	add	r1, sp, #16
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7fe f80f 	bl	8007f1c <_printf_float>
 8009efe:	1c42      	adds	r2, r0, #1
 8009f00:	4606      	mov	r6, r0
 8009f02:	d1d6      	bne.n	8009eb2 <_svfiprintf_r+0x176>
 8009f04:	89ab      	ldrh	r3, [r5, #12]
 8009f06:	065b      	lsls	r3, r3, #25
 8009f08:	f53f af2c 	bmi.w	8009d64 <_svfiprintf_r+0x28>
 8009f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f0e:	b01d      	add	sp, #116	; 0x74
 8009f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	ab03      	add	r3, sp, #12
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <_svfiprintf_r+0x1f8>)
 8009f1c:	a904      	add	r1, sp, #16
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f7fe faa0 	bl	8008464 <_printf_i>
 8009f24:	e7eb      	b.n	8009efe <_svfiprintf_r+0x1c2>
 8009f26:	bf00      	nop
 8009f28:	0800dd0c 	.word	0x0800dd0c
 8009f2c:	0800dd16 	.word	0x0800dd16
 8009f30:	08007f1d 	.word	0x08007f1d
 8009f34:	08009c85 	.word	0x08009c85
 8009f38:	0800dd12 	.word	0x0800dd12

08009f3c <_sbrk_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d06      	ldr	r5, [pc, #24]	; (8009f58 <_sbrk_r+0x1c>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f8 fc4e 	bl	80027e8 <_sbrk>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_sbrk_r+0x1a>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_sbrk_r+0x1a>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	2000059c 	.word	0x2000059c

08009f5c <__assert_func>:
 8009f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f5e:	4614      	mov	r4, r2
 8009f60:	461a      	mov	r2, r3
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <__assert_func+0x2c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4605      	mov	r5, r0
 8009f68:	68d8      	ldr	r0, [r3, #12]
 8009f6a:	b14c      	cbz	r4, 8009f80 <__assert_func+0x24>
 8009f6c:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <__assert_func+0x30>)
 8009f6e:	9100      	str	r1, [sp, #0]
 8009f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f74:	4906      	ldr	r1, [pc, #24]	; (8009f90 <__assert_func+0x34>)
 8009f76:	462b      	mov	r3, r5
 8009f78:	f000 f80e 	bl	8009f98 <fiprintf>
 8009f7c:	f000 faa4 	bl	800a4c8 <abort>
 8009f80:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <__assert_func+0x38>)
 8009f82:	461c      	mov	r4, r3
 8009f84:	e7f3      	b.n	8009f6e <__assert_func+0x12>
 8009f86:	bf00      	nop
 8009f88:	20000014 	.word	0x20000014
 8009f8c:	0800dd1d 	.word	0x0800dd1d
 8009f90:	0800dd2a 	.word	0x0800dd2a
 8009f94:	0800dd58 	.word	0x0800dd58

08009f98 <fiprintf>:
 8009f98:	b40e      	push	{r1, r2, r3}
 8009f9a:	b503      	push	{r0, r1, lr}
 8009f9c:	4601      	mov	r1, r0
 8009f9e:	ab03      	add	r3, sp, #12
 8009fa0:	4805      	ldr	r0, [pc, #20]	; (8009fb8 <fiprintf+0x20>)
 8009fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa6:	6800      	ldr	r0, [r0, #0]
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	f000 f88f 	bl	800a0cc <_vfiprintf_r>
 8009fae:	b002      	add	sp, #8
 8009fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb4:	b003      	add	sp, #12
 8009fb6:	4770      	bx	lr
 8009fb8:	20000014 	.word	0x20000014

08009fbc <__ascii_mbtowc>:
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	b901      	cbnz	r1, 8009fc2 <__ascii_mbtowc+0x6>
 8009fc0:	a901      	add	r1, sp, #4
 8009fc2:	b142      	cbz	r2, 8009fd6 <__ascii_mbtowc+0x1a>
 8009fc4:	b14b      	cbz	r3, 8009fda <__ascii_mbtowc+0x1e>
 8009fc6:	7813      	ldrb	r3, [r2, #0]
 8009fc8:	600b      	str	r3, [r1, #0]
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	1e10      	subs	r0, r2, #0
 8009fce:	bf18      	it	ne
 8009fd0:	2001      	movne	r0, #1
 8009fd2:	b002      	add	sp, #8
 8009fd4:	4770      	bx	lr
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	e7fb      	b.n	8009fd2 <__ascii_mbtowc+0x16>
 8009fda:	f06f 0001 	mvn.w	r0, #1
 8009fde:	e7f8      	b.n	8009fd2 <__ascii_mbtowc+0x16>

08009fe0 <memmove>:
 8009fe0:	4288      	cmp	r0, r1
 8009fe2:	b510      	push	{r4, lr}
 8009fe4:	eb01 0402 	add.w	r4, r1, r2
 8009fe8:	d902      	bls.n	8009ff0 <memmove+0x10>
 8009fea:	4284      	cmp	r4, r0
 8009fec:	4623      	mov	r3, r4
 8009fee:	d807      	bhi.n	800a000 <memmove+0x20>
 8009ff0:	1e43      	subs	r3, r0, #1
 8009ff2:	42a1      	cmp	r1, r4
 8009ff4:	d008      	beq.n	800a008 <memmove+0x28>
 8009ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ffe:	e7f8      	b.n	8009ff2 <memmove+0x12>
 800a000:	4402      	add	r2, r0
 800a002:	4601      	mov	r1, r0
 800a004:	428a      	cmp	r2, r1
 800a006:	d100      	bne.n	800a00a <memmove+0x2a>
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a012:	e7f7      	b.n	800a004 <memmove+0x24>

0800a014 <__malloc_lock>:
 800a014:	4801      	ldr	r0, [pc, #4]	; (800a01c <__malloc_lock+0x8>)
 800a016:	f000 bc17 	b.w	800a848 <__retarget_lock_acquire_recursive>
 800a01a:	bf00      	nop
 800a01c:	200005a4 	.word	0x200005a4

0800a020 <__malloc_unlock>:
 800a020:	4801      	ldr	r0, [pc, #4]	; (800a028 <__malloc_unlock+0x8>)
 800a022:	f000 bc12 	b.w	800a84a <__retarget_lock_release_recursive>
 800a026:	bf00      	nop
 800a028:	200005a4 	.word	0x200005a4

0800a02c <_realloc_r>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	4607      	mov	r7, r0
 800a030:	4614      	mov	r4, r2
 800a032:	460e      	mov	r6, r1
 800a034:	b921      	cbnz	r1, 800a040 <_realloc_r+0x14>
 800a036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a03a:	4611      	mov	r1, r2
 800a03c:	f7ff bdc8 	b.w	8009bd0 <_malloc_r>
 800a040:	b922      	cbnz	r2, 800a04c <_realloc_r+0x20>
 800a042:	f7ff fd75 	bl	8009b30 <_free_r>
 800a046:	4625      	mov	r5, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04c:	f000 fc62 	bl	800a914 <_malloc_usable_size_r>
 800a050:	42a0      	cmp	r0, r4
 800a052:	d20f      	bcs.n	800a074 <_realloc_r+0x48>
 800a054:	4621      	mov	r1, r4
 800a056:	4638      	mov	r0, r7
 800a058:	f7ff fdba 	bl	8009bd0 <_malloc_r>
 800a05c:	4605      	mov	r5, r0
 800a05e:	2800      	cmp	r0, #0
 800a060:	d0f2      	beq.n	800a048 <_realloc_r+0x1c>
 800a062:	4631      	mov	r1, r6
 800a064:	4622      	mov	r2, r4
 800a066:	f7ff f9c7 	bl	80093f8 <memcpy>
 800a06a:	4631      	mov	r1, r6
 800a06c:	4638      	mov	r0, r7
 800a06e:	f7ff fd5f 	bl	8009b30 <_free_r>
 800a072:	e7e9      	b.n	800a048 <_realloc_r+0x1c>
 800a074:	4635      	mov	r5, r6
 800a076:	e7e7      	b.n	800a048 <_realloc_r+0x1c>

0800a078 <__sfputc_r>:
 800a078:	6893      	ldr	r3, [r2, #8]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	b410      	push	{r4}
 800a080:	6093      	str	r3, [r2, #8]
 800a082:	da08      	bge.n	800a096 <__sfputc_r+0x1e>
 800a084:	6994      	ldr	r4, [r2, #24]
 800a086:	42a3      	cmp	r3, r4
 800a088:	db01      	blt.n	800a08e <__sfputc_r+0x16>
 800a08a:	290a      	cmp	r1, #10
 800a08c:	d103      	bne.n	800a096 <__sfputc_r+0x1e>
 800a08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a092:	f000 b94b 	b.w	800a32c <__swbuf_r>
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	1c58      	adds	r0, r3, #1
 800a09a:	6010      	str	r0, [r2, #0]
 800a09c:	7019      	strb	r1, [r3, #0]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <__sfputs_r>:
 800a0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	18d5      	adds	r5, r2, r3
 800a0b0:	42ac      	cmp	r4, r5
 800a0b2:	d101      	bne.n	800a0b8 <__sfputs_r+0x12>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e007      	b.n	800a0c8 <__sfputs_r+0x22>
 800a0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0bc:	463a      	mov	r2, r7
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7ff ffda 	bl	800a078 <__sfputc_r>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d1f3      	bne.n	800a0b0 <__sfputs_r+0xa>
 800a0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0cc <_vfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	b09d      	sub	sp, #116	; 0x74
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	4698      	mov	r8, r3
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b118      	cbz	r0, 800a0e4 <_vfiprintf_r+0x18>
 800a0dc:	6983      	ldr	r3, [r0, #24]
 800a0de:	b90b      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x18>
 800a0e0:	f000 fb14 	bl	800a70c <__sinit>
 800a0e4:	4b89      	ldr	r3, [pc, #548]	; (800a30c <_vfiprintf_r+0x240>)
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	d11b      	bne.n	800a122 <_vfiprintf_r+0x56>
 800a0ea:	6875      	ldr	r5, [r6, #4]
 800a0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ee:	07d9      	lsls	r1, r3, #31
 800a0f0:	d405      	bmi.n	800a0fe <_vfiprintf_r+0x32>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	059a      	lsls	r2, r3, #22
 800a0f6:	d402      	bmi.n	800a0fe <_vfiprintf_r+0x32>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0fa:	f000 fba5 	bl	800a848 <__retarget_lock_acquire_recursive>
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	071b      	lsls	r3, r3, #28
 800a102:	d501      	bpl.n	800a108 <_vfiprintf_r+0x3c>
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	b9eb      	cbnz	r3, 800a144 <_vfiprintf_r+0x78>
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f000 f96e 	bl	800a3ec <__swsetup_r>
 800a110:	b1c0      	cbz	r0, 800a144 <_vfiprintf_r+0x78>
 800a112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a114:	07dc      	lsls	r4, r3, #31
 800a116:	d50e      	bpl.n	800a136 <_vfiprintf_r+0x6a>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a11c:	b01d      	add	sp, #116	; 0x74
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	4b7b      	ldr	r3, [pc, #492]	; (800a310 <_vfiprintf_r+0x244>)
 800a124:	429d      	cmp	r5, r3
 800a126:	d101      	bne.n	800a12c <_vfiprintf_r+0x60>
 800a128:	68b5      	ldr	r5, [r6, #8]
 800a12a:	e7df      	b.n	800a0ec <_vfiprintf_r+0x20>
 800a12c:	4b79      	ldr	r3, [pc, #484]	; (800a314 <_vfiprintf_r+0x248>)
 800a12e:	429d      	cmp	r5, r3
 800a130:	bf08      	it	eq
 800a132:	68f5      	ldreq	r5, [r6, #12]
 800a134:	e7da      	b.n	800a0ec <_vfiprintf_r+0x20>
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	0598      	lsls	r0, r3, #22
 800a13a:	d4ed      	bmi.n	800a118 <_vfiprintf_r+0x4c>
 800a13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a13e:	f000 fb84 	bl	800a84a <__retarget_lock_release_recursive>
 800a142:	e7e9      	b.n	800a118 <_vfiprintf_r+0x4c>
 800a144:	2300      	movs	r3, #0
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	2320      	movs	r3, #32
 800a14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a152:	2330      	movs	r3, #48	; 0x30
 800a154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a318 <_vfiprintf_r+0x24c>
 800a158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a15c:	f04f 0901 	mov.w	r9, #1
 800a160:	4623      	mov	r3, r4
 800a162:	469a      	mov	sl, r3
 800a164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a168:	b10a      	cbz	r2, 800a16e <_vfiprintf_r+0xa2>
 800a16a:	2a25      	cmp	r2, #37	; 0x25
 800a16c:	d1f9      	bne.n	800a162 <_vfiprintf_r+0x96>
 800a16e:	ebba 0b04 	subs.w	fp, sl, r4
 800a172:	d00b      	beq.n	800a18c <_vfiprintf_r+0xc0>
 800a174:	465b      	mov	r3, fp
 800a176:	4622      	mov	r2, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ff93 	bl	800a0a6 <__sfputs_r>
 800a180:	3001      	adds	r0, #1
 800a182:	f000 80aa 	beq.w	800a2da <_vfiprintf_r+0x20e>
 800a186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a188:	445a      	add	r2, fp
 800a18a:	9209      	str	r2, [sp, #36]	; 0x24
 800a18c:	f89a 3000 	ldrb.w	r3, [sl]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80a2 	beq.w	800a2da <_vfiprintf_r+0x20e>
 800a196:	2300      	movs	r3, #0
 800a198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a0:	f10a 0a01 	add.w	sl, sl, #1
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ae:	4654      	mov	r4, sl
 800a1b0:	2205      	movs	r2, #5
 800a1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b6:	4858      	ldr	r0, [pc, #352]	; (800a318 <_vfiprintf_r+0x24c>)
 800a1b8:	f7f6 f812 	bl	80001e0 <memchr>
 800a1bc:	9a04      	ldr	r2, [sp, #16]
 800a1be:	b9d8      	cbnz	r0, 800a1f8 <_vfiprintf_r+0x12c>
 800a1c0:	06d1      	lsls	r1, r2, #27
 800a1c2:	bf44      	itt	mi
 800a1c4:	2320      	movmi	r3, #32
 800a1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ca:	0713      	lsls	r3, r2, #28
 800a1cc:	bf44      	itt	mi
 800a1ce:	232b      	movmi	r3, #43	; 0x2b
 800a1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1da:	d015      	beq.n	800a208 <_vfiprintf_r+0x13c>
 800a1dc:	9a07      	ldr	r2, [sp, #28]
 800a1de:	4654      	mov	r4, sl
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f04f 0c0a 	mov.w	ip, #10
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ec:	3b30      	subs	r3, #48	; 0x30
 800a1ee:	2b09      	cmp	r3, #9
 800a1f0:	d94e      	bls.n	800a290 <_vfiprintf_r+0x1c4>
 800a1f2:	b1b0      	cbz	r0, 800a222 <_vfiprintf_r+0x156>
 800a1f4:	9207      	str	r2, [sp, #28]
 800a1f6:	e014      	b.n	800a222 <_vfiprintf_r+0x156>
 800a1f8:	eba0 0308 	sub.w	r3, r0, r8
 800a1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a200:	4313      	orrs	r3, r2
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	46a2      	mov	sl, r4
 800a206:	e7d2      	b.n	800a1ae <_vfiprintf_r+0xe2>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	1d19      	adds	r1, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	9103      	str	r1, [sp, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfbb      	ittet	lt
 800a214:	425b      	neglt	r3, r3
 800a216:	f042 0202 	orrlt.w	r2, r2, #2
 800a21a:	9307      	strge	r3, [sp, #28]
 800a21c:	9307      	strlt	r3, [sp, #28]
 800a21e:	bfb8      	it	lt
 800a220:	9204      	strlt	r2, [sp, #16]
 800a222:	7823      	ldrb	r3, [r4, #0]
 800a224:	2b2e      	cmp	r3, #46	; 0x2e
 800a226:	d10c      	bne.n	800a242 <_vfiprintf_r+0x176>
 800a228:	7863      	ldrb	r3, [r4, #1]
 800a22a:	2b2a      	cmp	r3, #42	; 0x2a
 800a22c:	d135      	bne.n	800a29a <_vfiprintf_r+0x1ce>
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	1d1a      	adds	r2, r3, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	9203      	str	r2, [sp, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfb8      	it	lt
 800a23a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a23e:	3402      	adds	r4, #2
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a328 <_vfiprintf_r+0x25c>
 800a246:	7821      	ldrb	r1, [r4, #0]
 800a248:	2203      	movs	r2, #3
 800a24a:	4650      	mov	r0, sl
 800a24c:	f7f5 ffc8 	bl	80001e0 <memchr>
 800a250:	b140      	cbz	r0, 800a264 <_vfiprintf_r+0x198>
 800a252:	2340      	movs	r3, #64	; 0x40
 800a254:	eba0 000a 	sub.w	r0, r0, sl
 800a258:	fa03 f000 	lsl.w	r0, r3, r0
 800a25c:	9b04      	ldr	r3, [sp, #16]
 800a25e:	4303      	orrs	r3, r0
 800a260:	3401      	adds	r4, #1
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	482c      	ldr	r0, [pc, #176]	; (800a31c <_vfiprintf_r+0x250>)
 800a26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a26e:	2206      	movs	r2, #6
 800a270:	f7f5 ffb6 	bl	80001e0 <memchr>
 800a274:	2800      	cmp	r0, #0
 800a276:	d03f      	beq.n	800a2f8 <_vfiprintf_r+0x22c>
 800a278:	4b29      	ldr	r3, [pc, #164]	; (800a320 <_vfiprintf_r+0x254>)
 800a27a:	bb1b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x1f8>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	3307      	adds	r3, #7
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	3308      	adds	r3, #8
 800a286:	9303      	str	r3, [sp, #12]
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	443b      	add	r3, r7
 800a28c:	9309      	str	r3, [sp, #36]	; 0x24
 800a28e:	e767      	b.n	800a160 <_vfiprintf_r+0x94>
 800a290:	fb0c 3202 	mla	r2, ip, r2, r3
 800a294:	460c      	mov	r4, r1
 800a296:	2001      	movs	r0, #1
 800a298:	e7a5      	b.n	800a1e6 <_vfiprintf_r+0x11a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	3401      	adds	r4, #1
 800a29e:	9305      	str	r3, [sp, #20]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	f04f 0c0a 	mov.w	ip, #10
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ac:	3a30      	subs	r2, #48	; 0x30
 800a2ae:	2a09      	cmp	r2, #9
 800a2b0:	d903      	bls.n	800a2ba <_vfiprintf_r+0x1ee>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0c5      	beq.n	800a242 <_vfiprintf_r+0x176>
 800a2b6:	9105      	str	r1, [sp, #20]
 800a2b8:	e7c3      	b.n	800a242 <_vfiprintf_r+0x176>
 800a2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2be:	4604      	mov	r4, r0
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e7f0      	b.n	800a2a6 <_vfiprintf_r+0x1da>
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	4b16      	ldr	r3, [pc, #88]	; (800a324 <_vfiprintf_r+0x258>)
 800a2cc:	a904      	add	r1, sp, #16
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7fd fe24 	bl	8007f1c <_printf_float>
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	1c78      	adds	r0, r7, #1
 800a2d8:	d1d6      	bne.n	800a288 <_vfiprintf_r+0x1bc>
 800a2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2dc:	07d9      	lsls	r1, r3, #31
 800a2de:	d405      	bmi.n	800a2ec <_vfiprintf_r+0x220>
 800a2e0:	89ab      	ldrh	r3, [r5, #12]
 800a2e2:	059a      	lsls	r2, r3, #22
 800a2e4:	d402      	bmi.n	800a2ec <_vfiprintf_r+0x220>
 800a2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e8:	f000 faaf 	bl	800a84a <__retarget_lock_release_recursive>
 800a2ec:	89ab      	ldrh	r3, [r5, #12]
 800a2ee:	065b      	lsls	r3, r3, #25
 800a2f0:	f53f af12 	bmi.w	800a118 <_vfiprintf_r+0x4c>
 800a2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2f6:	e711      	b.n	800a11c <_vfiprintf_r+0x50>
 800a2f8:	ab03      	add	r3, sp, #12
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <_vfiprintf_r+0x258>)
 800a300:	a904      	add	r1, sp, #16
 800a302:	4630      	mov	r0, r6
 800a304:	f7fe f8ae 	bl	8008464 <_printf_i>
 800a308:	e7e4      	b.n	800a2d4 <_vfiprintf_r+0x208>
 800a30a:	bf00      	nop
 800a30c:	0800de84 	.word	0x0800de84
 800a310:	0800dea4 	.word	0x0800dea4
 800a314:	0800de64 	.word	0x0800de64
 800a318:	0800dd0c 	.word	0x0800dd0c
 800a31c:	0800dd16 	.word	0x0800dd16
 800a320:	08007f1d 	.word	0x08007f1d
 800a324:	0800a0a7 	.word	0x0800a0a7
 800a328:	0800dd12 	.word	0x0800dd12

0800a32c <__swbuf_r>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	460e      	mov	r6, r1
 800a330:	4614      	mov	r4, r2
 800a332:	4605      	mov	r5, r0
 800a334:	b118      	cbz	r0, 800a33e <__swbuf_r+0x12>
 800a336:	6983      	ldr	r3, [r0, #24]
 800a338:	b90b      	cbnz	r3, 800a33e <__swbuf_r+0x12>
 800a33a:	f000 f9e7 	bl	800a70c <__sinit>
 800a33e:	4b21      	ldr	r3, [pc, #132]	; (800a3c4 <__swbuf_r+0x98>)
 800a340:	429c      	cmp	r4, r3
 800a342:	d12b      	bne.n	800a39c <__swbuf_r+0x70>
 800a344:	686c      	ldr	r4, [r5, #4]
 800a346:	69a3      	ldr	r3, [r4, #24]
 800a348:	60a3      	str	r3, [r4, #8]
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	071a      	lsls	r2, r3, #28
 800a34e:	d52f      	bpl.n	800a3b0 <__swbuf_r+0x84>
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	b36b      	cbz	r3, 800a3b0 <__swbuf_r+0x84>
 800a354:	6923      	ldr	r3, [r4, #16]
 800a356:	6820      	ldr	r0, [r4, #0]
 800a358:	1ac0      	subs	r0, r0, r3
 800a35a:	6963      	ldr	r3, [r4, #20]
 800a35c:	b2f6      	uxtb	r6, r6
 800a35e:	4283      	cmp	r3, r0
 800a360:	4637      	mov	r7, r6
 800a362:	dc04      	bgt.n	800a36e <__swbuf_r+0x42>
 800a364:	4621      	mov	r1, r4
 800a366:	4628      	mov	r0, r5
 800a368:	f000 f93c 	bl	800a5e4 <_fflush_r>
 800a36c:	bb30      	cbnz	r0, 800a3bc <__swbuf_r+0x90>
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	3b01      	subs	r3, #1
 800a372:	60a3      	str	r3, [r4, #8]
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	6022      	str	r2, [r4, #0]
 800a37a:	701e      	strb	r6, [r3, #0]
 800a37c:	6963      	ldr	r3, [r4, #20]
 800a37e:	3001      	adds	r0, #1
 800a380:	4283      	cmp	r3, r0
 800a382:	d004      	beq.n	800a38e <__swbuf_r+0x62>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	07db      	lsls	r3, r3, #31
 800a388:	d506      	bpl.n	800a398 <__swbuf_r+0x6c>
 800a38a:	2e0a      	cmp	r6, #10
 800a38c:	d104      	bne.n	800a398 <__swbuf_r+0x6c>
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f000 f927 	bl	800a5e4 <_fflush_r>
 800a396:	b988      	cbnz	r0, 800a3bc <__swbuf_r+0x90>
 800a398:	4638      	mov	r0, r7
 800a39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a39c:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <__swbuf_r+0x9c>)
 800a39e:	429c      	cmp	r4, r3
 800a3a0:	d101      	bne.n	800a3a6 <__swbuf_r+0x7a>
 800a3a2:	68ac      	ldr	r4, [r5, #8]
 800a3a4:	e7cf      	b.n	800a346 <__swbuf_r+0x1a>
 800a3a6:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <__swbuf_r+0xa0>)
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	bf08      	it	eq
 800a3ac:	68ec      	ldreq	r4, [r5, #12]
 800a3ae:	e7ca      	b.n	800a346 <__swbuf_r+0x1a>
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f000 f81a 	bl	800a3ec <__swsetup_r>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d0cb      	beq.n	800a354 <__swbuf_r+0x28>
 800a3bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3c0:	e7ea      	b.n	800a398 <__swbuf_r+0x6c>
 800a3c2:	bf00      	nop
 800a3c4:	0800de84 	.word	0x0800de84
 800a3c8:	0800dea4 	.word	0x0800dea4
 800a3cc:	0800de64 	.word	0x0800de64

0800a3d0 <__ascii_wctomb>:
 800a3d0:	b149      	cbz	r1, 800a3e6 <__ascii_wctomb+0x16>
 800a3d2:	2aff      	cmp	r2, #255	; 0xff
 800a3d4:	bf85      	ittet	hi
 800a3d6:	238a      	movhi	r3, #138	; 0x8a
 800a3d8:	6003      	strhi	r3, [r0, #0]
 800a3da:	700a      	strbls	r2, [r1, #0]
 800a3dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a3e0:	bf98      	it	ls
 800a3e2:	2001      	movls	r0, #1
 800a3e4:	4770      	bx	lr
 800a3e6:	4608      	mov	r0, r1
 800a3e8:	4770      	bx	lr
	...

0800a3ec <__swsetup_r>:
 800a3ec:	4b32      	ldr	r3, [pc, #200]	; (800a4b8 <__swsetup_r+0xcc>)
 800a3ee:	b570      	push	{r4, r5, r6, lr}
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	b125      	cbz	r5, 800a402 <__swsetup_r+0x16>
 800a3f8:	69ab      	ldr	r3, [r5, #24]
 800a3fa:	b913      	cbnz	r3, 800a402 <__swsetup_r+0x16>
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f985 	bl	800a70c <__sinit>
 800a402:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <__swsetup_r+0xd0>)
 800a404:	429c      	cmp	r4, r3
 800a406:	d10f      	bne.n	800a428 <__swsetup_r+0x3c>
 800a408:	686c      	ldr	r4, [r5, #4]
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a410:	0719      	lsls	r1, r3, #28
 800a412:	d42c      	bmi.n	800a46e <__swsetup_r+0x82>
 800a414:	06dd      	lsls	r5, r3, #27
 800a416:	d411      	bmi.n	800a43c <__swsetup_r+0x50>
 800a418:	2309      	movs	r3, #9
 800a41a:	6033      	str	r3, [r6, #0]
 800a41c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a426:	e03e      	b.n	800a4a6 <__swsetup_r+0xba>
 800a428:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <__swsetup_r+0xd4>)
 800a42a:	429c      	cmp	r4, r3
 800a42c:	d101      	bne.n	800a432 <__swsetup_r+0x46>
 800a42e:	68ac      	ldr	r4, [r5, #8]
 800a430:	e7eb      	b.n	800a40a <__swsetup_r+0x1e>
 800a432:	4b24      	ldr	r3, [pc, #144]	; (800a4c4 <__swsetup_r+0xd8>)
 800a434:	429c      	cmp	r4, r3
 800a436:	bf08      	it	eq
 800a438:	68ec      	ldreq	r4, [r5, #12]
 800a43a:	e7e6      	b.n	800a40a <__swsetup_r+0x1e>
 800a43c:	0758      	lsls	r0, r3, #29
 800a43e:	d512      	bpl.n	800a466 <__swsetup_r+0x7a>
 800a440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a442:	b141      	cbz	r1, 800a456 <__swsetup_r+0x6a>
 800a444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a448:	4299      	cmp	r1, r3
 800a44a:	d002      	beq.n	800a452 <__swsetup_r+0x66>
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fb6f 	bl	8009b30 <_free_r>
 800a452:	2300      	movs	r3, #0
 800a454:	6363      	str	r3, [r4, #52]	; 0x34
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	2300      	movs	r3, #0
 800a460:	6063      	str	r3, [r4, #4]
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f043 0308 	orr.w	r3, r3, #8
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	6923      	ldr	r3, [r4, #16]
 800a470:	b94b      	cbnz	r3, 800a486 <__swsetup_r+0x9a>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a47c:	d003      	beq.n	800a486 <__swsetup_r+0x9a>
 800a47e:	4621      	mov	r1, r4
 800a480:	4630      	mov	r0, r6
 800a482:	f000 fa07 	bl	800a894 <__smakebuf_r>
 800a486:	89a0      	ldrh	r0, [r4, #12]
 800a488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a48c:	f010 0301 	ands.w	r3, r0, #1
 800a490:	d00a      	beq.n	800a4a8 <__swsetup_r+0xbc>
 800a492:	2300      	movs	r3, #0
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6963      	ldr	r3, [r4, #20]
 800a498:	425b      	negs	r3, r3
 800a49a:	61a3      	str	r3, [r4, #24]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	b943      	cbnz	r3, 800a4b2 <__swsetup_r+0xc6>
 800a4a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4a4:	d1ba      	bne.n	800a41c <__swsetup_r+0x30>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	0781      	lsls	r1, r0, #30
 800a4aa:	bf58      	it	pl
 800a4ac:	6963      	ldrpl	r3, [r4, #20]
 800a4ae:	60a3      	str	r3, [r4, #8]
 800a4b0:	e7f4      	b.n	800a49c <__swsetup_r+0xb0>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e7f7      	b.n	800a4a6 <__swsetup_r+0xba>
 800a4b6:	bf00      	nop
 800a4b8:	20000014 	.word	0x20000014
 800a4bc:	0800de84 	.word	0x0800de84
 800a4c0:	0800dea4 	.word	0x0800dea4
 800a4c4:	0800de64 	.word	0x0800de64

0800a4c8 <abort>:
 800a4c8:	b508      	push	{r3, lr}
 800a4ca:	2006      	movs	r0, #6
 800a4cc:	f000 fa52 	bl	800a974 <raise>
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	f7f8 f911 	bl	80026f8 <_exit>
	...

0800a4d8 <__sflush_r>:
 800a4d8:	898a      	ldrh	r2, [r1, #12]
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	4605      	mov	r5, r0
 800a4e0:	0710      	lsls	r0, r2, #28
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	d458      	bmi.n	800a598 <__sflush_r+0xc0>
 800a4e6:	684b      	ldr	r3, [r1, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	dc05      	bgt.n	800a4f8 <__sflush_r+0x20>
 800a4ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	dc02      	bgt.n	800a4f8 <__sflush_r+0x20>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4fa:	2e00      	cmp	r6, #0
 800a4fc:	d0f9      	beq.n	800a4f2 <__sflush_r+0x1a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a504:	682f      	ldr	r7, [r5, #0]
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	d032      	beq.n	800a570 <__sflush_r+0x98>
 800a50a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	075a      	lsls	r2, r3, #29
 800a510:	d505      	bpl.n	800a51e <__sflush_r+0x46>
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a518:	b10b      	cbz	r3, 800a51e <__sflush_r+0x46>
 800a51a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a51c:	1ac0      	subs	r0, r0, r3
 800a51e:	2300      	movs	r3, #0
 800a520:	4602      	mov	r2, r0
 800a522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a524:	6a21      	ldr	r1, [r4, #32]
 800a526:	4628      	mov	r0, r5
 800a528:	47b0      	blx	r6
 800a52a:	1c43      	adds	r3, r0, #1
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	d106      	bne.n	800a53e <__sflush_r+0x66>
 800a530:	6829      	ldr	r1, [r5, #0]
 800a532:	291d      	cmp	r1, #29
 800a534:	d82c      	bhi.n	800a590 <__sflush_r+0xb8>
 800a536:	4a2a      	ldr	r2, [pc, #168]	; (800a5e0 <__sflush_r+0x108>)
 800a538:	40ca      	lsrs	r2, r1
 800a53a:	07d6      	lsls	r6, r2, #31
 800a53c:	d528      	bpl.n	800a590 <__sflush_r+0xb8>
 800a53e:	2200      	movs	r2, #0
 800a540:	6062      	str	r2, [r4, #4]
 800a542:	04d9      	lsls	r1, r3, #19
 800a544:	6922      	ldr	r2, [r4, #16]
 800a546:	6022      	str	r2, [r4, #0]
 800a548:	d504      	bpl.n	800a554 <__sflush_r+0x7c>
 800a54a:	1c42      	adds	r2, r0, #1
 800a54c:	d101      	bne.n	800a552 <__sflush_r+0x7a>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	b903      	cbnz	r3, 800a554 <__sflush_r+0x7c>
 800a552:	6560      	str	r0, [r4, #84]	; 0x54
 800a554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a556:	602f      	str	r7, [r5, #0]
 800a558:	2900      	cmp	r1, #0
 800a55a:	d0ca      	beq.n	800a4f2 <__sflush_r+0x1a>
 800a55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a560:	4299      	cmp	r1, r3
 800a562:	d002      	beq.n	800a56a <__sflush_r+0x92>
 800a564:	4628      	mov	r0, r5
 800a566:	f7ff fae3 	bl	8009b30 <_free_r>
 800a56a:	2000      	movs	r0, #0
 800a56c:	6360      	str	r0, [r4, #52]	; 0x34
 800a56e:	e7c1      	b.n	800a4f4 <__sflush_r+0x1c>
 800a570:	6a21      	ldr	r1, [r4, #32]
 800a572:	2301      	movs	r3, #1
 800a574:	4628      	mov	r0, r5
 800a576:	47b0      	blx	r6
 800a578:	1c41      	adds	r1, r0, #1
 800a57a:	d1c7      	bne.n	800a50c <__sflush_r+0x34>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c4      	beq.n	800a50c <__sflush_r+0x34>
 800a582:	2b1d      	cmp	r3, #29
 800a584:	d001      	beq.n	800a58a <__sflush_r+0xb2>
 800a586:	2b16      	cmp	r3, #22
 800a588:	d101      	bne.n	800a58e <__sflush_r+0xb6>
 800a58a:	602f      	str	r7, [r5, #0]
 800a58c:	e7b1      	b.n	800a4f2 <__sflush_r+0x1a>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	e7ad      	b.n	800a4f4 <__sflush_r+0x1c>
 800a598:	690f      	ldr	r7, [r1, #16]
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	d0a9      	beq.n	800a4f2 <__sflush_r+0x1a>
 800a59e:	0793      	lsls	r3, r2, #30
 800a5a0:	680e      	ldr	r6, [r1, #0]
 800a5a2:	bf08      	it	eq
 800a5a4:	694b      	ldreq	r3, [r1, #20]
 800a5a6:	600f      	str	r7, [r1, #0]
 800a5a8:	bf18      	it	ne
 800a5aa:	2300      	movne	r3, #0
 800a5ac:	eba6 0807 	sub.w	r8, r6, r7
 800a5b0:	608b      	str	r3, [r1, #8]
 800a5b2:	f1b8 0f00 	cmp.w	r8, #0
 800a5b6:	dd9c      	ble.n	800a4f2 <__sflush_r+0x1a>
 800a5b8:	6a21      	ldr	r1, [r4, #32]
 800a5ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5bc:	4643      	mov	r3, r8
 800a5be:	463a      	mov	r2, r7
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b0      	blx	r6
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	dc06      	bgt.n	800a5d6 <__sflush_r+0xfe>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d4:	e78e      	b.n	800a4f4 <__sflush_r+0x1c>
 800a5d6:	4407      	add	r7, r0
 800a5d8:	eba8 0800 	sub.w	r8, r8, r0
 800a5dc:	e7e9      	b.n	800a5b2 <__sflush_r+0xda>
 800a5de:	bf00      	nop
 800a5e0:	20400001 	.word	0x20400001

0800a5e4 <_fflush_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	690b      	ldr	r3, [r1, #16]
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	b913      	cbnz	r3, 800a5f4 <_fflush_r+0x10>
 800a5ee:	2500      	movs	r5, #0
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	b118      	cbz	r0, 800a5fe <_fflush_r+0x1a>
 800a5f6:	6983      	ldr	r3, [r0, #24]
 800a5f8:	b90b      	cbnz	r3, 800a5fe <_fflush_r+0x1a>
 800a5fa:	f000 f887 	bl	800a70c <__sinit>
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <_fflush_r+0x6c>)
 800a600:	429c      	cmp	r4, r3
 800a602:	d11b      	bne.n	800a63c <_fflush_r+0x58>
 800a604:	686c      	ldr	r4, [r5, #4]
 800a606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d0ef      	beq.n	800a5ee <_fflush_r+0xa>
 800a60e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a610:	07d0      	lsls	r0, r2, #31
 800a612:	d404      	bmi.n	800a61e <_fflush_r+0x3a>
 800a614:	0599      	lsls	r1, r3, #22
 800a616:	d402      	bmi.n	800a61e <_fflush_r+0x3a>
 800a618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a61a:	f000 f915 	bl	800a848 <__retarget_lock_acquire_recursive>
 800a61e:	4628      	mov	r0, r5
 800a620:	4621      	mov	r1, r4
 800a622:	f7ff ff59 	bl	800a4d8 <__sflush_r>
 800a626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a628:	07da      	lsls	r2, r3, #31
 800a62a:	4605      	mov	r5, r0
 800a62c:	d4e0      	bmi.n	800a5f0 <_fflush_r+0xc>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	059b      	lsls	r3, r3, #22
 800a632:	d4dd      	bmi.n	800a5f0 <_fflush_r+0xc>
 800a634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a636:	f000 f908 	bl	800a84a <__retarget_lock_release_recursive>
 800a63a:	e7d9      	b.n	800a5f0 <_fflush_r+0xc>
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <_fflush_r+0x70>)
 800a63e:	429c      	cmp	r4, r3
 800a640:	d101      	bne.n	800a646 <_fflush_r+0x62>
 800a642:	68ac      	ldr	r4, [r5, #8]
 800a644:	e7df      	b.n	800a606 <_fflush_r+0x22>
 800a646:	4b04      	ldr	r3, [pc, #16]	; (800a658 <_fflush_r+0x74>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	bf08      	it	eq
 800a64c:	68ec      	ldreq	r4, [r5, #12]
 800a64e:	e7da      	b.n	800a606 <_fflush_r+0x22>
 800a650:	0800de84 	.word	0x0800de84
 800a654:	0800dea4 	.word	0x0800dea4
 800a658:	0800de64 	.word	0x0800de64

0800a65c <std>:
 800a65c:	2300      	movs	r3, #0
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	e9c0 3300 	strd	r3, r3, [r0]
 800a666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a66a:	6083      	str	r3, [r0, #8]
 800a66c:	8181      	strh	r1, [r0, #12]
 800a66e:	6643      	str	r3, [r0, #100]	; 0x64
 800a670:	81c2      	strh	r2, [r0, #14]
 800a672:	6183      	str	r3, [r0, #24]
 800a674:	4619      	mov	r1, r3
 800a676:	2208      	movs	r2, #8
 800a678:	305c      	adds	r0, #92	; 0x5c
 800a67a:	f7fd fba7 	bl	8007dcc <memset>
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <std+0x38>)
 800a680:	6263      	str	r3, [r4, #36]	; 0x24
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <std+0x3c>)
 800a684:	62a3      	str	r3, [r4, #40]	; 0x28
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <std+0x40>)
 800a688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a68a:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <std+0x44>)
 800a68c:	6224      	str	r4, [r4, #32]
 800a68e:	6323      	str	r3, [r4, #48]	; 0x30
 800a690:	bd10      	pop	{r4, pc}
 800a692:	bf00      	nop
 800a694:	0800a9ad 	.word	0x0800a9ad
 800a698:	0800a9cf 	.word	0x0800a9cf
 800a69c:	0800aa07 	.word	0x0800aa07
 800a6a0:	0800aa2b 	.word	0x0800aa2b

0800a6a4 <_cleanup_r>:
 800a6a4:	4901      	ldr	r1, [pc, #4]	; (800a6ac <_cleanup_r+0x8>)
 800a6a6:	f000 b8af 	b.w	800a808 <_fwalk_reent>
 800a6aa:	bf00      	nop
 800a6ac:	0800a5e5 	.word	0x0800a5e5

0800a6b0 <__sfmoreglue>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	1e4a      	subs	r2, r1, #1
 800a6b4:	2568      	movs	r5, #104	; 0x68
 800a6b6:	4355      	muls	r5, r2
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6be:	f7ff fa87 	bl	8009bd0 <_malloc_r>
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	b140      	cbz	r0, 800a6d8 <__sfmoreglue+0x28>
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	e9c0 1600 	strd	r1, r6, [r0]
 800a6cc:	300c      	adds	r0, #12
 800a6ce:	60a0      	str	r0, [r4, #8]
 800a6d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6d4:	f7fd fb7a 	bl	8007dcc <memset>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	bd70      	pop	{r4, r5, r6, pc}

0800a6dc <__sfp_lock_acquire>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__sfp_lock_acquire+0x8>)
 800a6de:	f000 b8b3 	b.w	800a848 <__retarget_lock_acquire_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	200005a8 	.word	0x200005a8

0800a6e8 <__sfp_lock_release>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sfp_lock_release+0x8>)
 800a6ea:	f000 b8ae 	b.w	800a84a <__retarget_lock_release_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	200005a8 	.word	0x200005a8

0800a6f4 <__sinit_lock_acquire>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__sinit_lock_acquire+0x8>)
 800a6f6:	f000 b8a7 	b.w	800a848 <__retarget_lock_acquire_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	200005a3 	.word	0x200005a3

0800a700 <__sinit_lock_release>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__sinit_lock_release+0x8>)
 800a702:	f000 b8a2 	b.w	800a84a <__retarget_lock_release_recursive>
 800a706:	bf00      	nop
 800a708:	200005a3 	.word	0x200005a3

0800a70c <__sinit>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	4604      	mov	r4, r0
 800a710:	f7ff fff0 	bl	800a6f4 <__sinit_lock_acquire>
 800a714:	69a3      	ldr	r3, [r4, #24]
 800a716:	b11b      	cbz	r3, 800a720 <__sinit+0x14>
 800a718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a71c:	f7ff bff0 	b.w	800a700 <__sinit_lock_release>
 800a720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a724:	6523      	str	r3, [r4, #80]	; 0x50
 800a726:	4b13      	ldr	r3, [pc, #76]	; (800a774 <__sinit+0x68>)
 800a728:	4a13      	ldr	r2, [pc, #76]	; (800a778 <__sinit+0x6c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a72e:	42a3      	cmp	r3, r4
 800a730:	bf04      	itt	eq
 800a732:	2301      	moveq	r3, #1
 800a734:	61a3      	streq	r3, [r4, #24]
 800a736:	4620      	mov	r0, r4
 800a738:	f000 f820 	bl	800a77c <__sfp>
 800a73c:	6060      	str	r0, [r4, #4]
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 f81c 	bl	800a77c <__sfp>
 800a744:	60a0      	str	r0, [r4, #8]
 800a746:	4620      	mov	r0, r4
 800a748:	f000 f818 	bl	800a77c <__sfp>
 800a74c:	2200      	movs	r2, #0
 800a74e:	60e0      	str	r0, [r4, #12]
 800a750:	2104      	movs	r1, #4
 800a752:	6860      	ldr	r0, [r4, #4]
 800a754:	f7ff ff82 	bl	800a65c <std>
 800a758:	68a0      	ldr	r0, [r4, #8]
 800a75a:	2201      	movs	r2, #1
 800a75c:	2109      	movs	r1, #9
 800a75e:	f7ff ff7d 	bl	800a65c <std>
 800a762:	68e0      	ldr	r0, [r4, #12]
 800a764:	2202      	movs	r2, #2
 800a766:	2112      	movs	r1, #18
 800a768:	f7ff ff78 	bl	800a65c <std>
 800a76c:	2301      	movs	r3, #1
 800a76e:	61a3      	str	r3, [r4, #24]
 800a770:	e7d2      	b.n	800a718 <__sinit+0xc>
 800a772:	bf00      	nop
 800a774:	0800dae4 	.word	0x0800dae4
 800a778:	0800a6a5 	.word	0x0800a6a5

0800a77c <__sfp>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	4607      	mov	r7, r0
 800a780:	f7ff ffac 	bl	800a6dc <__sfp_lock_acquire>
 800a784:	4b1e      	ldr	r3, [pc, #120]	; (800a800 <__sfp+0x84>)
 800a786:	681e      	ldr	r6, [r3, #0]
 800a788:	69b3      	ldr	r3, [r6, #24]
 800a78a:	b913      	cbnz	r3, 800a792 <__sfp+0x16>
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff ffbd 	bl	800a70c <__sinit>
 800a792:	3648      	adds	r6, #72	; 0x48
 800a794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a798:	3b01      	subs	r3, #1
 800a79a:	d503      	bpl.n	800a7a4 <__sfp+0x28>
 800a79c:	6833      	ldr	r3, [r6, #0]
 800a79e:	b30b      	cbz	r3, 800a7e4 <__sfp+0x68>
 800a7a0:	6836      	ldr	r6, [r6, #0]
 800a7a2:	e7f7      	b.n	800a794 <__sfp+0x18>
 800a7a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7a8:	b9d5      	cbnz	r5, 800a7e0 <__sfp+0x64>
 800a7aa:	4b16      	ldr	r3, [pc, #88]	; (800a804 <__sfp+0x88>)
 800a7ac:	60e3      	str	r3, [r4, #12]
 800a7ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7b2:	6665      	str	r5, [r4, #100]	; 0x64
 800a7b4:	f000 f847 	bl	800a846 <__retarget_lock_init_recursive>
 800a7b8:	f7ff ff96 	bl	800a6e8 <__sfp_lock_release>
 800a7bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7c4:	6025      	str	r5, [r4, #0]
 800a7c6:	61a5      	str	r5, [r4, #24]
 800a7c8:	2208      	movs	r2, #8
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7d0:	f7fd fafc 	bl	8007dcc <memset>
 800a7d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7dc:	4620      	mov	r0, r4
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	3468      	adds	r4, #104	; 0x68
 800a7e2:	e7d9      	b.n	800a798 <__sfp+0x1c>
 800a7e4:	2104      	movs	r1, #4
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7ff ff62 	bl	800a6b0 <__sfmoreglue>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	6030      	str	r0, [r6, #0]
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1d5      	bne.n	800a7a0 <__sfp+0x24>
 800a7f4:	f7ff ff78 	bl	800a6e8 <__sfp_lock_release>
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	e7ee      	b.n	800a7dc <__sfp+0x60>
 800a7fe:	bf00      	nop
 800a800:	0800dae4 	.word	0x0800dae4
 800a804:	ffff0001 	.word	0xffff0001

0800a808 <_fwalk_reent>:
 800a808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a80c:	4606      	mov	r6, r0
 800a80e:	4688      	mov	r8, r1
 800a810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a814:	2700      	movs	r7, #0
 800a816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a81a:	f1b9 0901 	subs.w	r9, r9, #1
 800a81e:	d505      	bpl.n	800a82c <_fwalk_reent+0x24>
 800a820:	6824      	ldr	r4, [r4, #0]
 800a822:	2c00      	cmp	r4, #0
 800a824:	d1f7      	bne.n	800a816 <_fwalk_reent+0xe>
 800a826:	4638      	mov	r0, r7
 800a828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a82c:	89ab      	ldrh	r3, [r5, #12]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d907      	bls.n	800a842 <_fwalk_reent+0x3a>
 800a832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a836:	3301      	adds	r3, #1
 800a838:	d003      	beq.n	800a842 <_fwalk_reent+0x3a>
 800a83a:	4629      	mov	r1, r5
 800a83c:	4630      	mov	r0, r6
 800a83e:	47c0      	blx	r8
 800a840:	4307      	orrs	r7, r0
 800a842:	3568      	adds	r5, #104	; 0x68
 800a844:	e7e9      	b.n	800a81a <_fwalk_reent+0x12>

0800a846 <__retarget_lock_init_recursive>:
 800a846:	4770      	bx	lr

0800a848 <__retarget_lock_acquire_recursive>:
 800a848:	4770      	bx	lr

0800a84a <__retarget_lock_release_recursive>:
 800a84a:	4770      	bx	lr

0800a84c <__swhatbuf_r>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	460e      	mov	r6, r1
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	2900      	cmp	r1, #0
 800a856:	b096      	sub	sp, #88	; 0x58
 800a858:	4614      	mov	r4, r2
 800a85a:	461d      	mov	r5, r3
 800a85c:	da07      	bge.n	800a86e <__swhatbuf_r+0x22>
 800a85e:	2300      	movs	r3, #0
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	89b3      	ldrh	r3, [r6, #12]
 800a864:	061a      	lsls	r2, r3, #24
 800a866:	d410      	bmi.n	800a88a <__swhatbuf_r+0x3e>
 800a868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a86c:	e00e      	b.n	800a88c <__swhatbuf_r+0x40>
 800a86e:	466a      	mov	r2, sp
 800a870:	f000 f902 	bl	800aa78 <_fstat_r>
 800a874:	2800      	cmp	r0, #0
 800a876:	dbf2      	blt.n	800a85e <__swhatbuf_r+0x12>
 800a878:	9a01      	ldr	r2, [sp, #4]
 800a87a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a87e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a882:	425a      	negs	r2, r3
 800a884:	415a      	adcs	r2, r3
 800a886:	602a      	str	r2, [r5, #0]
 800a888:	e7ee      	b.n	800a868 <__swhatbuf_r+0x1c>
 800a88a:	2340      	movs	r3, #64	; 0x40
 800a88c:	2000      	movs	r0, #0
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	b016      	add	sp, #88	; 0x58
 800a892:	bd70      	pop	{r4, r5, r6, pc}

0800a894 <__smakebuf_r>:
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a898:	079d      	lsls	r5, r3, #30
 800a89a:	4606      	mov	r6, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	d507      	bpl.n	800a8b0 <__smakebuf_r+0x1c>
 800a8a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	6163      	str	r3, [r4, #20]
 800a8ac:	b002      	add	sp, #8
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	ab01      	add	r3, sp, #4
 800a8b2:	466a      	mov	r2, sp
 800a8b4:	f7ff ffca 	bl	800a84c <__swhatbuf_r>
 800a8b8:	9900      	ldr	r1, [sp, #0]
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff f987 	bl	8009bd0 <_malloc_r>
 800a8c2:	b948      	cbnz	r0, 800a8d8 <__smakebuf_r+0x44>
 800a8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d4ef      	bmi.n	800a8ac <__smakebuf_r+0x18>
 800a8cc:	f023 0303 	bic.w	r3, r3, #3
 800a8d0:	f043 0302 	orr.w	r3, r3, #2
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	e7e3      	b.n	800a8a0 <__smakebuf_r+0xc>
 800a8d8:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <__smakebuf_r+0x7c>)
 800a8da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	6020      	str	r0, [r4, #0]
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	6163      	str	r3, [r4, #20]
 800a8ea:	9b01      	ldr	r3, [sp, #4]
 800a8ec:	6120      	str	r0, [r4, #16]
 800a8ee:	b15b      	cbz	r3, 800a908 <__smakebuf_r+0x74>
 800a8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 f8d1 	bl	800aa9c <_isatty_r>
 800a8fa:	b128      	cbz	r0, 800a908 <__smakebuf_r+0x74>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	89a0      	ldrh	r0, [r4, #12]
 800a90a:	4305      	orrs	r5, r0
 800a90c:	81a5      	strh	r5, [r4, #12]
 800a90e:	e7cd      	b.n	800a8ac <__smakebuf_r+0x18>
 800a910:	0800a6a5 	.word	0x0800a6a5

0800a914 <_malloc_usable_size_r>:
 800a914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a918:	1f18      	subs	r0, r3, #4
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bfbc      	itt	lt
 800a91e:	580b      	ldrlt	r3, [r1, r0]
 800a920:	18c0      	addlt	r0, r0, r3
 800a922:	4770      	bx	lr

0800a924 <_raise_r>:
 800a924:	291f      	cmp	r1, #31
 800a926:	b538      	push	{r3, r4, r5, lr}
 800a928:	4604      	mov	r4, r0
 800a92a:	460d      	mov	r5, r1
 800a92c:	d904      	bls.n	800a938 <_raise_r+0x14>
 800a92e:	2316      	movs	r3, #22
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a936:	bd38      	pop	{r3, r4, r5, pc}
 800a938:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a93a:	b112      	cbz	r2, 800a942 <_raise_r+0x1e>
 800a93c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a940:	b94b      	cbnz	r3, 800a956 <_raise_r+0x32>
 800a942:	4620      	mov	r0, r4
 800a944:	f000 f830 	bl	800a9a8 <_getpid_r>
 800a948:	462a      	mov	r2, r5
 800a94a:	4601      	mov	r1, r0
 800a94c:	4620      	mov	r0, r4
 800a94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a952:	f000 b817 	b.w	800a984 <_kill_r>
 800a956:	2b01      	cmp	r3, #1
 800a958:	d00a      	beq.n	800a970 <_raise_r+0x4c>
 800a95a:	1c59      	adds	r1, r3, #1
 800a95c:	d103      	bne.n	800a966 <_raise_r+0x42>
 800a95e:	2316      	movs	r3, #22
 800a960:	6003      	str	r3, [r0, #0]
 800a962:	2001      	movs	r0, #1
 800a964:	e7e7      	b.n	800a936 <_raise_r+0x12>
 800a966:	2400      	movs	r4, #0
 800a968:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a96c:	4628      	mov	r0, r5
 800a96e:	4798      	blx	r3
 800a970:	2000      	movs	r0, #0
 800a972:	e7e0      	b.n	800a936 <_raise_r+0x12>

0800a974 <raise>:
 800a974:	4b02      	ldr	r3, [pc, #8]	; (800a980 <raise+0xc>)
 800a976:	4601      	mov	r1, r0
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	f7ff bfd3 	b.w	800a924 <_raise_r>
 800a97e:	bf00      	nop
 800a980:	20000014 	.word	0x20000014

0800a984 <_kill_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	; (800a9a4 <_kill_r+0x20>)
 800a988:	2300      	movs	r3, #0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	f7f7 fea1 	bl	80026d8 <_kill>
 800a996:	1c43      	adds	r3, r0, #1
 800a998:	d102      	bne.n	800a9a0 <_kill_r+0x1c>
 800a99a:	682b      	ldr	r3, [r5, #0]
 800a99c:	b103      	cbz	r3, 800a9a0 <_kill_r+0x1c>
 800a99e:	6023      	str	r3, [r4, #0]
 800a9a0:	bd38      	pop	{r3, r4, r5, pc}
 800a9a2:	bf00      	nop
 800a9a4:	2000059c 	.word	0x2000059c

0800a9a8 <_getpid_r>:
 800a9a8:	f7f7 be8e 	b.w	80026c8 <_getpid>

0800a9ac <__sread>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	f000 f894 	bl	800aae0 <_read_r>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	bfab      	itete	ge
 800a9bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9be:	89a3      	ldrhlt	r3, [r4, #12]
 800a9c0:	181b      	addge	r3, r3, r0
 800a9c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9c6:	bfac      	ite	ge
 800a9c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ca:	81a3      	strhlt	r3, [r4, #12]
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <__swrite>:
 800a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	461f      	mov	r7, r3
 800a9d4:	898b      	ldrh	r3, [r1, #12]
 800a9d6:	05db      	lsls	r3, r3, #23
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	4616      	mov	r6, r2
 800a9de:	d505      	bpl.n	800a9ec <__swrite+0x1e>
 800a9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f000 f868 	bl	800aabc <_lseek_r>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	4632      	mov	r2, r6
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa02:	f000 b817 	b.w	800aa34 <_write_r>

0800aa06 <__sseek>:
 800aa06:	b510      	push	{r4, lr}
 800aa08:	460c      	mov	r4, r1
 800aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0e:	f000 f855 	bl	800aabc <_lseek_r>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	bf15      	itete	ne
 800aa18:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa22:	81a3      	strheq	r3, [r4, #12]
 800aa24:	bf18      	it	ne
 800aa26:	81a3      	strhne	r3, [r4, #12]
 800aa28:	bd10      	pop	{r4, pc}

0800aa2a <__sclose>:
 800aa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2e:	f000 b813 	b.w	800aa58 <_close_r>
	...

0800aa34 <_write_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_write_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f7 fe7f 	bl	8002746 <_write>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_write_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_write_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	2000059c 	.word	0x2000059c

0800aa58 <_close_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d06      	ldr	r5, [pc, #24]	; (800aa74 <_close_r+0x1c>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	602b      	str	r3, [r5, #0]
 800aa64:	f7f7 fe8b 	bl	800277e <_close>
 800aa68:	1c43      	adds	r3, r0, #1
 800aa6a:	d102      	bne.n	800aa72 <_close_r+0x1a>
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	b103      	cbz	r3, 800aa72 <_close_r+0x1a>
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	2000059c 	.word	0x2000059c

0800aa78 <_fstat_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4d07      	ldr	r5, [pc, #28]	; (800aa98 <_fstat_r+0x20>)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	4608      	mov	r0, r1
 800aa82:	4611      	mov	r1, r2
 800aa84:	602b      	str	r3, [r5, #0]
 800aa86:	f7f7 fe86 	bl	8002796 <_fstat>
 800aa8a:	1c43      	adds	r3, r0, #1
 800aa8c:	d102      	bne.n	800aa94 <_fstat_r+0x1c>
 800aa8e:	682b      	ldr	r3, [r5, #0]
 800aa90:	b103      	cbz	r3, 800aa94 <_fstat_r+0x1c>
 800aa92:	6023      	str	r3, [r4, #0]
 800aa94:	bd38      	pop	{r3, r4, r5, pc}
 800aa96:	bf00      	nop
 800aa98:	2000059c 	.word	0x2000059c

0800aa9c <_isatty_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d06      	ldr	r5, [pc, #24]	; (800aab8 <_isatty_r+0x1c>)
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	602b      	str	r3, [r5, #0]
 800aaa8:	f7f7 fe85 	bl	80027b6 <_isatty>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d102      	bne.n	800aab6 <_isatty_r+0x1a>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	b103      	cbz	r3, 800aab6 <_isatty_r+0x1a>
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	2000059c 	.word	0x2000059c

0800aabc <_lseek_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	4d07      	ldr	r5, [pc, #28]	; (800aadc <_lseek_r+0x20>)
 800aac0:	4604      	mov	r4, r0
 800aac2:	4608      	mov	r0, r1
 800aac4:	4611      	mov	r1, r2
 800aac6:	2200      	movs	r2, #0
 800aac8:	602a      	str	r2, [r5, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	f7f7 fe7e 	bl	80027cc <_lseek>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_lseek_r+0x1e>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_lseek_r+0x1e>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	2000059c 	.word	0x2000059c

0800aae0 <_read_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_read_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7f7 fe0c 	bl	800270c <_read>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_read_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_read_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	2000059c 	.word	0x2000059c

0800ab04 <_init>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	bf00      	nop
 800ab08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0a:	bc08      	pop	{r3}
 800ab0c:	469e      	mov	lr, r3
 800ab0e:	4770      	bx	lr

0800ab10 <_fini>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr
