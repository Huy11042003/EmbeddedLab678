
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000303c  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc04  0800bc04  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc04  0800bc04  0001bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc0c  0800bc0c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc10  0800bc10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800bc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000b90  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c20  20000c20  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001edfb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000435f  00000000  00000000  0003eebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00043220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  000448c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002647a  00000000  00000000  00045da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f54d  00000000  00000000  0006c21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dffec  00000000  00000000  0008b767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016b753  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061bc  00000000  00000000  0016b7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bb0 	.word	0x08008bb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008bb0 	.word	0x08008bb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_ADC1_Init+0x108>)
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x10c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_ADC1_Init+0x108>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <MX_ADC1_Init+0x110>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_ADC1_Init+0x108>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_ADC1_Init+0x108>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e04:	f002 fb06 	bl	8003414 <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f001 fddb 	bl	80029c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e12:	2308      	movs	r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e24:	f002 fc68 	bl	80036f8 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f001 fdcb 	bl	80029c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e40:	f002 fc5a 	bl	80036f8 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f001 fdbd 	bl	80029c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e5c:	f002 fc4c 	bl	80036f8 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e66:	f001 fdaf 	bl	80029c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e78:	f002 fc3e 	bl	80036f8 <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e82:	f001 fda1 	bl	80029c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0x108>)
 8000e94:	f002 fc30 	bl	80036f8 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e9e:	f001 fd93 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000dc 	.word	0x200000dc
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <HAL_ADC_MspInit+0x110>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d171      	bne.n	8000fbe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0x118>)
 8000f42:	f003 fb8d 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0x11c>)
 8000f5a:	f003 fb81 	bl	8004660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f002 ff5a 	bl	8003e5c <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fae:	f001 fd0b 	bl	80029c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0x120>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000124 	.word	0x20000124
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <button_init+0x14>)
 8000fea:	f003 fcd5 	bl	8004998 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <button_Scan>:

void button_Scan(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2108      	movs	r1, #8
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <button_Scan+0xc8>)
 8001004:	f003 fcc8 	bl	8004998 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	482c      	ldr	r0, [pc, #176]	; (80010c0 <button_Scan+0xc8>)
 800100e:	f003 fcc3 	bl	8004998 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001012:	230a      	movs	r3, #10
 8001014:	2202      	movs	r2, #2
 8001016:	492b      	ldr	r1, [pc, #172]	; (80010c4 <button_Scan+0xcc>)
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <button_Scan+0xd0>)
 800101a:	f004 fc6e 	bl	80058fa <HAL_SPI_Receive>
	  int button_index = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e03f      	b.n	80010ae <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db06      	blt.n	8001042 <button_Scan+0x4a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc03      	bgt.n	8001042 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e018      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dd07      	ble.n	8001058 <button_Scan+0x60>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b07      	cmp	r3, #7
 800104c:	dc04      	bgt.n	8001058 <button_Scan+0x60>
			  button_index = 7 - i;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f1c3 0307 	rsb	r3, r3, #7
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00d      	b.n	8001074 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dd06      	ble.n	800106c <button_Scan+0x74>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	dc03      	bgt.n	800106c <button_Scan+0x74>
			  button_index = i + 4;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3304      	adds	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e003      	b.n	8001074 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1c3 0317 	rsb	r3, r3, #23
 8001072:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <button_Scan+0xcc>)
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	897b      	ldrh	r3, [r7, #10]
 800107a:	4013      	ands	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <button_Scan+0x96>
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <button_Scan+0xd4>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2100      	movs	r1, #0
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800108c:	e009      	b.n	80010a2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <button_Scan+0xd4>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <button_Scan+0xd4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	ddbc      	ble.n	800102e <button_Scan+0x36>
	  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	200000ac 	.word	0x200000ac
 80010c8:	200002ac 	.word	0x200002ac
 80010cc:	20000184 	.word	0x20000184

080010d0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <buzzer_init+0x10>)
 80010d8:	f005 f950 	bl	800637c <HAL_TIM_PWM_Start>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000304 	.word	0x20000304

080010e4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <buzzer_SetVolume+0x28>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <buzzer_SetVolume+0x28>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x2c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000ae 	.word	0x200000ae
 8001110:	20000304 	.word	0x20000304

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x3c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x3c>)
 8001124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x3c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2038      	movs	r0, #56	; 0x38
 800113c:	f002 fe57 	bl	8003dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001140:	2038      	movs	r0, #56	; 0x38
 8001142:	f002 fe70 	bl	8003e26 <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_FSMC_Init+0xec>)
 8001182:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001186:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_FSMC_Init+0xec>)
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <MX_FSMC_Init+0xf0>)
 800118c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_FSMC_Init+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_FSMC_Init+0xec>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_FSMC_Init+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_FSMC_Init+0xec>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_FSMC_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_FSMC_Init+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_FSMC_Init+0xec>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_FSMC_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_FSMC_Init+0xec>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_FSMC_Init+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_FSMC_Init+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_FSMC_Init+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80011e6:	230f      	movs	r3, #15
 80011e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80011ea:	230f      	movs	r3, #15
 80011ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80011ee:	233c      	movs	r3, #60	; 0x3c
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80011fa:	2311      	movs	r3, #17
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001202:	2308      	movs	r3, #8
 8001204:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800120a:	2309      	movs	r3, #9
 800120c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001216:	2311      	movs	r3, #17
 8001218:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800121e:	463a      	mov	r2, r7
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_FSMC_Init+0xec>)
 8001228:	f004 ff4a 	bl	80060c0 <HAL_SRAM_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001232:	f001 fbc9 	bl	80029c8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001a4 	.word	0x200001a4
 8001244:	a0000104 	.word	0xa0000104

08001248 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_FSMC_MspInit+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d131      	bne.n	80012c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_FSMC_MspInit+0x88>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6393      	str	r3, [r2, #56]	; 0x38
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_FSMC_MspInit+0x8c>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001286:	f64f 7388 	movw	r3, #65416	; 0xff88
 800128a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001298:	230c      	movs	r3, #12
 800129a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_FSMC_MspInit+0x90>)
 80012a2:	f003 f9dd 	bl	8004660 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012a6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80012aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012b8:	230c      	movs	r3, #12
 80012ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_FSMC_MspInit+0x94>)
 80012c2:	f003 f9cd 	bl	8004660 <HAL_GPIO_Init>
 80012c6:	e000      	b.n	80012ca <HAL_FSMC_MspInit+0x82>
    return;
 80012c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000b0 	.word	0x200000b0
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012e8:	f7ff ffae 	bl	8001248 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a75      	ldr	r2, [pc, #468]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	4b6f      	ldr	r3, [pc, #444]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a6e      	ldr	r2, [pc, #440]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a67      	ldr	r2, [pc, #412]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 800134c:	f043 0320 	orr.w	r3, r3, #32
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a60      	ldr	r2, [pc, #384]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a59      	ldr	r2, [pc, #356]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <MX_GPIO_Init+0x1f4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2170      	movs	r1, #112	; 0x70
 80013ee:	483f      	ldr	r0, [pc, #252]	; (80014ec <MX_GPIO_Init+0x1f8>)
 80013f0:	f003 fad2 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fa:	483d      	ldr	r0, [pc, #244]	; (80014f0 <MX_GPIO_Init+0x1fc>)
 80013fc:	f003 facc 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	483b      	ldr	r0, [pc, #236]	; (80014f4 <MX_GPIO_Init+0x200>)
 8001406:	f003 fac7 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	4839      	ldr	r0, [pc, #228]	; (80014f8 <MX_GPIO_Init+0x204>)
 8001412:	f003 fac1 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2108      	movs	r1, #8
 800141a:	4838      	ldr	r0, [pc, #224]	; (80014fc <MX_GPIO_Init+0x208>)
 800141c:	f003 fabc 	bl	8004998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001420:	2370      	movs	r3, #112	; 0x70
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	482d      	ldr	r0, [pc, #180]	; (80014ec <MX_GPIO_Init+0x1f8>)
 8001438:	f003 f912 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4826      	ldr	r0, [pc, #152]	; (80014f0 <MX_GPIO_Init+0x1fc>)
 8001456:	f003 f903 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4822      	ldr	r0, [pc, #136]	; (80014f8 <MX_GPIO_Init+0x204>)
 800146e:	f003 f8f7 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001472:	2330      	movs	r3, #48	; 0x30
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_GPIO_Init+0x1fc>)
 8001486:	f003 f8eb 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_GPIO_Init+0x200>)
 80014a2:	f003 f8dd 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80014a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_GPIO_Init+0x204>)
 80014c0:	f003 f8ce 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80014c4:	2308      	movs	r3, #8
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	4808      	ldr	r0, [pc, #32]	; (80014fc <MX_GPIO_Init+0x208>)
 80014dc:	f003 f8c0 	bl	8004660 <HAL_GPIO_Init>

}
 80014e0:	bf00      	nop
 80014e2:	3738      	adds	r7, #56	; 0x38
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020c00 	.word	0x40020c00

08001500 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_I2C1_Init+0x50>)
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <MX_I2C1_Init+0x54>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_I2C1_Init+0x50>)
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_I2C1_Init+0x58>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_I2C1_Init+0x50>)
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_I2C1_Init+0x50>)
 800153e:	f003 fa5f 	bl	8004a00 <HAL_I2C_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f001 fa3e 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200001f4 	.word	0x200001f4
 8001554:	40005400 	.word	0x40005400
 8001558:	000186a0 	.word	0x000186a0

0800155c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_I2C_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12b      	bne.n	80015d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	2312      	movs	r3, #18
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015aa:	2304      	movs	r3, #4
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <HAL_I2C_MspInit+0x8c>)
 80015b6:	f003 f853 	bl	8004660 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 80015c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40005400 	.word	0x40005400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400

080015ec <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <LCD_WR_REG+0x1c>)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	8013      	strh	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	600ffffe 	.word	0x600ffffe

0800160c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <LCD_WR_DATA+0x1c>)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	8053      	strh	r3, [r2, #2]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	600ffffe 	.word	0x600ffffe

0800162c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <LCD_RD_DATA+0x20>)
 8001634:	885b      	ldrh	r3, [r3, #2]
 8001636:	b29b      	uxth	r3, r3
 8001638:	80fb      	strh	r3, [r7, #6]
	return ram;
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	b29b      	uxth	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	600ffffe 	.word	0x600ffffe

08001650 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4604      	mov	r4, r0
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	4623      	mov	r3, r4
 8001660:	80fb      	strh	r3, [r7, #6]
 8001662:	4603      	mov	r3, r0
 8001664:	80bb      	strh	r3, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	807b      	strh	r3, [r7, #2]
 800166a:	4613      	mov	r3, r2
 800166c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800166e:	202a      	movs	r0, #42	; 0x2a
 8001670:	f7ff ffbc 	bl	80015ec <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ffc6 	bl	800160c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffc0 	bl	800160c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffba 	bl	800160c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ffb4 	bl	800160c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80016a4:	202b      	movs	r0, #43	; 0x2b
 80016a6:	f7ff ffa1 	bl	80015ec <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ffab 	bl	800160c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ffa5 	bl	800160c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80016c2:	883b      	ldrh	r3, [r7, #0]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff9f 	bl	800160c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff99 	bl	800160c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80016da:	202c      	movs	r0, #44	; 0x2c
 80016dc:	f7ff ff86 	bl	80015ec <LCD_WR_REG>
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}

080016e8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <lcd_Clear+0x60>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <lcd_Clear+0x60>)
 80016fc:	885b      	ldrh	r3, [r3, #2]
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	2100      	movs	r1, #0
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff ffa3 	bl	8001650 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800170a:	2300      	movs	r3, #0
 800170c:	81fb      	strh	r3, [r7, #14]
 800170e:	e011      	b.n	8001734 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001710:	2300      	movs	r3, #0
 8001712:	81bb      	strh	r3, [r7, #12]
 8001714:	e006      	b.n	8001724 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff77 	bl	800160c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800171e:	89bb      	ldrh	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	81bb      	strh	r3, [r7, #12]
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <lcd_Clear+0x60>)
 8001726:	885b      	ldrh	r3, [r3, #2]
 8001728:	89ba      	ldrh	r2, [r7, #12]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3f3      	bcc.n	8001716 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	3301      	adds	r3, #1
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <lcd_Clear+0x60>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	89fa      	ldrh	r2, [r7, #14]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3e8      	bcc.n	8001710 <lcd_Clear+0x28>
		}
	}
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000248 	.word	0x20000248

0800174c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
 8001756:	460b      	mov	r3, r1
 8001758:	80bb      	strh	r3, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	88fa      	ldrh	r2, [r7, #6]
 8001762:	88b9      	ldrh	r1, [r7, #4]
 8001764:	88f8      	ldrh	r0, [r7, #6]
 8001766:	f7ff ff73 	bl	8001650 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff4d 	bl	800160c <LCD_WR_DATA>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 800177a:	b590      	push	{r4, r7, lr}
 800177c:	b08d      	sub	sp, #52	; 0x34
 800177e:	af00      	add	r7, sp, #0
 8001780:	4604      	mov	r4, r0
 8001782:	4608      	mov	r0, r1
 8001784:	4611      	mov	r1, r2
 8001786:	461a      	mov	r2, r3
 8001788:	4623      	mov	r3, r4
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	4603      	mov	r3, r0
 800178e:	80bb      	strh	r3, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80017a8:	883a      	ldrh	r2, [r7, #0]
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80017b4:	88bb      	ldrh	r3, [r7, #4]
 80017b6:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dd02      	ble.n	80017c4 <lcd_DrawLine+0x4a>
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e00b      	b.n	80017dc <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <lcd_DrawLine+0x56>
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e005      	b.n	80017dc <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	425b      	negs	r3, r3
 80017da:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dd02      	ble.n	80017e8 <lcd_DrawLine+0x6e>
 80017e2:	2301      	movs	r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e00b      	b.n	8001800 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <lcd_DrawLine+0x7a>
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	e005      	b.n	8001800 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	425b      	negs	r3, r3
 80017fe:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	429a      	cmp	r2, r3
 8001806:	dd02      	ble.n	800180e <lcd_DrawLine+0x94>
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	e001      	b.n	8001812 <lcd_DrawLine+0x98>
	else distance=delta_y;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001812:	2300      	movs	r3, #0
 8001814:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001816:	e02b      	b.n	8001870 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	b29b      	uxth	r3, r3
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	b291      	uxth	r1, r2
 8001820:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff91 	bl	800174c <lcd_DrawPoint>
		xerr+=delta_x;
 800182a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	4413      	add	r3, r2
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800183a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	429a      	cmp	r2, r3
 8001840:	dd07      	ble.n	8001852 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	429a      	cmp	r2, r3
 8001858:	dd07      	ble.n	800186a <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4413      	add	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800186a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800186c:	3301      	adds	r3, #1
 800186e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001870:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	429a      	cmp	r2, r3
 8001876:	dacf      	bge.n	8001818 <lcd_DrawLine+0x9e>
		}
	}
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3734      	adds	r7, #52	; 0x34
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
	...

08001884 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4603      	mov	r3, r0
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
 800189e:	4613      	mov	r3, r2
 80018a0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf14      	ite	ne
 80018c6:	2301      	movne	r3, #1
 80018c8:	2300      	moveq	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	fb12 f303 	smulbb	r3, r2, r3
 80018da:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	3b20      	subs	r3, #32
 80018e0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4413      	add	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29c      	uxth	r4, r3
 80018f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	88b9      	ldrh	r1, [r7, #4]
 8001902:	88f8      	ldrh	r0, [r7, #6]
 8001904:	4622      	mov	r2, r4
 8001906:	f7ff fea3 	bl	8001650 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800190a:	2300      	movs	r3, #0
 800190c:	827b      	strh	r3, [r7, #18]
 800190e:	e07a      	b.n	8001a06 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001910:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d028      	beq.n	800196a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001918:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800191c:	2b10      	cmp	r3, #16
 800191e:	d108      	bne.n	8001932 <lcd_ShowChar+0xae>
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	8a7b      	ldrh	r3, [r7, #18]
 8001924:	493c      	ldr	r1, [pc, #240]	; (8001a18 <lcd_ShowChar+0x194>)
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	440a      	add	r2, r1
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	75fb      	strb	r3, [r7, #23]
 8001930:	e01b      	b.n	800196a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001932:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001936:	2b18      	cmp	r3, #24
 8001938:	d10b      	bne.n	8001952 <lcd_ShowChar+0xce>
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	8a79      	ldrh	r1, [r7, #18]
 800193e:	4837      	ldr	r0, [pc, #220]	; (8001a1c <lcd_ShowChar+0x198>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4403      	add	r3, r0
 800194a:	440b      	add	r3, r1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	75fb      	strb	r3, [r7, #23]
 8001950:	e00b      	b.n	800196a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001952:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001956:	2b20      	cmp	r3, #32
 8001958:	d15a      	bne.n	8001a10 <lcd_ShowChar+0x18c>
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	8a7b      	ldrh	r3, [r7, #18]
 800195e:	4930      	ldr	r1, [pc, #192]	; (8001a20 <lcd_ShowChar+0x19c>)
 8001960:	0192      	lsls	r2, r2, #6
 8001962:	440a      	add	r2, r1
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800196a:	2300      	movs	r3, #0
 800196c:	75bb      	strb	r3, [r7, #22]
 800196e:	e044      	b.n	80019fa <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001970:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001974:	2b00      	cmp	r3, #0
 8001976:	d120      	bne.n	80019ba <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001978:	7dfa      	ldrb	r2, [r7, #23]
 800197a:	7dbb      	ldrb	r3, [r7, #22]
 800197c:	fa42 f303 	asr.w	r3, r2, r3
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <lcd_ShowChar+0x10e>
 8001988:	883b      	ldrh	r3, [r7, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fe3e 	bl	800160c <LCD_WR_DATA>
 8001990:	e003      	b.n	800199a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001992:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe39 	bl	800160c <LCD_WR_DATA>
				m++;
 800199a:	7d7b      	ldrb	r3, [r7, #21]
 800199c:	3301      	adds	r3, #1
 800199e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019a0:	7d7b      	ldrb	r3, [r7, #21]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019a8:	fb02 f201 	mul.w	r2, r2, r1
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11f      	bne.n	80019f4 <lcd_ShowChar+0x170>
				{
					m=0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	757b      	strb	r3, [r7, #21]
					break;
 80019b8:	e022      	b.n	8001a00 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80019ba:	7dfa      	ldrb	r2, [r7, #23]
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	fa42 f303 	asr.w	r3, r2, r3
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <lcd_ShowChar+0x152>
 80019ca:	883a      	ldrh	r2, [r7, #0]
 80019cc:	88b9      	ldrh	r1, [r7, #4]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff febb 	bl	800174c <lcd_DrawPoint>
				x++;
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	3301      	adds	r3, #1
 80019da:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	1ad2      	subs	r2, r2, r3
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d105      	bne.n	80019f4 <lcd_ShowChar+0x170>
				{
					x=x0;
 80019e8:	8a3b      	ldrh	r3, [r7, #16]
 80019ea:	80fb      	strh	r3, [r7, #6]
					y++;
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	80bb      	strh	r3, [r7, #4]
					break;
 80019f2:	e005      	b.n	8001a00 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80019f4:	7dbb      	ldrb	r3, [r7, #22]
 80019f6:	3301      	adds	r3, #1
 80019f8:	75bb      	strb	r3, [r7, #22]
 80019fa:	7dbb      	ldrb	r3, [r7, #22]
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d9b7      	bls.n	8001970 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a00:	8a7b      	ldrh	r3, [r7, #18]
 8001a02:	3301      	adds	r3, #1
 8001a04:	827b      	strh	r3, [r7, #18]
 8001a06:	8a7a      	ldrh	r2, [r7, #18]
 8001a08:	89bb      	ldrh	r3, [r7, #12]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d380      	bcc.n	8001910 <lcd_ShowChar+0x8c>
 8001a0e:	e000      	b.n	8001a12 <lcd_ShowChar+0x18e>
		else return;
 8001a10:	bf00      	nop
				}
			}
		}
	}
}
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	08008c30 	.word	0x08008c30
 8001a1c:	08009220 	.word	0x08009220
 8001a20:	0800a3f0 	.word	0x0800a3f0

08001a24 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a38:	e004      	b.n	8001a44 <mypow+0x20>
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	79bb      	ldrb	r3, [r7, #6]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	71ba      	strb	r2, [r7, #6]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f5      	bne.n	8001a3a <mypow+0x16>
	return result;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	80fb      	strh	r3, [r7, #6]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80bb      	strh	r3, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	807b      	strh	r3, [r7, #2]
 8001a76:	4613      	mov	r3, r2
 8001a78:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e059      	b.n	8001b40 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001a8c:	887c      	ldrh	r4, [r7, #2]
 8001a8e:	787a      	ldrb	r2, [r7, #1]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f7ff ffc1 	bl	8001a24 <mypow>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	fbb4 f1f3 	udiv	r1, r4, r3
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <lcd_ShowIntNum+0xf8>)
 8001aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	1aca      	subs	r2, r1, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d121      	bne.n	8001b08 <lcd_ShowIntNum+0xac>
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	787b      	ldrb	r3, [r7, #1]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	429a      	cmp	r2, r3
 8001acc:	da1c      	bge.n	8001b08 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ace:	7b3b      	ldrb	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d117      	bne.n	8001b04 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	fb12 f303 	smulbb	r3, r2, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	8c3a      	ldrh	r2, [r7, #32]
 8001aea:	88b9      	ldrh	r1, [r7, #4]
 8001aec:	2300      	movs	r3, #0
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	2220      	movs	r2, #32
 8001afe:	f7ff fec1 	bl	8001884 <lcd_ShowChar>
				continue;
 8001b02:	e01a      	b.n	8001b3a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	7b7b      	ldrb	r3, [r7, #13]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	fb12 f303 	smulbb	r3, r2, r3
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b298      	uxth	r0, r3
 8001b1c:	7b3b      	ldrb	r3, [r7, #12]
 8001b1e:	3330      	adds	r3, #48	; 0x30
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8c3c      	ldrh	r4, [r7, #32]
 8001b24:	88b9      	ldrh	r1, [r7, #4]
 8001b26:	2300      	movs	r3, #0
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4623      	mov	r3, r4
 8001b36:	f7ff fea5 	bl	8001884 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	787b      	ldrb	r3, [r7, #1]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3a1      	bcc.n	8001a8c <lcd_ShowIntNum+0x30>
	}
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	cccccccd 	.word	0xcccccccd

08001b58 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b08d      	sub	sp, #52	; 0x34
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4608      	mov	r0, r1
 8001b62:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	81fb      	strh	r3, [r7, #14]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	81bb      	strh	r3, [r7, #12]
 8001b72:	460b      	mov	r3, r1
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint32_t num1;
	sizex=sizey/2;
 8001b7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	77bb      	strb	r3, [r7, #30]
	num1=num*100;
 8001b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b86:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c60 <lcd_ShowFloatNum+0x108>
 8001b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 3a90 	vmov	r3, s15
 8001b96:	61bb      	str	r3, [r7, #24]
	for(t=0;t<len;t++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77fb      	strb	r3, [r7, #31]
 8001b9c:	e057      	b.n	8001c4e <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	200a      	movs	r0, #10
 8001bae:	f7ff ff39 	bl	8001a24 <mypow>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <lcd_ShowFloatNum+0x10c>)
 8001bbc:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	1aca      	subs	r2, r1, r3
 8001bcc:	4613      	mov	r3, r2
 8001bce:	75fb      	strb	r3, [r7, #23]
		if(t==(len-2))
 8001bd0:	7ffa      	ldrb	r2, [r7, #31]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	3b02      	subs	r3, #2
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d11d      	bne.n	8001c16 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	3b02      	subs	r3, #2
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	7fbb      	ldrb	r3, [r7, #30]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	fb12 f303 	smulbb	r3, r2, r3
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	4413      	add	r3, r2
 8001bee:	b298      	uxth	r0, r3
 8001bf0:	88ba      	ldrh	r2, [r7, #4]
 8001bf2:	89b9      	ldrh	r1, [r7, #12]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	222e      	movs	r2, #46	; 0x2e
 8001c06:	f7ff fe3d 	bl	8001884 <lcd_ShowChar>
			t++;
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
			len+=1;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	3301      	adds	r3, #1
 8001c14:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	7fbb      	ldrb	r3, [r7, #30]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	fb12 f303 	smulbb	r3, r2, r3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	4413      	add	r3, r2
 8001c28:	b298      	uxth	r0, r3
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	3330      	adds	r3, #48	; 0x30
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	88bc      	ldrh	r4, [r7, #4]
 8001c32:	89b9      	ldrh	r1, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4623      	mov	r3, r4
 8001c44:	f7ff fe1e 	bl	8001884 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	77fb      	strb	r3, [r7, #31]
 8001c4e:	7ffa      	ldrb	r2, [r7, #31]
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3a3      	bcc.n	8001b9e <lcd_ShowFloatNum+0x46>
	}
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3724      	adds	r7, #36	; 0x24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	42c80000 	.word	0x42c80000
 8001c64:	cccccccd 	.word	0xcccccccd

08001c68 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <lcd_SetDir+0x44>)
 8001c84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c88:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <lcd_SetDir+0x44>)
 8001c8c:	22f0      	movs	r2, #240	; 0xf0
 8001c8e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c90:	e006      	b.n	8001ca0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <lcd_SetDir+0x44>)
 8001c94:	22f0      	movs	r2, #240	; 0xf0
 8001c96:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <lcd_SetDir+0x44>)
 8001c9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c9e:	805a      	strh	r2, [r3, #2]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000248 	.word	0x20000248

08001cb0 <lcd_init>:


void lcd_init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cba:	48aa      	ldr	r0, [pc, #680]	; (8001f64 <lcd_init+0x2b4>)
 8001cbc:	f002 fe6c 	bl	8004998 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cc4:	f001 fb82 	bl	80033cc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cce:	48a5      	ldr	r0, [pc, #660]	; (8001f64 <lcd_init+0x2b4>)
 8001cd0:	f002 fe62 	bl	8004998 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd8:	f001 fb78 	bl	80033cc <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff ffc3 	bl	8001c68 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001ce2:	20d3      	movs	r0, #211	; 0xd3
 8001ce4:	f7ff fc82 	bl	80015ec <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001ce8:	f7ff fca0 	bl	800162c <LCD_RD_DATA>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b9d      	ldr	r3, [pc, #628]	; (8001f68 <lcd_init+0x2b8>)
 8001cf2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cf4:	f7ff fc9a 	bl	800162c <LCD_RD_DATA>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b9a      	ldr	r3, [pc, #616]	; (8001f68 <lcd_init+0x2b8>)
 8001cfe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d00:	f7ff fc94 	bl	800162c <LCD_RD_DATA>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b97      	ldr	r3, [pc, #604]	; (8001f68 <lcd_init+0x2b8>)
 8001d0a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d0c:	4b96      	ldr	r3, [pc, #600]	; (8001f68 <lcd_init+0x2b8>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b94      	ldr	r3, [pc, #592]	; (8001f68 <lcd_init+0x2b8>)
 8001d16:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d18:	f7ff fc88 	bl	800162c <LCD_RD_DATA>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b91      	ldr	r3, [pc, #580]	; (8001f68 <lcd_init+0x2b8>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b8f      	ldr	r3, [pc, #572]	; (8001f68 <lcd_init+0x2b8>)
 8001d2a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d2c:	20cf      	movs	r0, #207	; 0xcf
 8001d2e:	f7ff fc5d 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fc6a 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d38:	20c1      	movs	r0, #193	; 0xc1
 8001d3a:	f7ff fc67 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d3e:	2030      	movs	r0, #48	; 0x30
 8001d40:	f7ff fc64 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d44:	20ed      	movs	r0, #237	; 0xed
 8001d46:	f7ff fc51 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d4a:	2064      	movs	r0, #100	; 0x64
 8001d4c:	f7ff fc5e 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7ff fc5b 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d56:	2012      	movs	r0, #18
 8001d58:	f7ff fc58 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d5c:	2081      	movs	r0, #129	; 0x81
 8001d5e:	f7ff fc55 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d62:	20e8      	movs	r0, #232	; 0xe8
 8001d64:	f7ff fc42 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d68:	2085      	movs	r0, #133	; 0x85
 8001d6a:	f7ff fc4f 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f7ff fc4c 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d74:	207a      	movs	r0, #122	; 0x7a
 8001d76:	f7ff fc49 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d7a:	20cb      	movs	r0, #203	; 0xcb
 8001d7c:	f7ff fc36 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d80:	2039      	movs	r0, #57	; 0x39
 8001d82:	f7ff fc43 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d86:	202c      	movs	r0, #44	; 0x2c
 8001d88:	f7ff fc40 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fc3d 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d92:	2034      	movs	r0, #52	; 0x34
 8001d94:	f7ff fc3a 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7ff fc37 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d9e:	20f7      	movs	r0, #247	; 0xf7
 8001da0:	f7ff fc24 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001da4:	2020      	movs	r0, #32
 8001da6:	f7ff fc31 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001daa:	20ea      	movs	r0, #234	; 0xea
 8001dac:	f7ff fc1e 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fc2b 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fc28 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001dbc:	20c0      	movs	r0, #192	; 0xc0
 8001dbe:	f7ff fc15 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001dc2:	201b      	movs	r0, #27
 8001dc4:	f7ff fc22 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001dc8:	20c1      	movs	r0, #193	; 0xc1
 8001dca:	f7ff fc0f 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff fc1c 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001dd4:	20c5      	movs	r0, #197	; 0xc5
 8001dd6:	f7ff fc09 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001dda:	2030      	movs	r0, #48	; 0x30
 8001ddc:	f7ff fc16 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001de0:	2030      	movs	r0, #48	; 0x30
 8001de2:	f7ff fc13 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001de6:	20c7      	movs	r0, #199	; 0xc7
 8001de8:	f7ff fc00 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001dec:	20b7      	movs	r0, #183	; 0xb7
 8001dee:	f7ff fc0d 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001df2:	2036      	movs	r0, #54	; 0x36
 8001df4:	f7ff fbfa 	bl	80015ec <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001df8:	2008      	movs	r0, #8
 8001dfa:	f7ff fc07 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001dfe:	203a      	movs	r0, #58	; 0x3a
 8001e00:	f7ff fbf4 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e04:	2055      	movs	r0, #85	; 0x55
 8001e06:	f7ff fc01 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e0a:	20b1      	movs	r0, #177	; 0xb1
 8001e0c:	f7ff fbee 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fbfb 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e16:	201a      	movs	r0, #26
 8001e18:	f7ff fbf8 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e1c:	20b6      	movs	r0, #182	; 0xb6
 8001e1e:	f7ff fbe5 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e22:	200a      	movs	r0, #10
 8001e24:	f7ff fbf2 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e28:	20a2      	movs	r0, #162	; 0xa2
 8001e2a:	f7ff fbef 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e2e:	20f2      	movs	r0, #242	; 0xf2
 8001e30:	f7ff fbdc 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff fbe9 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e3a:	2026      	movs	r0, #38	; 0x26
 8001e3c:	f7ff fbd6 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff fbe3 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e46:	20e0      	movs	r0, #224	; 0xe0
 8001e48:	f7ff fbd0 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f7ff fbdd 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e52:	202a      	movs	r0, #42	; 0x2a
 8001e54:	f7ff fbda 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e58:	2028      	movs	r0, #40	; 0x28
 8001e5a:	f7ff fbd7 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e5e:	2008      	movs	r0, #8
 8001e60:	f7ff fbd4 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e64:	200e      	movs	r0, #14
 8001e66:	f7ff fbd1 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e6a:	2008      	movs	r0, #8
 8001e6c:	f7ff fbce 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e70:	2054      	movs	r0, #84	; 0x54
 8001e72:	f7ff fbcb 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e76:	20a9      	movs	r0, #169	; 0xa9
 8001e78:	f7ff fbc8 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e7c:	2043      	movs	r0, #67	; 0x43
 8001e7e:	f7ff fbc5 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e82:	200a      	movs	r0, #10
 8001e84:	f7ff fbc2 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e88:	200f      	movs	r0, #15
 8001e8a:	f7ff fbbf 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff fbbc 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff fbb9 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fbb6 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fbb3 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001ea6:	20e1      	movs	r0, #225	; 0xe1
 8001ea8:	f7ff fba0 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fbad 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001eb2:	2015      	movs	r0, #21
 8001eb4:	f7ff fbaa 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001eb8:	2017      	movs	r0, #23
 8001eba:	f7ff fba7 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f7ff fba4 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ec4:	2011      	movs	r0, #17
 8001ec6:	f7ff fba1 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001eca:	2006      	movs	r0, #6
 8001ecc:	f7ff fb9e 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ed0:	202b      	movs	r0, #43	; 0x2b
 8001ed2:	f7ff fb9b 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001ed6:	2056      	movs	r0, #86	; 0x56
 8001ed8:	f7ff fb98 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001edc:	203c      	movs	r0, #60	; 0x3c
 8001ede:	f7ff fb95 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ee2:	2005      	movs	r0, #5
 8001ee4:	f7ff fb92 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ee8:	2010      	movs	r0, #16
 8001eea:	f7ff fb8f 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f7ff fb8c 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ef4:	203f      	movs	r0, #63	; 0x3f
 8001ef6:	f7ff fb89 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001efa:	203f      	movs	r0, #63	; 0x3f
 8001efc:	f7ff fb86 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f00:	200f      	movs	r0, #15
 8001f02:	f7ff fb83 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f06:	202b      	movs	r0, #43	; 0x2b
 8001f08:	f7ff fb70 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fb7d 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff fb7a 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff fb77 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f1e:	203f      	movs	r0, #63	; 0x3f
 8001f20:	f7ff fb74 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f24:	202a      	movs	r0, #42	; 0x2a
 8001f26:	f7ff fb61 	bl	80015ec <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff fb6e 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff fb6b 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fb68 	bl	800160c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f3c:	20ef      	movs	r0, #239	; 0xef
 8001f3e:	f7ff fb65 	bl	800160c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f42:	2011      	movs	r0, #17
 8001f44:	f7ff fb52 	bl	80015ec <LCD_WR_REG>
	HAL_Delay(120);
 8001f48:	2078      	movs	r0, #120	; 0x78
 8001f4a:	f001 fa3f 	bl	80033cc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f4e:	2029      	movs	r0, #41	; 0x29
 8001f50:	f7ff fb4c 	bl	80015ec <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5a:	4804      	ldr	r0, [pc, #16]	; (8001f6c <lcd_init+0x2bc>)
 8001f5c:	f002 fd1c 	bl	8004998 <HAL_GPIO_WritePin>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020800 	.word	0x40020800
 8001f68:	20000248 	.word	0x20000248
 8001f6c:	40020000 	.word	0x40020000

08001f70 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b08b      	sub	sp, #44	; 0x2c
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	81fb      	strh	r3, [r7, #14]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	81bb      	strh	r3, [r7, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f8e:	e048      	b.n	8002022 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d145      	bne.n	8002022 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f96:	89fa      	ldrh	r2, [r7, #14]
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <lcd_ShowStr+0xc4>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	1acb      	subs	r3, r1, r3
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dc3f      	bgt.n	800202c <lcd_ShowStr+0xbc>
 8001fac:	89ba      	ldrh	r2, [r7, #12]
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <lcd_ShowStr+0xc4>)
 8001fb0:	885b      	ldrh	r3, [r3, #2]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb8:	1acb      	subs	r3, r1, r3
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dc36      	bgt.n	800202c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d902      	bls.n	8001fcc <lcd_ShowStr+0x5c>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
 8001fca:	e02a      	b.n	8002022 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b0d      	cmp	r3, #13
 8001fd2:	d10b      	bne.n	8001fec <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001fd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	89bb      	ldrh	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001fe0:	8abb      	ldrh	r3, [r7, #20]
 8001fe2:	81fb      	strh	r3, [r7, #14]
					str++;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	e017      	b.n	800201c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	88fc      	ldrh	r4, [r7, #6]
 8001ff2:	89b9      	ldrh	r1, [r7, #12]
 8001ff4:	89f8      	ldrh	r0, [r7, #14]
 8001ff6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ffa:	9302      	str	r3, [sp, #8]
 8001ffc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4623      	mov	r3, r4
 8002008:	f7ff fc3c 	bl	8001884 <lcd_ShowChar>
					x+=sizey/2;
 800200c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	b29a      	uxth	r2, r3
 8002016:	89fb      	ldrh	r3, [r7, #14]
 8002018:	4413      	add	r3, r2
 800201a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3301      	adds	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1b2      	bne.n	8001f90 <lcd_ShowStr+0x20>
 800202a:	e000      	b.n	800202e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800202c:	bf00      	nop
			}
		}
	}
}
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	20000248 	.word	0x20000248

08002038 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <led7_Scan+0x104>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b3d      	ldr	r3, [pc, #244]	; (800213c <led7_Scan+0x104>)
 8002046:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <led7_Scan+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <led7_Scan+0x10c>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <led7_Scan+0x104>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b21b      	sxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b21b      	sxth	r3, r3
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <led7_Scan+0x104>)
 8002062:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <led7_Scan+0x108>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d847      	bhi.n	80020fc <led7_Scan+0xc4>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <led7_Scan+0x3c>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	080020a3 	.word	0x080020a3
 800207c:	080020c1 	.word	0x080020c1
 8002080:	080020df 	.word	0x080020df
	case 0:
		spi_buffer |= 0x00b0;
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <led7_Scan+0x104>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <led7_Scan+0x104>)
 8002090:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <led7_Scan+0x104>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <led7_Scan+0x104>)
 800209e:	801a      	strh	r2, [r3, #0]
		break;
 80020a0:	e02d      	b.n	80020fe <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <led7_Scan+0x104>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <led7_Scan+0x104>)
 80020ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <led7_Scan+0x104>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f023 0320 	bic.w	r3, r3, #32
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <led7_Scan+0x104>)
 80020bc:	801a      	strh	r2, [r3, #0]
		break;
 80020be:	e01e      	b.n	80020fe <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <led7_Scan+0x104>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <led7_Scan+0x104>)
 80020cc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <led7_Scan+0x104>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f023 0310 	bic.w	r3, r3, #16
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <led7_Scan+0x104>)
 80020da:	801a      	strh	r2, [r3, #0]
		break;
 80020dc:	e00f      	b.n	80020fe <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <led7_Scan+0x104>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <led7_Scan+0x104>)
 80020ea:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <led7_Scan+0x104>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <led7_Scan+0x104>)
 80020f8:	801a      	strh	r2, [r3, #0]
		break;
 80020fa:	e000      	b.n	80020fe <led7_Scan+0xc6>
	default:
		break;
 80020fc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <led7_Scan+0x108>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	425a      	negs	r2, r3
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	bf58      	it	pl
 8002110:	4253      	negpl	r3, r2
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <led7_Scan+0x108>)
 8002114:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <led7_Scan+0x110>)
 800211c:	f002 fc3c 	bl	8004998 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002120:	2301      	movs	r3, #1
 8002122:	2202      	movs	r2, #2
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <led7_Scan+0x104>)
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <led7_Scan+0x114>)
 8002128:	f003 faab 	bl	8005682 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800212c:	2201      	movs	r2, #1
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <led7_Scan+0x110>)
 8002132:	f002 fc31 	bl	8004998 <HAL_GPIO_WritePin>
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000000e 	.word	0x2000000e
 8002140:	200000b4 	.word	0x200000b4
 8002144:	20000000 	.word	0x20000000
 8002148:	40021800 	.word	0x40021800
 800214c:	200002ac 	.word	0x200002ac

08002150 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0e      	blt.n	8002182 <led7_SetDigit+0x32>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b09      	cmp	r3, #9
 8002168:	dc0b      	bgt.n	8002182 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <led7_SetDigit+0x40>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	b2d9      	uxtb	r1, r3
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <led7_SetDigit+0x44>)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4413      	add	r3, r2
 800217e:	460a      	mov	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
	}
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000004 	.word	0x20000004
 8002194:	20000000 	.word	0x20000000

08002198 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <led7_SetColon+0x20>
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <led7_SetColon+0x3c>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f023 0308 	bic.w	r3, r3, #8
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <led7_SetColon+0x3c>)
 80021b4:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80021b6:	e006      	b.n	80021c6 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <led7_SetColon+0x3c>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <led7_SetColon+0x3c>)
 80021c4:	801a      	strh	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000000e 	.word	0x2000000e

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021dc:	f001 f884 	bl	80032e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e0:	f000 f83c 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e4:	f7ff f886 	bl	80012f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80021e8:	f000 fe66 	bl	8002eb8 <MX_TIM2_Init>
  MX_SPI1_Init();
 80021ec:	f000 fd2e 	bl	8002c4c <MX_SPI1_Init>
  MX_FSMC_Init();
 80021f0:	f7fe ffb0 	bl	8001154 <MX_FSMC_Init>
  MX_I2C1_Init();
 80021f4:	f7ff f984 	bl	8001500 <MX_I2C1_Init>
  MX_TIM13_Init();
 80021f8:	f000 feaa 	bl	8002f50 <MX_TIM13_Init>
  MX_DMA_Init();
 80021fc:	f7fe ff8a 	bl	8001114 <MX_DMA_Init>
  MX_ADC1_Init();
 8002200:	f7fe fdd0 	bl	8000da4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002204:	f000 ffcc 	bl	80031a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002208:	f000 f892 	bl	8002330 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff fa6b 	bl	80016e8 <lcd_Clear>
 setup_adc();
 8002212:	f000 f927 	bl	8002464 <setup_adc>
  while (1)
  {
	  while(!flag_timer2);
 8002216:	bf00      	nop
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <main+0x7c>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0fb      	beq.n	8002218 <main+0x40>
	  flag_timer2 = 0;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <main+0x7c>)
 8002222:	2200      	movs	r2, #0
 8002224:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002226:	f7fe fee7 	bl	8000ff8 <button_Scan>
	  button_Handle();
 800222a:	f000 f8e9 	bl	8002400 <button_Handle>
	  test_LedDebug();
 800222e:	f000 f893 	bl	8002358 <test_LedDebug>
	  if(mode == 0) test_Adc();
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <main+0x80>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <main+0x66>
 800223a:	f000 fa45 	bl	80026c8 <test_Adc>
	  if(mode == 1) plot_graph();
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <main+0x80>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <main+0x72>
 8002246:	f000 f9a1 	bl	800258c <plot_graph>
	  digital_clock();
 800224a:	f000 fb1b 	bl	8002884 <digital_clock>
	  test_Buzzer();
 800224e:	f000 fafd 	bl	800284c <test_Buzzer>
  {
 8002252:	e7e0      	b.n	8002216 <main+0x3e>
 8002254:	200000c4 	.word	0x200000c4
 8002258:	200000b8 	.word	0x200000b8

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	; 0x50
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0320 	add.w	r3, r7, #32
 8002266:	2230      	movs	r2, #48	; 0x30
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f006 f86a 	bl	8008344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <SystemClock_Config+0xcc>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <SystemClock_Config+0xcc>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <SystemClock_Config+0xcc>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <SystemClock_Config+0xd0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <SystemClock_Config+0xd0>)
 80022a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <SystemClock_Config+0xd0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022bc:	2301      	movs	r3, #1
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c0:	2310      	movs	r3, #16
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c4:	2302      	movs	r3, #2
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022cc:	2308      	movs	r3, #8
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022d0:	23a8      	movs	r3, #168	; 0xa8
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022d8:	2304      	movs	r3, #4
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 0320 	add.w	r3, r7, #32
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fcd1 	bl	8004c88 <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022ec:	f000 fb6c 	bl	80029c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f0:	230f      	movs	r3, #15
 80022f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f4:	2302      	movs	r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002302:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002306:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	2105      	movs	r1, #5
 800230e:	4618      	mov	r0, r3
 8002310:	f002 ff32 	bl	8005178 <HAL_RCC_ClockConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800231a:	f000 fb55 	bl	80029c8 <Error_Handler>
  }
}
 800231e:	bf00      	nop
 8002320:	3750      	adds	r7, #80	; 0x50
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000

08002330 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	  timer_init();
 8002334:	f000 fc3a 	bl	8002bac <timer_init>
	  button_init();
 8002338:	f7fe fe52 	bl	8000fe0 <button_init>
	  lcd_init();
 800233c:	f7ff fcb8 	bl	8001cb0 <lcd_init>
	  uart_init_rs232();
 8002340:	f000 feca 	bl	80030d8 <uart_init_rs232>
	  sensor_init();
 8002344:	f000 fb46 	bl	80029d4 <sensor_init>
	  buzzer_init();
 8002348:	f7fe fec2 	bl	80010d0 <buzzer_init>
	  setTimer2(50);
 800234c:	2032      	movs	r0, #50	; 0x32
 800234e:	f000 fc37 	bl	8002bc0 <setTimer2>
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <test_LedDebug+0x3c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <test_LedDebug+0x40>)
 8002364:	fb83 1302 	smull	r1, r3, r3, r2
 8002368:	10d9      	asrs	r1, r3, #3
 800236a:	17d3      	asrs	r3, r2, #31
 800236c:	1ac9      	subs	r1, r1, r3
 800236e:	460b      	mov	r3, r1
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	1ad1      	subs	r1, r2, r3
 8002378:	b2ca      	uxtb	r2, r1
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <test_LedDebug+0x3c>)
 800237c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <test_LedDebug+0x3c>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002386:	2110      	movs	r1, #16
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <test_LedDebug+0x44>)
 800238a:	f002 fb1e 	bl	80049ca <HAL_GPIO_TogglePin>
	}
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200000c0 	.word	0x200000c0
 8002398:	66666667 	.word	0x66666667
 800239c:	40021000 	.word	0x40021000

080023a0 <isButtonUp>:

uint8_t isButtonUp()
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <isButtonUp+0x1c>)
 80023a6:	88db      	ldrh	r3, [r3, #6]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <isButtonUp+0x10>
        return 1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <isButtonUp+0x12>
    else
        return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	20000184 	.word	0x20000184

080023c0 <isButtonDown>:

uint8_t isButtonDown()
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <isButtonDown+0x1c>)
 80023c6:	89db      	ldrh	r3, [r3, #14]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <isButtonDown+0x10>
        return 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <isButtonDown+0x12>
    else
        return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000184 	.word	0x20000184

080023e0 <isButtonRight>:

uint8_t isButtonRight()
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <isButtonRight+0x1c>)
 80023e6:	8adb      	ldrh	r3, [r3, #22]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <isButtonRight+0x10>
        return 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <isButtonRight+0x12>
    else
        return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	20000184 	.word	0x20000184

08002400 <button_Handle>:

uint8_t count_adc = 0;

void button_Handle() {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
    if (button_count[0] == 1) {
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <button_Handle+0x54>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d121      	bne.n	8002450 <button_Handle+0x50>
    	mode++;
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <button_Handle+0x58>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <button_Handle+0x58>)
 8002414:	6013      	str	r3, [r2, #0]
    	lcd_Clear(BLACK);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff f966 	bl	80016e8 <lcd_Clear>
    	if (mode > 1) mode = 0;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <button_Handle+0x58>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	dd02      	ble.n	800242a <button_Handle+0x2a>
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <button_Handle+0x58>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
    	if(mode == 0)
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <button_Handle+0x58>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <button_Handle+0x36>
    		setup_adc();
 8002432:	f000 f817 	bl	8002464 <setup_adc>
    	if (mode == 1){
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <button_Handle+0x58>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <button_Handle+0x50>
    		draw_axes();
 800243e:	f000 f881 	bl	8002544 <draw_axes>
    		x = 0;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <button_Handle+0x5c>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    		old_power = 0;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <button_Handle+0x60>)
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
    	}
    }
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000184 	.word	0x20000184
 8002458:	200000b8 	.word	0x200000b8
 800245c:	20000010 	.word	0x20000010
 8002460:	200000bc 	.word	0x200000bc

08002464 <setup_adc>:

void setup_adc(){
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af04      	add	r7, sp, #16
	lcd_ShowStr(10, 100, "Power:", RED, BLACK, 16, 0);
 800246a:	2300      	movs	r3, #0
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	2310      	movs	r3, #16
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2300      	movs	r3, #0
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800247a:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <setup_adc+0xc4>)
 800247c:	2164      	movs	r1, #100	; 0x64
 800247e:	200a      	movs	r0, #10
 8002480:	f7ff fd76 	bl	8001f70 <lcd_ShowStr>
	lcd_ShowStr(200, 100, "mW", RED, BLACK, 16, 0);
 8002484:	2300      	movs	r3, #0
 8002486:	9302      	str	r3, [sp, #8]
 8002488:	2310      	movs	r3, #16
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <setup_adc+0xc8>)
 8002496:	2164      	movs	r1, #100	; 0x64
 8002498:	20c8      	movs	r0, #200	; 0xc8
 800249a:	f7ff fd69 	bl	8001f70 <lcd_ShowStr>
	lcd_ShowStr(10, 120, "Light:", RED, BLACK, 16, 0);
 800249e:	2300      	movs	r3, #0
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	2310      	movs	r3, #16
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024ae:	4a20      	ldr	r2, [pc, #128]	; (8002530 <setup_adc+0xcc>)
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	200a      	movs	r0, #10
 80024b4:	f7ff fd5c 	bl	8001f70 <lcd_ShowStr>
	lcd_ShowStr(10, 140, "Humidity:", RED, BLACK, 16, 0);
 80024b8:	2300      	movs	r3, #0
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	2310      	movs	r3, #16
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <setup_adc+0xd0>)
 80024ca:	218c      	movs	r1, #140	; 0x8c
 80024cc:	200a      	movs	r0, #10
 80024ce:	f7ff fd4f 	bl	8001f70 <lcd_ShowStr>
	lcd_ShowStr(180, 140, "%", RED, BLACK, 16, 0);
 80024d2:	2300      	movs	r3, #0
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	2310      	movs	r3, #16
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	2300      	movs	r3, #0
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <setup_adc+0xd4>)
 80024e4:	218c      	movs	r1, #140	; 0x8c
 80024e6:	20b4      	movs	r0, #180	; 0xb4
 80024e8:	f7ff fd42 	bl	8001f70 <lcd_ShowStr>
	lcd_ShowStr(10, 160, "Temperature:", RED, BLACK, 16, 0);
 80024ec:	2300      	movs	r3, #0
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2310      	movs	r3, #16
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <setup_adc+0xd8>)
 80024fe:	21a0      	movs	r1, #160	; 0xa0
 8002500:	200a      	movs	r0, #10
 8002502:	f7ff fd35 	bl	8001f70 <lcd_ShowStr>
	lcd_ShowStr(180, 160, "C", RED, BLACK, 16, 0);
 8002506:	2300      	movs	r3, #0
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	2310      	movs	r3, #16
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <setup_adc+0xdc>)
 8002518:	21a0      	movs	r1, #160	; 0xa0
 800251a:	20b4      	movs	r0, #180	; 0xb4
 800251c:	f7ff fd28 	bl	8001f70 <lcd_ShowStr>
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	08008bc8 	.word	0x08008bc8
 800252c:	08008bd0 	.word	0x08008bd0
 8002530:	08008bd4 	.word	0x08008bd4
 8002534:	08008bdc 	.word	0x08008bdc
 8002538:	08008be8 	.word	0x08008be8
 800253c:	08008bec 	.word	0x08008bec
 8002540:	08008bfc 	.word	0x08008bfc

08002544 <draw_axes>:

void draw_axes() {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af02      	add	r7, sp, #8

    // Draw X-axis (horizontal line) with padding
    lcd_DrawLine(0, 300-padding, 240, 300-padding, WHITE);  // X-axis starts at (10,290) and ends at (240,290)
 800254a:	230a      	movs	r3, #10
 800254c:	b29b      	uxth	r3, r3
 800254e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002552:	b299      	uxth	r1, r3
 8002554:	230a      	movs	r3, #10
 8002556:	b29b      	uxth	r3, r3
 8002558:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800255c:	b29b      	uxth	r3, r3
 800255e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002562:	9200      	str	r2, [sp, #0]
 8002564:	22f0      	movs	r2, #240	; 0xf0
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff f907 	bl	800177a <lcd_DrawLine>

    // Draw Y-axis (vertical line) with padding
    lcd_DrawLine(padding, 0, padding, 300, WHITE);  // Y-axis starts at (10,10) and ends at (10,300)
 800256c:	230a      	movs	r3, #10
 800256e:	b298      	uxth	r0, r3
 8002570:	230a      	movs	r3, #10
 8002572:	b29a      	uxth	r2, r3
 8002574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800257e:	2100      	movs	r1, #0
 8002580:	f7ff f8fb 	bl	800177a <lcd_DrawLine>
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <plot_graph>:

void plot_graph(){
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	ed2d 8b02 	vpush	{d8}
 8002592:	b083      	sub	sp, #12
 8002594:	af02      	add	r7, sp, #8
	count_adc = (count_adc + 1)%20;
 8002596:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <plot_graph+0x124>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <plot_graph+0x128>)
 800259e:	fb83 1302 	smull	r1, r3, r3, r2
 80025a2:	10d9      	asrs	r1, r3, #3
 80025a4:	17d3      	asrs	r3, r2, #31
 80025a6:	1ac9      	subs	r1, r1, r3
 80025a8:	460b      	mov	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	1ad1      	subs	r1, r2, r3
 80025b2:	b2ca      	uxtb	r2, r1
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <plot_graph+0x124>)
 80025b6:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <plot_graph+0x124>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d171      	bne.n	80026a4 <plot_graph+0x118>
		sensor_Read();
 80025c0:	f000 fa16 	bl	80029f0 <sensor_Read>
		x+=10;
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <plot_graph+0x12c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	330a      	adds	r3, #10
 80025ca:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <plot_graph+0x12c>)
 80025cc:	6013      	str	r3, [r2, #0]
		if(x > 240){
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <plot_graph+0x12c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2bf0      	cmp	r3, #240	; 0xf0
 80025d4:	dd08      	ble.n	80025e8 <plot_graph+0x5c>
			lcd_Clear(BLACK);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff f886 	bl	80016e8 <lcd_Clear>
			draw_axes();
 80025dc:	f7ff ffb2 	bl	8002544 <draw_axes>
			x = padding + 10;
 80025e0:	230a      	movs	r3, #10
 80025e2:	330a      	adds	r3, #10
 80025e4:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <plot_graph+0x12c>)
 80025e6:	6013      	str	r3, [r2, #0]
		}
		power = sensor_GetVoltage()*sensor_GetCurrent();
 80025e8:	f000 fa2a 	bl	8002a40 <sensor_GetVoltage>
 80025ec:	eeb0 8a40 	vmov.f32	s16, s0
 80025f0:	f000 fa62 	bl	8002ab8 <sensor_GetCurrent>
 80025f4:	eef0 7a40 	vmov.f32	s15, s0
 80025f8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <plot_graph+0x130>)
 80025fe:	edc3 7a00 	vstr	s15, [r3]
//		float a = 900;
//		float b = a - power;
//		lcd_ShowFloatNum(100, 120, b, 6, RED, BLACK, 16);
		if(old_power != 0)
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <plot_graph+0x134>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d034      	beq.n	800267c <plot_graph+0xf0>
			lcd_DrawLine(x - 10, 320-(old_power*3/2), x, 320-(power*3/2), RED);  // X-axis starts at (10,10) and ends at (239,10)
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <plot_graph+0x12c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b0a      	subs	r3, #10
 800261a:	b298      	uxth	r0, r3
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <plot_graph+0x134>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002626:	ee27 7a87 	vmul.f32	s14, s15, s14
 800262a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800262e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002632:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80026c4 <plot_graph+0x138>
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263e:	ee17 3a90 	vmov	r3, s15
 8002642:	b299      	uxth	r1, r3
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <plot_graph+0x12c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <plot_graph+0x130>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002654:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002658:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800265c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002660:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80026c4 <plot_graph+0x138>
 8002664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266c:	ee17 3a90 	vmov	r3, s15
 8002670:	b29b      	uxth	r3, r3
 8002672:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002676:	9400      	str	r4, [sp, #0]
 8002678:	f7ff f87f 	bl	800177a <lcd_DrawLine>
		lcd_ShowFloatNum(100, 100, power, 8, RED, BLACK, 16);
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <plot_graph+0x130>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	2310      	movs	r3, #16
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	2300      	movs	r3, #0
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800268e:	2208      	movs	r2, #8
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	2164      	movs	r1, #100	; 0x64
 8002696:	2064      	movs	r0, #100	; 0x64
 8002698:	f7ff fa5e 	bl	8001b58 <lcd_ShowFloatNum>
		old_power =  power;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <plot_graph+0x130>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <plot_graph+0x134>)
 80026a2:	6013      	str	r3, [r2, #0]
	}
}
 80026a4:	bf00      	nop
 80026a6:	3704      	adds	r7, #4
 80026a8:	46bd      	mov	sp, r7
 80026aa:	ecbd 8b02 	vpop	{d8}
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	200000c1 	.word	0x200000c1
 80026b4:	66666667 	.word	0x66666667
 80026b8:	20000010 	.word	0x20000010
 80026bc:	20000284 	.word	0x20000284
 80026c0:	200000bc 	.word	0x200000bc
 80026c4:	43a00000 	.word	0x43a00000

080026c8 <test_Adc>:

void test_Adc(){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	ed2d 8b02 	vpush	{d8}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 80026d2:	4b58      	ldr	r3, [pc, #352]	; (8002834 <test_Adc+0x16c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4b57      	ldr	r3, [pc, #348]	; (8002838 <test_Adc+0x170>)
 80026da:	fb83 1302 	smull	r1, r3, r3, r2
 80026de:	10d9      	asrs	r1, r3, #3
 80026e0:	17d3      	asrs	r3, r2, #31
 80026e2:	1ac9      	subs	r1, r1, r3
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	1ad1      	subs	r1, r2, r3
 80026ee:	b2ca      	uxtb	r2, r1
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <test_Adc+0x16c>)
 80026f2:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80026f4:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <test_Adc+0x16c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 8094 	bne.w	8002826 <test_Adc+0x15e>
		sensor_Read();
 80026fe:	f000 f977 	bl	80029f0 <sensor_Read>
//		lcd_ShowStr(10, 60, "Voltage:", RED, BLACK, 16, 0);
//		lcd_ShowFloatNum(130, 60, sensor_GetVoltage(), 6, RED, BLACK, 16);
//		lcd_ShowStr(10, 80, "Current:", RED, BLACK, 16, 0);
//		lcd_ShowFloatNum(130, 80, sensor_GetCurrent(), 6, RED, BLACK, 16);
		int light = sensor_GetLight();
 8002702:	f000 f983 	bl	8002a0c <sensor_GetLight>
 8002706:	4603      	mov	r3, r0
 8002708:	607b      	str	r3, [r7, #4]
		lcd_ShowIntNum(130, 120, light, 4, RED, BLACK, 16);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	b29a      	uxth	r2, r3
 800270e:	2310      	movs	r3, #16
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	2300      	movs	r3, #0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2304      	movs	r3, #4
 800271e:	2178      	movs	r1, #120	; 0x78
 8002720:	2082      	movs	r0, #130	; 0x82
 8002722:	f7ff f99b 	bl	8001a5c <lcd_ShowIntNum>
		if(light > 1000)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272c:	dd0d      	ble.n	800274a <test_Adc+0x82>
				lcd_ShowStr(180, 120, "Strong", RED, BLACK, 16, 0);
 800272e:	2300      	movs	r3, #0
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	2310      	movs	r3, #16
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800273e:	4a3f      	ldr	r2, [pc, #252]	; (800283c <test_Adc+0x174>)
 8002740:	2178      	movs	r1, #120	; 0x78
 8002742:	20b4      	movs	r0, #180	; 0xb4
 8002744:	f7ff fc14 	bl	8001f70 <lcd_ShowStr>
 8002748:	e00c      	b.n	8002764 <test_Adc+0x9c>
			else
				lcd_ShowStr(180, 120, "Weak  ", RED, BLACK, 16, 0);
 800274a:	2300      	movs	r3, #0
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	2310      	movs	r3, #16
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800275a:	4a39      	ldr	r2, [pc, #228]	; (8002840 <test_Adc+0x178>)
 800275c:	2178      	movs	r1, #120	; 0x78
 800275e:	20b4      	movs	r0, #180	; 0xb4
 8002760:	f7ff fc06 	bl	8001f70 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 100, sensor_GetVoltage()*sensor_GetCurrent(), 8, RED, BLACK, 16);
 8002764:	f000 f96c 	bl	8002a40 <sensor_GetVoltage>
 8002768:	eeb0 8a40 	vmov.f32	s16, s0
 800276c:	f000 f9a4 	bl	8002ab8 <sensor_GetCurrent>
 8002770:	eef0 7a40 	vmov.f32	s15, s0
 8002774:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002778:	2310      	movs	r3, #16
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2300      	movs	r3, #0
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002784:	2208      	movs	r2, #8
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	2164      	movs	r1, #100	; 0x64
 800278c:	2082      	movs	r0, #130	; 0x82
 800278e:	f7ff f9e3 	bl	8001b58 <lcd_ShowFloatNum>
		float humid = (sensor_GetPotentiometer()-HUMID_MIN)*100/HUMID_MAX;
 8002792:	f000 f947 	bl	8002a24 <sensor_GetPotentiometer>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	232a      	movs	r3, #42	; 0x2a
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2264      	movs	r2, #100	; 0x64
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	f640 6278 	movw	r2, #3704	; 0xe78
 80027a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b4:	edc7 7a00 	vstr	s15, [r7]
		lcd_ShowIntNum(130, 140, humid, 4, RED, BLACK, 16);
 80027b8:	edd7 7a00 	vldr	s15, [r7]
 80027bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c0:	ee17 3a90 	vmov	r3, s15
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	2310      	movs	r3, #16
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2304      	movs	r3, #4
 80027d6:	218c      	movs	r1, #140	; 0x8c
 80027d8:	2082      	movs	r0, #130	; 0x82
 80027da:	f7ff f93f 	bl	8001a5c <lcd_ShowIntNum>
		if (humid >= 70){
 80027de:	edd7 7a00 	vldr	s15, [r7]
 80027e2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002844 <test_Adc+0x17c>
 80027e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	db06      	blt.n	80027fe <test_Adc+0x136>
			buzzer_SetVolume(50);
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f7fe fc77 	bl	80010e4 <buzzer_SetVolume>
			// Send UART
			uart_Rs232SendString("!WARNING!");
 80027f6:	4814      	ldr	r0, [pc, #80]	; (8002848 <test_Adc+0x180>)
 80027f8:	f000 fc7c 	bl	80030f4 <uart_Rs232SendString>
 80027fc:	e002      	b.n	8002804 <test_Adc+0x13c>

		}
		else{
			buzzer_SetVolume(0);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe fc70 	bl	80010e4 <buzzer_SetVolume>
		}
		lcd_ShowFloatNum(130, 160,sensor_GetTemperature(), 4, RED, BLACK, 16);
 8002804:	f000 f9b4 	bl	8002b70 <sensor_GetTemperature>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	2310      	movs	r3, #16
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002818:	2204      	movs	r2, #4
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	21a0      	movs	r1, #160	; 0xa0
 8002820:	2082      	movs	r0, #130	; 0x82
 8002822:	f7ff f999 	bl	8001b58 <lcd_ShowFloatNum>
	}
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	ecbd 8b02 	vpop	{d8}
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200000c1 	.word	0x200000c1
 8002838:	66666667 	.word	0x66666667
 800283c:	08008c00 	.word	0x08008c00
 8002840:	08008c08 	.word	0x08008c08
 8002844:	428c0000 	.word	0x428c0000
 8002848:	08008c10 	.word	0x08008c10

0800284c <test_Buzzer>:

void test_Buzzer(){
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 8002850:	f7ff fda6 	bl	80023a0 <isButtonUp>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 800285a:	2032      	movs	r0, #50	; 0x32
 800285c:	f7fe fc42 	bl	80010e4 <buzzer_SetVolume>
	}

	if(isButtonDown()){
 8002860:	f7ff fdae 	bl	80023c0 <isButtonDown>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe fc3a 	bl	80010e4 <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002870:	f7ff fdb6 	bl	80023e0 <isButtonRight>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 800287a:	2019      	movs	r0, #25
 800287c:	f7fe fc32 	bl	80010e4 <buzzer_SetVolume>
	}

}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}

08002884 <digital_clock>:
int hr = 17;
int min = 59;
int sec = 58;
uint8_t count_led = 0;
uint8_t count_colon = 0;
void digital_clock(){
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	count_led = (count_led+ 1)%10;
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <digital_clock+0x12c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <digital_clock+0x130>)
 8002890:	fb83 1302 	smull	r1, r3, r3, r2
 8002894:	1099      	asrs	r1, r3, #2
 8002896:	17d3      	asrs	r3, r2, #31
 8002898:	1ac9      	subs	r1, r1, r3
 800289a:	460b      	mov	r3, r1
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	1ad1      	subs	r1, r2, r3
 80028a4:	b2ca      	uxtb	r2, r1
 80028a6:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <digital_clock+0x12c>)
 80028a8:	701a      	strb	r2, [r3, #0]
	if(count_led == 0){
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <digital_clock+0x12c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d123      	bne.n	80028fa <digital_clock+0x76>
		sec++;
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <digital_clock+0x134>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a3f      	ldr	r2, [pc, #252]	; (80029b8 <digital_clock+0x134>)
 80028ba:	6013      	str	r3, [r2, #0]
		if(sec >= 60){
 80028bc:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <digital_clock+0x134>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b3b      	cmp	r3, #59	; 0x3b
 80028c2:	dd1a      	ble.n	80028fa <digital_clock+0x76>
			min++;
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <digital_clock+0x138>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <digital_clock+0x138>)
 80028cc:	6013      	str	r3, [r2, #0]
			sec = 0;
 80028ce:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <digital_clock+0x134>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
			if(min >= 60){
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <digital_clock+0x138>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b3b      	cmp	r3, #59	; 0x3b
 80028da:	dd0e      	ble.n	80028fa <digital_clock+0x76>
				hr++;
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <digital_clock+0x13c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <digital_clock+0x13c>)
 80028e4:	6013      	str	r3, [r2, #0]
				min=0;
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <digital_clock+0x138>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
				if(hr>=24){
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <digital_clock+0x13c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b17      	cmp	r3, #23
 80028f2:	dd02      	ble.n	80028fa <digital_clock+0x76>
					hr=0;
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <digital_clock+0x13c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
				}
			}
		}

	}
	led7_SetDigit(hr/10, 0, 0);
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <digital_clock+0x13c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <digital_clock+0x130>)
 8002900:	fb82 1203 	smull	r1, r2, r2, r3
 8002904:	1092      	asrs	r2, r2, #2
 8002906:	17db      	asrs	r3, r3, #31
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fc1e 	bl	8002150 <led7_SetDigit>
	led7_SetDigit(hr%10, 1, 0);
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <digital_clock+0x13c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <digital_clock+0x130>)
 800291a:	fb83 1302 	smull	r1, r3, r3, r2
 800291e:	1099      	asrs	r1, r3, #2
 8002920:	17d3      	asrs	r3, r2, #31
 8002922:	1ac8      	subs	r0, r1, r3
 8002924:	4603      	mov	r3, r0
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4403      	add	r3, r0
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	1ad0      	subs	r0, r2, r3
 800292e:	2200      	movs	r2, #0
 8002930:	2101      	movs	r1, #1
 8002932:	f7ff fc0d 	bl	8002150 <led7_SetDigit>
	led7_SetDigit(min/10, 2, 0);
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <digital_clock+0x138>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <digital_clock+0x130>)
 800293c:	fb82 1203 	smull	r1, r2, r2, r3
 8002940:	1092      	asrs	r2, r2, #2
 8002942:	17db      	asrs	r3, r3, #31
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2200      	movs	r2, #0
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fc00 	bl	8002150 <led7_SetDigit>
	led7_SetDigit(min%10, 3, 0);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <digital_clock+0x138>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <digital_clock+0x130>)
 8002956:	fb83 1302 	smull	r1, r3, r3, r2
 800295a:	1099      	asrs	r1, r3, #2
 800295c:	17d3      	asrs	r3, r2, #31
 800295e:	1ac8      	subs	r0, r1, r3
 8002960:	4603      	mov	r3, r0
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4403      	add	r3, r0
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	1ad0      	subs	r0, r2, r3
 800296a:	2200      	movs	r2, #0
 800296c:	2103      	movs	r1, #3
 800296e:	f7ff fbef 	bl	8002150 <led7_SetDigit>

	count_colon = (count_colon+1)%10;
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <digital_clock+0x140>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <digital_clock+0x130>)
 800297a:	fb83 1302 	smull	r1, r3, r3, r2
 800297e:	1099      	asrs	r1, r3, #2
 8002980:	17d3      	asrs	r3, r2, #31
 8002982:	1ac9      	subs	r1, r1, r3
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	1ad1      	subs	r1, r2, r3
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <digital_clock+0x140>)
 8002992:	701a      	strb	r2, [r3, #0]
	if(count_colon > 5){
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <digital_clock+0x140>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d903      	bls.n	80029a4 <digital_clock+0x120>
		led7_SetColon(1);
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff fbfb 	bl	8002198 <led7_SetColon>
	}
	else{
		led7_SetColon(0);
	}
}
 80029a2:	e002      	b.n	80029aa <digital_clock+0x126>
		led7_SetColon(0);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff fbf7 	bl	8002198 <led7_SetColon>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200000c2 	.word	0x200000c2
 80029b4:	66666667 	.word	0x66666667
 80029b8:	2000001c 	.word	0x2000001c
 80029bc:	20000018 	.word	0x20000018
 80029c0:	20000014 	.word	0x20000014
 80029c4:	200000c3 	.word	0x200000c3

080029c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029cc:	b672      	cpsid	i
}
 80029ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <Error_Handler+0x8>
	...

080029d4 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80029d8:	2205      	movs	r2, #5
 80029da:	4903      	ldr	r1, [pc, #12]	; (80029e8 <sensor_init+0x14>)
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <sensor_init+0x18>)
 80029de:	f000 fd5d 	bl	800349c <HAL_ADC_Start_DMA>
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200002a0 	.word	0x200002a0
 80029ec:	200000dc 	.word	0x200000dc

080029f0 <sensor_Read>:

void sensor_Read(){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80029f4:	2205      	movs	r2, #5
 80029f6:	4903      	ldr	r1, [pc, #12]	; (8002a04 <sensor_Read+0x14>)
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <sensor_Read+0x18>)
 80029fa:	f000 fd4f 	bl	800349c <HAL_ADC_Start_DMA>
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200002a0 	.word	0x200002a0
 8002a08:	200000dc 	.word	0x200000dc

08002a0c <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <sensor_GetLight+0x14>)
 8002a12:	889b      	ldrh	r3, [r3, #4]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200002a0 	.word	0x200002a0

08002a24 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <sensor_GetPotentiometer+0x14>)
 8002a2a:	88db      	ldrh	r3, [r3, #6]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200002a0 	.word	0x200002a0
 8002a3c:	00000000 	.word	0x00000000

08002a40 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <sensor_GetVoltage+0x70>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	ee17 0a90 	vmov	r0, s15
 8002a54:	f7fd fd70 	bl	8000538 <__aeabi_f2d>
 8002a58:	a311      	add	r3, pc, #68	; (adr r3, 8002aa0 <sensor_GetVoltage+0x60>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fdc3 	bl	80005e8 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <sensor_GetVoltage+0x74>)
 8002a70:	f7fd fdba 	bl	80005e8 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	a30a      	add	r3, pc, #40	; (adr r3, 8002aa8 <sensor_GetVoltage+0x68>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fedb 	bl	800083c <__aeabi_ddiv>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fd ffbd 	bl	8000a0c <__aeabi_d2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	ee07 3a90 	vmov	s15, r3
}
 8002a98:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	66666666 	.word	0x66666666
 8002aa4:	400a6666 	.word	0x400a6666
 8002aa8:	cccccccd 	.word	0xcccccccd
 8002aac:	40b908ac 	.word	0x40b908ac
 8002ab0:	200002a0 	.word	0x200002a0
 8002ab4:	40280000 	.word	0x40280000

08002ab8 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <sensor_GetCurrent+0xa8>)
 8002abe:	885b      	ldrh	r3, [r3, #2]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac8:	ee17 0a90 	vmov	r0, s15
 8002acc:	f7fd fd34 	bl	8000538 <__aeabi_f2d>
 8002ad0:	a31f      	add	r3, pc, #124	; (adr r3, 8002b50 <sensor_GetCurrent+0x98>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd fd87 	bl	80005e8 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <sensor_GetCurrent+0xac>)
 8002ae8:	f7fd fd7e 	bl	80005e8 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	a318      	add	r3, pc, #96	; (adr r3, 8002b58 <sensor_GetCurrent+0xa0>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fe9f 	bl	800083c <__aeabi_ddiv>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <sensor_GetCurrent+0xb0>)
 8002b0c:	f7fd fbb4 	bl	8000278 <__aeabi_dsub>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <sensor_GetCurrent+0xb4>)
 8002b1e:	f7fd fd63 	bl	80005e8 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <sensor_GetCurrent+0xb0>)
 8002b30:	f7fd fe84 	bl	800083c <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fd ff66 	bl	8000a0c <__aeabi_d2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	ee07 3a90 	vmov	s15, r3
}
 8002b46:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	f3af 8000 	nop.w
 8002b50:	66666666 	.word	0x66666666
 8002b54:	400a6666 	.word	0x400a6666
 8002b58:	147ae148 	.word	0x147ae148
 8002b5c:	40a4b2ee 	.word	0x40a4b2ee
 8002b60:	200002a0 	.word	0x200002a0
 8002b64:	408f4000 	.word	0x408f4000
 8002b68:	40040000 	.word	0x40040000
 8002b6c:	40140000 	.word	0x40140000

08002b70 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <sensor_GetTemperature+0x30>)
 8002b76:	891b      	ldrh	r3, [r3, #8]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002ba4 <sensor_GetTemperature+0x34>
 8002b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b88:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ba8 <sensor_GetTemperature+0x38>
 8002b8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b90:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b94:	eeb0 0a67 	vmov.f32	s0, s15
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	200002a0 	.word	0x200002a0
 8002ba4:	43a50000 	.word	0x43a50000
 8002ba8:	457ff000 	.word	0x457ff000

08002bac <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <timer_init+0x10>)
 8002bb2:	f003 fb19 	bl	80061e8 <HAL_TIM_Base_Start_IT>
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000034c 	.word	0x2000034c

08002bc0 <setTimer2>:

void setTimer2(uint16_t duration){
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002bca:	4a08      	ldr	r2, [pc, #32]	; (8002bec <setTimer2+0x2c>)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <setTimer2+0x2c>)
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <setTimer2+0x30>)
 8002bd6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <setTimer2+0x34>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	801a      	strh	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	200000c8 	.word	0x200000c8
 8002bf0:	200000c6 	.word	0x200000c6
 8002bf4:	200000c4 	.word	0x200000c4

08002bf8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d116      	bne.n	8002c38 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c1c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002c32:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002c34:	f7ff fa00 	bl	8002038 <led7_Scan>
	}
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	200000c6 	.word	0x200000c6
 8002c44:	200000c4 	.word	0x200000c4
 8002c48:	200000c8 	.word	0x200000c8

08002c4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c98:	220a      	movs	r2, #10
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <MX_SPI1_Init+0x64>)
 8002c9e:	f002 fc67 	bl	8005570 <HAL_SPI_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ca8:	f7ff fe8e 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200002ac 	.word	0x200002ac
 8002cb4:	40013000 	.word	0x40013000

08002cb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_SPI_MspInit+0x84>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d12b      	bne.n	8002d32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_SPI_MspInit+0x88>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_SPI_MspInit+0x88>)
 8002ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_SPI_MspInit+0x88>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_SPI_MspInit+0x88>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_SPI_MspInit+0x88>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_SPI_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d12:	2338      	movs	r3, #56	; 0x38
 8002d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d22:	2305      	movs	r3, #5
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4805      	ldr	r0, [pc, #20]	; (8002d44 <HAL_SPI_MspInit+0x8c>)
 8002d2e:	f001 fc97 	bl	8004660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40013000 	.word	0x40013000
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020400 	.word	0x40020400

08002d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_MspInit+0x4c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_MspInit+0x4c>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_MspInit+0x4c>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_MspInit+0x4c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_MspInit+0x4c>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_MspInit+0x4c>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <NMI_Handler+0x4>

08002d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <HardFault_Handler+0x4>

08002da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <MemManage_Handler+0x4>

08002daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <BusFault_Handler+0x4>

08002db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <UsageFault_Handler+0x4>

08002db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de4:	f000 fad2 	bl	800338c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <TIM2_IRQHandler+0x10>)
 8002df2:	f003 fb8b 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000034c 	.word	0x2000034c

08002e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <USART1_IRQHandler+0x10>)
 8002e06:	f004 faeb 	bl	80073e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000bc8 	.word	0x20000bc8

08002e14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <DMA2_Stream0_IRQHandler+0x10>)
 8002e1a:	f001 f9b7 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000124 	.word	0x20000124

08002e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <_sbrk+0x5c>)
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <_sbrk+0x60>)
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <_sbrk+0x64>)
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <_sbrk+0x68>)
 8002e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <_sbrk+0x64>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d207      	bcs.n	8002e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e58:	f005 fa4a 	bl	80082f0 <__errno>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	220c      	movs	r2, #12
 8002e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e66:	e009      	b.n	8002e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <_sbrk+0x64>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <_sbrk+0x64>)
 8002e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20020000 	.word	0x20020000
 8002e88:	00000400 	.word	0x00000400
 8002e8c:	200000cc 	.word	0x200000cc
 8002e90:	20000c20 	.word	0x20000c20

08002e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <SystemInit+0x20>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <SystemInit+0x20>)
 8002ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ebe:	f107 0308 	add.w	r3, r7, #8
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ecc:	463b      	mov	r3, r7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002ed6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002ede:	f240 3247 	movw	r2, #839	; 0x347
 8002ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002eec:	2263      	movs	r2, #99	; 0x63
 8002eee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002efe:	f003 f923 	bl	8006148 <HAL_TIM_Base_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f08:	f7ff fd5e 	bl	80029c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	4619      	mov	r1, r3
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002f1a:	f003 fcc1 	bl	80068a0 <HAL_TIM_ConfigClockSource>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f24:	f7ff fd50 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_TIM2_Init+0x94>)
 8002f36:	f004 f8b3 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f40:	f7ff fd42 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	2000034c 	.word	0x2000034c

08002f50 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	615a      	str	r2, [r3, #20]
 8002f66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <MX_TIM13_Init+0x98>)
 8002f6c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f70:	f240 3247 	movw	r2, #839	; 0x347
 8002f74:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f7e:	2263      	movs	r2, #99	; 0x63
 8002f80:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f8e:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002f90:	f003 f8da 	bl	8006148 <HAL_TIM_Base_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002f9a:	f7ff fd15 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002f9e:	4811      	ldr	r0, [pc, #68]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002fa0:	f003 f992 	bl	80062c8 <HAL_TIM_PWM_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002faa:	f7ff fd0d 	bl	80029c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fae:	2360      	movs	r3, #96	; 0x60
 8002fb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002fc6:	f003 fba9 	bl	800671c <HAL_TIM_PWM_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002fd0:	f7ff fcfa 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <MX_TIM13_Init+0x94>)
 8002fd6:	f000 f845 	bl	8003064 <HAL_TIM_MspPostInit>

}
 8002fda:	bf00      	nop
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000304 	.word	0x20000304
 8002fe8:	40001c00 	.word	0x40001c00

08002fec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d116      	bne.n	800302c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b16      	ldr	r3, [pc, #88]	; (800305c <HAL_TIM_Base_MspInit+0x70>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <HAL_TIM_Base_MspInit+0x70>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_TIM_Base_MspInit+0x70>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	201c      	movs	r0, #28
 8003020:	f000 fee5 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003024:	201c      	movs	r0, #28
 8003026:	f000 fefe 	bl	8003e26 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800302a:	e012      	b.n	8003052 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <HAL_TIM_Base_MspInit+0x74>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10d      	bne.n	8003052 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <HAL_TIM_Base_MspInit+0x70>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a07      	ldr	r2, [pc, #28]	; (800305c <HAL_TIM_Base_MspInit+0x70>)
 8003040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_TIM_Base_MspInit+0x70>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40001c00 	.word	0x40001c00

08003064 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_TIM_MspPostInit+0x68>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d11e      	bne.n	80030c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_TIM_MspPostInit+0x6c>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_TIM_MspPostInit+0x6c>)
 8003090:	f043 0320 	orr.w	r3, r3, #32
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_TIM_MspPostInit+0x6c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80030b4:	2309      	movs	r3, #9
 80030b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	4619      	mov	r1, r3
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <HAL_TIM_MspPostInit+0x70>)
 80030c0:	f001 face 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80030c4:	bf00      	nop
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40001c00 	.word	0x40001c00
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40021400 	.word	0x40021400

080030d8 <uart_init_rs232>:
uint8_t msg[100];
uint8_t uartFlag = 0;
uint8_t writeIndex = 0;
uint8_t ringBuffer[BUFFER_SIZE];

void uart_init_rs232(){
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80030dc:	2201      	movs	r2, #1
 80030de:	4903      	ldr	r1, [pc, #12]	; (80030ec <uart_init_rs232+0x14>)
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <uart_init_rs232+0x18>)
 80030e2:	f004 f94c 	bl	800737e <HAL_UART_Receive_IT>
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200000d0 	.word	0x200000d0
 80030f0:	20000bc8 	.word	0x20000bc8

080030f4 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4907      	ldr	r1, [pc, #28]	; (800311c <uart_Rs232SendString+0x28>)
 8003100:	4807      	ldr	r0, [pc, #28]	; (8003120 <uart_Rs232SendString+0x2c>)
 8003102:	f005 f927 	bl	8008354 <siprintf>
 8003106:	4603      	mov	r3, r0
 8003108:	b29a      	uxth	r2, r3
 800310a:	230a      	movs	r3, #10
 800310c:	4904      	ldr	r1, [pc, #16]	; (8003120 <uart_Rs232SendString+0x2c>)
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <uart_Rs232SendString+0x30>)
 8003110:	f004 f8a3 	bl	800725a <HAL_UART_Transmit>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08008c1c 	.word	0x08008c1c
 8003120:	20000394 	.word	0x20000394
 8003124:	20000bc8 	.word	0x20000bc8

08003128 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <HAL_UART_RxCpltCallback+0x5c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d120      	bne.n	800317c <HAL_UART_RxCpltCallback+0x54>
		// rs232 isr
		// can be modified
		uartFlag = 1;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <HAL_UART_RxCpltCallback+0x60>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
		ringBuffer[writeIndex] = receive_buffer1 - '0';
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_UART_RxCpltCallback+0x64>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4a12      	ldr	r2, [pc, #72]	; (8003190 <HAL_UART_RxCpltCallback+0x68>)
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	3b30      	subs	r3, #48	; 0x30
 800314a:	b2d9      	uxtb	r1, r3
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_UART_RxCpltCallback+0x6c>)
 800314e:	5499      	strb	r1, [r3, r2]
		writeIndex = (writeIndex + 1) % BUFFER_SIZE;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_UART_RxCpltCallback+0x68>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_UART_RxCpltCallback+0x70>)
 8003158:	fb82 1203 	smull	r1, r2, r2, r3
 800315c:	11d1      	asrs	r1, r2, #7
 800315e:	17da      	asrs	r2, r3, #31
 8003160:	1a8a      	subs	r2, r1, r2
 8003162:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003166:	fb01 f202 	mul.w	r2, r1, r2
 800316a:	1a9a      	subs	r2, r3, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_UART_RxCpltCallback+0x68>)
 8003170:	701a      	strb	r2, [r3, #0]
//		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003172:	2201      	movs	r2, #1
 8003174:	4905      	ldr	r1, [pc, #20]	; (800318c <HAL_UART_RxCpltCallback+0x64>)
 8003176:	4809      	ldr	r0, [pc, #36]	; (800319c <HAL_UART_RxCpltCallback+0x74>)
 8003178:	f004 f901 	bl	800737e <HAL_UART_Receive_IT>
	}
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40011000 	.word	0x40011000
 8003188:	200000d1 	.word	0x200000d1
 800318c:	200000d0 	.word	0x200000d0
 8003190:	200000d2 	.word	0x200000d2
 8003194:	200003f8 	.word	0x200003f8
 8003198:	10624dd3 	.word	0x10624dd3
 800319c:	20000bc8 	.word	0x20000bc8

080031a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <MX_USART1_UART_Init+0x50>)
 80031a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031c6:	220c      	movs	r2, #12
 80031c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <MX_USART1_UART_Init+0x4c>)
 80031d8:	f003 fff2 	bl	80071c0 <HAL_UART_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031e2:	f7ff fbf1 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000bc8 	.word	0x20000bc8
 80031f0:	40011000 	.word	0x40011000

080031f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_UART_MspInit+0x94>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d134      	bne.n	8003280 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_UART_MspInit+0x98>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_UART_MspInit+0x98>)
 8003220:	f043 0310 	orr.w	r3, r3, #16
 8003224:	6453      	str	r3, [r2, #68]	; 0x44
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_UART_MspInit+0x98>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_UART_MspInit+0x98>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_UART_MspInit+0x98>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_UART_MspInit+0x98>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800324e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003260:	2307      	movs	r3, #7
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <HAL_UART_MspInit+0x9c>)
 800326c:	f001 f9f8 	bl	8004660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2025      	movs	r0, #37	; 0x25
 8003276:	f000 fdba 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800327a:	2025      	movs	r0, #37	; 0x25
 800327c:	f000 fdd3 	bl	8003e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003280:	bf00      	nop
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40011000 	.word	0x40011000
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000

08003294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003298:	480d      	ldr	r0, [pc, #52]	; (80032d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800329a:	490e      	ldr	r1, [pc, #56]	; (80032d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800329c:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800329e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a0:	e002      	b.n	80032a8 <LoopCopyDataInit>

080032a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a6:	3304      	adds	r3, #4

080032a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032ac:	d3f9      	bcc.n	80032a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032b0:	4c0b      	ldr	r4, [pc, #44]	; (80032e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b4:	e001      	b.n	80032ba <LoopFillZerobss>

080032b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b8:	3204      	adds	r2, #4

080032ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032bc:	d3fb      	bcc.n	80032b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032be:	f7ff fde9 	bl	8002e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c2:	f005 f81b 	bl	80082fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c6:	f7fe ff87 	bl	80021d8 <main>
  bx  lr    
 80032ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80032d8:	0800bc14 	.word	0x0800bc14
  ldr r2, =_sbss
 80032dc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80032e0:	20000c20 	.word	0x20000c20

080032e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <ADC_IRQHandler>
	...

080032e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <HAL_Init+0x40>)
 80032f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_Init+0x40>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_Init+0x40>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003310:	2003      	movs	r0, #3
 8003312:	f000 fd61 	bl	8003dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003316:	200f      	movs	r0, #15
 8003318:	f000 f808 	bl	800332c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800331c:	f7ff fd14 	bl	8002d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00

0800332c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_InitTick+0x54>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_InitTick+0x58>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4619      	mov	r1, r3
 800333e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003342:	fbb3 f3f1 	udiv	r3, r3, r1
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fd79 	bl	8003e42 <HAL_SYSTICK_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e00e      	b.n	8003378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d80a      	bhi.n	8003376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003360:	2200      	movs	r2, #0
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003368:	f000 fd41 	bl	8003dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800336c:	4a06      	ldr	r2, [pc, #24]	; (8003388 <HAL_InitTick+0x5c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000020 	.word	0x20000020
 8003384:	20000028 	.word	0x20000028
 8003388:	20000024 	.word	0x20000024

0800338c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_IncTick+0x20>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x24>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4413      	add	r3, r2
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_IncTick+0x24>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000028 	.word	0x20000028
 80033b0:	20000c0c 	.word	0x20000c0c

080033b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return uwTick;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_GetTick+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000c0c 	.word	0x20000c0c

080033cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d4:	f7ff ffee 	bl	80033b4 <HAL_GetTick>
 80033d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e4:	d005      	beq.n	80033f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_Delay+0x44>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033f2:	bf00      	nop
 80033f4:	f7ff ffde 	bl	80033b4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d8f7      	bhi.n	80033f4 <HAL_Delay+0x28>
  {
  }
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000028 	.word	0x20000028

08003414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e033      	b.n	8003492 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fd40 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345a:	f023 0302 	bic.w	r3, r3, #2
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa68 	bl	800393c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
 8003482:	e001      	b.n	8003488 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_Start_DMA+0x1e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0e9      	b.n	800368e <HAL_ADC_Start_DMA+0x1f2>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d018      	beq.n	8003502 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034e0:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_ADC_Start_DMA+0x1fc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6d      	ldr	r2, [pc, #436]	; (800369c <HAL_ADC_Start_DMA+0x200>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0c9a      	lsrs	r2, r3, #18
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034f4:	e002      	b.n	80034fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f9      	bne.n	80034f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	d107      	bne.n	8003522 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	f040 80a1 	bne.w	8003674 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800355c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d106      	bne.n	8003580 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f023 0206 	bic.w	r2, r3, #6
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
 800357e:	e002      	b.n	8003586 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <HAL_ADC_Start_DMA+0x204>)
 8003590:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_ADC_Start_DMA+0x208>)
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	4a42      	ldr	r2, [pc, #264]	; (80036a8 <HAL_ADC_Start_DMA+0x20c>)
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <HAL_ADC_Start_DMA+0x210>)
 80035a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	334c      	adds	r3, #76	; 0x4c
 80035de:	4619      	mov	r1, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f000 fce8 	bl	8003fb8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d12a      	bne.n	800364a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_ADC_Start_DMA+0x214>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d015      	beq.n	800362a <HAL_ADC_Start_DMA+0x18e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2c      	ldr	r2, [pc, #176]	; (80036b4 <HAL_ADC_Start_DMA+0x218>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d105      	bne.n	8003614 <HAL_ADC_Start_DMA+0x178>
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_ADC_Start_DMA+0x204>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_ADC_Start_DMA+0x21c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d136      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_ADC_Start_DMA+0x204>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d130      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d129      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e020      	b.n	800368c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_ADC_Start_DMA+0x214>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d11b      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d114      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	e00b      	b.n	800368c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f043 0210 	orr.w	r2, r3, #16
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000020 	.word	0x20000020
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	40012300 	.word	0x40012300
 80036a4:	08003b35 	.word	0x08003b35
 80036a8:	08003bef 	.word	0x08003bef
 80036ac:	08003c0b 	.word	0x08003c0b
 80036b0:	40012000 	.word	0x40012000
 80036b4:	40012100 	.word	0x40012100
 80036b8:	40012200 	.word	0x40012200

080036bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x1c>
 8003710:	2302      	movs	r3, #2
 8003712:	e105      	b.n	8003920 <HAL_ADC_ConfigChannel+0x228>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b09      	cmp	r3, #9
 8003722:	d925      	bls.n	8003770 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68d9      	ldr	r1, [r3, #12]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	3b1e      	subs	r3, #30
 800373a:	2207      	movs	r2, #7
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43da      	mvns	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	400a      	ands	r2, r1
 8003748:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68d9      	ldr	r1, [r3, #12]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	4618      	mov	r0, r3
 800375c:	4603      	mov	r3, r0
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4403      	add	r3, r0
 8003762:	3b1e      	subs	r3, #30
 8003764:	409a      	lsls	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	e022      	b.n	80037b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6919      	ldr	r1, [r3, #16]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	2207      	movs	r2, #7
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	400a      	ands	r2, r1
 8003792:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6919      	ldr	r1, [r3, #16]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	4618      	mov	r0, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4403      	add	r3, r0
 80037ac:	409a      	lsls	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d824      	bhi.n	8003808 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	3b05      	subs	r3, #5
 80037d0:	221f      	movs	r2, #31
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43da      	mvns	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	400a      	ands	r2, r1
 80037de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	3b05      	subs	r3, #5
 80037fa:	fa00 f203 	lsl.w	r2, r0, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	635a      	str	r2, [r3, #52]	; 0x34
 8003806:	e04c      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	d824      	bhi.n	800385a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	3b23      	subs	r3, #35	; 0x23
 8003822:	221f      	movs	r2, #31
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43da      	mvns	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	400a      	ands	r2, r1
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	4618      	mov	r0, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	3b23      	subs	r3, #35	; 0x23
 800384c:	fa00 f203 	lsl.w	r2, r0, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
 8003858:	e023      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	3b41      	subs	r3, #65	; 0x41
 800386c:	221f      	movs	r2, #31
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	400a      	ands	r2, r1
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b41      	subs	r3, #65	; 0x41
 8003896:	fa00 f203 	lsl.w	r2, r0, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_ADC_ConfigChannel+0x234>)
 80038a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <HAL_ADC_ConfigChannel+0x238>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d109      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1cc>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b12      	cmp	r3, #18
 80038b6:	d105      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_ADC_ConfigChannel+0x238>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d123      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x21e>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d003      	beq.n	80038de <HAL_ADC_ConfigChannel+0x1e6>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b11      	cmp	r3, #17
 80038dc:	d11b      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d111      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_ADC_ConfigChannel+0x23c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HAL_ADC_ConfigChannel+0x240>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0c9a      	lsrs	r2, r3, #18
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003908:	e002      	b.n	8003910 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3b01      	subs	r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f9      	bne.n	800390a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40012300 	.word	0x40012300
 8003930:	40012000 	.word	0x40012000
 8003934:	20000020 	.word	0x20000020
 8003938:	431bde83 	.word	0x431bde83

0800393c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003944:	4b79      	ldr	r3, [pc, #484]	; (8003b2c <ADC_Init+0x1f0>)
 8003946:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	021a      	lsls	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6899      	ldr	r1, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <ADC_Init+0x1f4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e00f      	b.n	8003a3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0202 	bic.w	r2, r2, #2
 8003a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6899      	ldr	r1, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7e1b      	ldrb	r3, [r3, #24]
 8003a54:	005a      	lsls	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	3b01      	subs	r3, #1
 8003a94:	035a      	lsls	r2, r3, #13
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	e007      	b.n	8003ab0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	051a      	lsls	r2, r3, #20
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003af2:	025a      	lsls	r2, r3, #9
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	029a      	lsls	r2, r3, #10
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40012300 	.word	0x40012300
 8003b30:	0f000001 	.word	0x0f000001

08003b34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d13c      	bne.n	8003bc8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d12b      	bne.n	8003bc0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d127      	bne.n	8003bc0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d119      	bne.n	8003bc0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0220 	bic.w	r2, r2, #32
 8003b9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff fd7b 	bl	80036bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bc6:	e00e      	b.n	8003be6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7ff fd85 	bl	80036e4 <HAL_ADC_ErrorCallback>
}
 8003bda:	e004      	b.n	8003be6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff fd67 	bl	80036d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2240      	movs	r2, #64	; 0x40
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff fd5a 	bl	80036e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <__NVIC_EnableIRQ+0x38>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db0a      	blt.n	8003d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	490c      	ldr	r1, [pc, #48]	; (8003d24 <__NVIC_SetPriority+0x4c>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d00:	e00a      	b.n	8003d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4908      	ldr	r1, [pc, #32]	; (8003d28 <__NVIC_SetPriority+0x50>)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000e100 	.word	0xe000e100
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f1c3 0307 	rsb	r3, r3, #7
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	bf28      	it	cs
 8003d4a:	2304      	movcs	r3, #4
 8003d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d902      	bls.n	8003d5c <NVIC_EncodePriority+0x30>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3b03      	subs	r3, #3
 8003d5a:	e000      	b.n	8003d5e <NVIC_EncodePriority+0x32>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	401a      	ands	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43d9      	mvns	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	4313      	orrs	r3, r2
         );
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da4:	d301      	bcc.n	8003daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00f      	b.n	8003dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <SysTick_Config+0x40>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db2:	210f      	movs	r1, #15
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003db8:	f7ff ff8e 	bl	8003cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <SysTick_Config+0x40>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc2:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <SysTick_Config+0x40>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000e010 	.word	0xe000e010

08003dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff29 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e00:	f7ff ff3e 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f7ff ff8e 	bl	8003d2c <NVIC_EncodePriority>
 8003e10:	4602      	mov	r2, r0
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff5d 	bl	8003cd8 <__NVIC_SetPriority>
}
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff31 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ffa2 	bl	8003d94 <SysTick_Config>
 8003e50:	4603      	mov	r3, r0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff faa4 	bl	80033b4 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e099      	b.n	8003fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e98:	e00f      	b.n	8003eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9a:	f7ff fa8b 	bl	80033b4 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d908      	bls.n	8003eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e078      	b.n	8003fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e8      	bne.n	8003e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_DMA_Init+0x158>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d107      	bne.n	8003f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d117      	bne.n	8003f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fb01 	bl	8004568 <DMA_CheckFifoParam>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e016      	b.n	8003fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fab8 	bl	80044fc <DMA_CalcBaseAndBitshift>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	223f      	movs	r2, #63	; 0x3f
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	f010803f 	.word	0xf010803f

08003fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Start_IT+0x26>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e040      	b.n	8004060 <HAL_DMA_Start_IT+0xa8>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d12f      	bne.n	8004052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fa4a 	bl	80044a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	223f      	movs	r2, #63	; 0x3f
 8004012:	409a      	lsls	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0216 	orr.w	r2, r2, #22
 8004026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e005      	b.n	800405e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004076:	f7ff f99d 	bl	80033b4 <HAL_GetTick>
 800407a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d008      	beq.n	800409a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e052      	b.n	8004140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0216 	bic.w	r2, r2, #22
 80040a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <HAL_DMA_Abort+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0208 	bic.w	r2, r2, #8
 80040d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ea:	e013      	b.n	8004114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ec:	f7ff f962 	bl	80033b4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d90c      	bls.n	8004114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2203      	movs	r2, #3
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e015      	b.n	8004140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e4      	bne.n	80040ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	223f      	movs	r2, #63	; 0x3f
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d004      	beq.n	8004166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e00c      	b.n	8004180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2205      	movs	r2, #5
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004198:	4b92      	ldr	r3, [pc, #584]	; (80043e4 <HAL_DMA_IRQHandler+0x258>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a92      	ldr	r2, [pc, #584]	; (80043e8 <HAL_DMA_IRQHandler+0x25c>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0a9b      	lsrs	r3, r3, #10
 80041a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b6:	2208      	movs	r2, #8
 80041b8:	409a      	lsls	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01a      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2208      	movs	r2, #8
 80041e6:	409a      	lsls	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	2201      	movs	r2, #1
 800421c:	409a      	lsls	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0202 	orr.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	2204      	movs	r2, #4
 8004234:	409a      	lsls	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d012      	beq.n	8004264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	2204      	movs	r2, #4
 8004252:	409a      	lsls	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	2210      	movs	r2, #16
 800426a:	409a      	lsls	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d043      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d03c      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	2210      	movs	r2, #16
 8004288:	409a      	lsls	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d024      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
 80042ba:	e01f      	b.n	80042fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01b      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
 80042cc:	e016      	b.n	80042fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0208 	bic.w	r2, r2, #8
 80042ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	2220      	movs	r2, #32
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 808e 	beq.w	800442a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8086 	beq.w	800442a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2220      	movs	r2, #32
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b05      	cmp	r3, #5
 8004334:	d136      	bne.n	80043a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0216 	bic.w	r2, r2, #22
 8004344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_DMA_IRQHandler+0x1da>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0208 	bic.w	r2, r2, #8
 8004374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	223f      	movs	r2, #63	; 0x3f
 800437c:	409a      	lsls	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d07d      	beq.n	8004496 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
        }
        return;
 80043a2:	e078      	b.n	8004496 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01c      	beq.n	80043ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d108      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d030      	beq.n	800442a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
 80043d0:	e02b      	b.n	800442a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d027      	beq.n	800442a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
 80043e2:	e022      	b.n	800442a <HAL_DMA_IRQHandler+0x29e>
 80043e4:	20000020 	.word	0x20000020
 80043e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0210 	bic.w	r2, r2, #16
 8004408:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d032      	beq.n	8004498 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d022      	beq.n	8004484 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2205      	movs	r2, #5
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3301      	adds	r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	429a      	cmp	r2, r3
 8004460:	d307      	bcc.n	8004472 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f2      	bne.n	8004456 <HAL_DMA_IRQHandler+0x2ca>
 8004470:	e000      	b.n	8004474 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004472:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
 8004494:	e000      	b.n	8004498 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004496:	bf00      	nop
    }
  }
}
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop

080044a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d108      	bne.n	80044e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044de:	e007      	b.n	80044f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	3b10      	subs	r3, #16
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <DMA_CalcBaseAndBitshift+0x64>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <DMA_CalcBaseAndBitshift+0x68>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d909      	bls.n	800453e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	; 0x58
 800453c:	e007      	b.n	800454e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	aaaaaaab 	.word	0xaaaaaaab
 8004564:	0800bbc8 	.word	0x0800bbc8

08004568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11f      	bne.n	80045c2 <DMA_CheckFifoParam+0x5a>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d856      	bhi.n	8004636 <DMA_CheckFifoParam+0xce>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <DMA_CheckFifoParam+0x28>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045b3 	.word	0x080045b3
 8004598:	080045a1 	.word	0x080045a1
 800459c:	08004637 	.word	0x08004637
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d046      	beq.n	800463a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b0:	e043      	b.n	800463a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ba:	d140      	bne.n	800463e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e03d      	b.n	800463e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	d121      	bne.n	8004610 <DMA_CheckFifoParam+0xa8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d837      	bhi.n	8004642 <DMA_CheckFifoParam+0xda>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x70>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045ef 	.word	0x080045ef
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	08004601 	.word	0x08004601
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      break;
 80045ec:	e030      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d025      	beq.n	8004646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fe:	e022      	b.n	8004646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004608:	d11f      	bne.n	800464a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800460e:	e01c      	b.n	800464a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d903      	bls.n	800461e <DMA_CheckFifoParam+0xb6>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d003      	beq.n	8004624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800461c:	e018      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      break;
 8004622:	e015      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e00b      	b.n	800464e <DMA_CheckFifoParam+0xe6>
      break;
 8004636:	bf00      	nop
 8004638:	e00a      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800463a:	bf00      	nop
 800463c:	e008      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800463e:	bf00      	nop
 8004640:	e006      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e004      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;   
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
    }
  } 
  
  return status; 
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop

08004660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e16b      	b.n	8004954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800467c:	2201      	movs	r2, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	f040 815a 	bne.w	800494e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d005      	beq.n	80046b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d130      	bne.n	8004714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e8:	2201      	movs	r2, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 0201 	and.w	r2, r3, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d017      	beq.n	8004750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d123      	bne.n	80047a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	08da      	lsrs	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3208      	adds	r2, #8
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80b4 	beq.w	800494e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b60      	ldr	r3, [pc, #384]	; (800496c <HAL_GPIO_Init+0x30c>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	4a5f      	ldr	r2, [pc, #380]	; (800496c <HAL_GPIO_Init+0x30c>)
 80047f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f4:	6453      	str	r3, [r2, #68]	; 0x44
 80047f6:	4b5d      	ldr	r3, [pc, #372]	; (800496c <HAL_GPIO_Init+0x30c>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004802:	4a5b      	ldr	r2, [pc, #364]	; (8004970 <HAL_GPIO_Init+0x310>)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	3302      	adds	r3, #2
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	220f      	movs	r2, #15
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a52      	ldr	r2, [pc, #328]	; (8004974 <HAL_GPIO_Init+0x314>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02b      	beq.n	8004886 <HAL_GPIO_Init+0x226>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a51      	ldr	r2, [pc, #324]	; (8004978 <HAL_GPIO_Init+0x318>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d025      	beq.n	8004882 <HAL_GPIO_Init+0x222>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a50      	ldr	r2, [pc, #320]	; (800497c <HAL_GPIO_Init+0x31c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01f      	beq.n	800487e <HAL_GPIO_Init+0x21e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4f      	ldr	r2, [pc, #316]	; (8004980 <HAL_GPIO_Init+0x320>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d019      	beq.n	800487a <HAL_GPIO_Init+0x21a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4e      	ldr	r2, [pc, #312]	; (8004984 <HAL_GPIO_Init+0x324>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_GPIO_Init+0x216>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4d      	ldr	r2, [pc, #308]	; (8004988 <HAL_GPIO_Init+0x328>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00d      	beq.n	8004872 <HAL_GPIO_Init+0x212>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4c      	ldr	r2, [pc, #304]	; (800498c <HAL_GPIO_Init+0x32c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <HAL_GPIO_Init+0x20e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4b      	ldr	r2, [pc, #300]	; (8004990 <HAL_GPIO_Init+0x330>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_GPIO_Init+0x20a>
 8004866:	2307      	movs	r3, #7
 8004868:	e00e      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800486a:	2308      	movs	r3, #8
 800486c:	e00c      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800486e:	2306      	movs	r3, #6
 8004870:	e00a      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004872:	2305      	movs	r3, #5
 8004874:	e008      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004876:	2304      	movs	r3, #4
 8004878:	e006      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800487a:	2303      	movs	r3, #3
 800487c:	e004      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800487e:	2302      	movs	r3, #2
 8004880:	e002      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004886:	2300      	movs	r3, #0
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	f002 0203 	and.w	r2, r2, #3
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	4093      	lsls	r3, r2
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004898:	4935      	ldr	r1, [pc, #212]	; (8004970 <HAL_GPIO_Init+0x310>)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	3302      	adds	r3, #2
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_GPIO_Init+0x334>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ca:	4a32      	ldr	r2, [pc, #200]	; (8004994 <HAL_GPIO_Init+0x334>)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048d0:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_GPIO_Init+0x334>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <HAL_GPIO_Init+0x334>)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_GPIO_Init+0x334>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_GPIO_Init+0x334>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_GPIO_Init+0x334>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004948:	4a12      	ldr	r2, [pc, #72]	; (8004994 <HAL_GPIO_Init+0x334>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	f67f ae90 	bls.w	800467c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3724      	adds	r7, #36	; 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800
 8004970:	40013800 	.word	0x40013800
 8004974:	40020000 	.word	0x40020000
 8004978:	40020400 	.word	0x40020400
 800497c:	40020800 	.word	0x40020800
 8004980:	40020c00 	.word	0x40020c00
 8004984:	40021000 	.word	0x40021000
 8004988:	40021400 	.word	0x40021400
 800498c:	40021800 	.word	0x40021800
 8004990:	40021c00 	.word	0x40021c00
 8004994:	40013c00 	.word	0x40013c00

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049b4:	e003      	b.n	80049be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	041a      	lsls	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049dc:	887a      	ldrh	r2, [r7, #2]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4013      	ands	r3, r2
 80049e2:	041a      	lsls	r2, r3, #16
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	43d9      	mvns	r1, r3
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	400b      	ands	r3, r1
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	619a      	str	r2, [r3, #24]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e12b      	b.n	8004c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fd98 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a64:	f000 fd5c 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8004a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4a81      	ldr	r2, [pc, #516]	; (8004c74 <HAL_I2C_Init+0x274>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d807      	bhi.n	8004a84 <HAL_I2C_Init+0x84>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a80      	ldr	r2, [pc, #512]	; (8004c78 <HAL_I2C_Init+0x278>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e006      	b.n	8004a92 <HAL_I2C_Init+0x92>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a7d      	ldr	r2, [pc, #500]	; (8004c7c <HAL_I2C_Init+0x27c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bf94      	ite	ls
 8004a8c:	2301      	movls	r3, #1
 8004a8e:	2300      	movhi	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0e7      	b.n	8004c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a78      	ldr	r2, [pc, #480]	; (8004c80 <HAL_I2C_Init+0x280>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0c9b      	lsrs	r3, r3, #18
 8004aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a6a      	ldr	r2, [pc, #424]	; (8004c74 <HAL_I2C_Init+0x274>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d802      	bhi.n	8004ad4 <HAL_I2C_Init+0xd4>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	e009      	b.n	8004ae8 <HAL_I2C_Init+0xe8>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	4a69      	ldr	r2, [pc, #420]	; (8004c84 <HAL_I2C_Init+0x284>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	495c      	ldr	r1, [pc, #368]	; (8004c74 <HAL_I2C_Init+0x274>)
 8004b04:	428b      	cmp	r3, r1
 8004b06:	d819      	bhi.n	8004b3c <HAL_I2C_Init+0x13c>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e59      	subs	r1, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b1c:	400b      	ands	r3, r1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_I2C_Init+0x138>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1e59      	subs	r1, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b30:	3301      	adds	r3, #1
 8004b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b36:	e051      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	e04f      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d111      	bne.n	8004b68 <HAL_I2C_Init+0x168>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1e58      	subs	r0, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	440b      	add	r3, r1
 8004b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e012      	b.n	8004b8e <HAL_I2C_Init+0x18e>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	0099      	lsls	r1, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Init+0x196>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e022      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10e      	bne.n	8004bbc <HAL_I2C_Init+0x1bc>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1e58      	subs	r0, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	440b      	add	r3, r1
 8004bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	e00f      	b.n	8004bdc <HAL_I2C_Init+0x1dc>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1e58      	subs	r0, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	0099      	lsls	r1, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	6809      	ldr	r1, [r1, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6911      	ldr	r1, [r2, #16]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	000186a0 	.word	0x000186a0
 8004c78:	001e847f 	.word	0x001e847f
 8004c7c:	003d08ff 	.word	0x003d08ff
 8004c80:	431bde83 	.word	0x431bde83
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e264      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d075      	beq.n	8004d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ca6:	4ba3      	ldr	r3, [pc, #652]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d00c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb2:	4ba0      	ldr	r3, [pc, #640]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d112      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbe:	4b9d      	ldr	r3, [pc, #628]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	4b99      	ldr	r3, [pc, #612]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05b      	beq.n	8004d90 <HAL_RCC_OscConfig+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d157      	bne.n	8004d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e23f      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d106      	bne.n	8004cfc <HAL_RCC_OscConfig+0x74>
 8004cee:	4b91      	ldr	r3, [pc, #580]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a90      	ldr	r2, [pc, #576]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x98>
 8004d06:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a8a      	ldr	r2, [pc, #552]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a87      	ldr	r2, [pc, #540]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xb0>
 8004d20:	4b84      	ldr	r3, [pc, #528]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a83      	ldr	r2, [pc, #524]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fe fb38 	bl	80033b4 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fe fb34 	bl	80033b4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e204      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xc0>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fe fb24 	bl	80033b4 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fe fb20 	bl	80033b4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e1f0      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b6c      	ldr	r3, [pc, #432]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0xe8>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b62      	ldr	r3, [pc, #392]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004db6:	4b5f      	ldr	r3, [pc, #380]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x152>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1c4      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b56      	ldr	r3, [pc, #344]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4952      	ldr	r1, [pc, #328]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e03a      	b.n	8004e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b4f      	ldr	r3, [pc, #316]	; (8004f38 <HAL_RCC_OscConfig+0x2b0>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fad9 	bl	80033b4 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fe fad5 	bl	80033b4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1a5      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	4b46      	ldr	r3, [pc, #280]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4940      	ldr	r1, [pc, #256]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCC_OscConfig+0x2b0>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fe fab8 	bl	80033b4 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fe fab4 	bl	80033b4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e184      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d030      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_RCC_OscConfig+0x2b4>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fe fa98 	bl	80033b4 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fe fa94 	bl	80033b4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e164      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x200>
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCC_OscConfig+0x2b4>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fe fa81 	bl	80033b4 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fe fa7d 	bl	80033b4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e14d      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80a0 	beq.w	8005022 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6413      	str	r3, [r2, #64]	; 0x40
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_OscConfig+0x2b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d121      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_RCC_OscConfig+0x2b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <HAL_RCC_OscConfig+0x2b8>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fe fa43 	bl	80033b4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	e011      	b.n	8004f56 <HAL_RCC_OscConfig+0x2ce>
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800
 8004f38:	42470000 	.word	0x42470000
 8004f3c:	42470e80 	.word	0x42470e80
 8004f40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f44:	f7fe fa36 	bl	80033b4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e106      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b85      	ldr	r3, [pc, #532]	; (800516c <HAL_RCC_OscConfig+0x4e4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d106      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
 8004f6a:	4b81      	ldr	r3, [pc, #516]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a80      	ldr	r2, [pc, #512]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	e01c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x32a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCC_OscConfig+0x312>
 8004f80:	4b7b      	ldr	r3, [pc, #492]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a7a      	ldr	r2, [pc, #488]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f86:	f043 0304 	orr.w	r3, r3, #4
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	4b78      	ldr	r3, [pc, #480]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4a77      	ldr	r2, [pc, #476]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6713      	str	r3, [r2, #112]	; 0x70
 8004f98:	e00b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x32a>
 8004f9a:	4b75      	ldr	r3, [pc, #468]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a74      	ldr	r2, [pc, #464]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	4b72      	ldr	r3, [pc, #456]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4a71      	ldr	r2, [pc, #452]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d015      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fe f9fb 	bl	80033b4 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fe f9f7 	bl	80033b4 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0c5      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd8:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ee      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x33a>
 8004fe4:	e014      	b.n	8005010 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe6:	f7fe f9e5 	bl	80033b4 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fe f9e1 	bl	80033b4 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0af      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	4b5a      	ldr	r3, [pc, #360]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ee      	bne.n	8004fee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d105      	bne.n	8005022 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005016:	4b56      	ldr	r3, [pc, #344]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a55      	ldr	r2, [pc, #340]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 809b 	beq.w	8005162 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 030c 	and.w	r3, r3, #12
 8005034:	2b08      	cmp	r3, #8
 8005036:	d05c      	beq.n	80050f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d141      	bne.n	80050c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b4c      	ldr	r3, [pc, #304]	; (8005174 <HAL_RCC_OscConfig+0x4ec>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fe f9b5 	bl	80033b4 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504e:	f7fe f9b1 	bl	80033b4 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e081      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005060:	4b43      	ldr	r3, [pc, #268]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f0      	bne.n	800504e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	019b      	lsls	r3, r3, #6
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	3b01      	subs	r3, #1
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	4937      	ldr	r1, [pc, #220]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005096:	4b37      	ldr	r3, [pc, #220]	; (8005174 <HAL_RCC_OscConfig+0x4ec>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fe f98a 	bl	80033b4 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fe f986 	bl	80033b4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e056      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	4b2e      	ldr	r3, [pc, #184]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x41c>
 80050c2:	e04e      	b.n	8005162 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c4:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_OscConfig+0x4ec>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7fe f973 	bl	80033b4 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d2:	f7fe f96f 	bl	80033b4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e03f      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e4:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x44a>
 80050f0:	e037      	b.n	8005162 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e032      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d028      	beq.n	800515e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d121      	bne.n	800515e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d11a      	bne.n	800515e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800512e:	4013      	ands	r3, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005134:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005136:	4293      	cmp	r3, r2
 8005138:	d111      	bne.n	800515e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	3b01      	subs	r3, #1
 8005148:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d107      	bne.n	800515e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40007000 	.word	0x40007000
 8005170:	40023800 	.word	0x40023800
 8005174:	42470060 	.word	0x42470060

08005178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0cc      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b68      	ldr	r3, [pc, #416]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d90c      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b65      	ldr	r3, [pc, #404]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b63      	ldr	r3, [pc, #396]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0b8      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051cc:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a58      	ldr	r2, [pc, #352]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e4:	4b53      	ldr	r3, [pc, #332]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	4a52      	ldr	r2, [pc, #328]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f0:	4b50      	ldr	r3, [pc, #320]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	494d      	ldr	r1, [pc, #308]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d044      	beq.n	8005298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d119      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d003      	beq.n	8005236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005232:	2b03      	cmp	r3, #3
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005236:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005246:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e067      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005256:	4b37      	ldr	r3, [pc, #220]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f023 0203 	bic.w	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4934      	ldr	r1, [pc, #208]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005268:	f7fe f8a4 	bl	80033b4 <HAL_GetTick>
 800526c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526e:	e00a      	b.n	8005286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005270:	f7fe f8a0 	bl	80033b4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e04f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	4b2b      	ldr	r3, [pc, #172]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 020c 	and.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	429a      	cmp	r2, r3
 8005296:	d1eb      	bne.n	8005270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d20c      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b22      	ldr	r3, [pc, #136]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <HAL_RCC_ClockConfig+0x1b8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e032      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4916      	ldr	r1, [pc, #88]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	490e      	ldr	r1, [pc, #56]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052fe:	f000 f821 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490a      	ldr	r1, [pc, #40]	; (8005338 <HAL_RCC_ClockConfig+0x1c0>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe f804 	bl	800332c <HAL_InitTick>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023c00 	.word	0x40023c00
 8005334:	40023800 	.word	0x40023800
 8005338:	0800bbb0 	.word	0x0800bbb0
 800533c:	20000020 	.word	0x20000020
 8005340:	20000024 	.word	0x20000024

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535c:	4b67      	ldr	r3, [pc, #412]	; (80054fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d00d      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x40>
 8005368:	2b08      	cmp	r3, #8
 800536a:	f200 80bd 	bhi.w	80054e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x34>
 8005372:	2b04      	cmp	r3, #4
 8005374:	d003      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x3a>
 8005376:	e0b7      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b61      	ldr	r3, [pc, #388]	; (8005500 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800537a:	60bb      	str	r3, [r7, #8]
       break;
 800537c:	e0b7      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800537e:	4b61      	ldr	r3, [pc, #388]	; (8005504 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005380:	60bb      	str	r3, [r7, #8]
      break;
 8005382:	e0b4      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005384:	4b5d      	ldr	r3, [pc, #372]	; (80054fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800538e:	4b5b      	ldr	r3, [pc, #364]	; (80054fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04d      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	4b58      	ldr	r3, [pc, #352]	; (80054fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	099b      	lsrs	r3, r3, #6
 80053a0:	461a      	mov	r2, r3
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	ea02 0800 	and.w	r8, r2, r0
 80053b2:	ea03 0901 	and.w	r9, r3, r1
 80053b6:	4640      	mov	r0, r8
 80053b8:	4649      	mov	r1, r9
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	014b      	lsls	r3, r1, #5
 80053c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053c8:	0142      	lsls	r2, r0, #5
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	ebb0 0008 	subs.w	r0, r0, r8
 80053d2:	eb61 0109 	sbc.w	r1, r1, r9
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	018b      	lsls	r3, r1, #6
 80053e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053e4:	0182      	lsls	r2, r0, #6
 80053e6:	1a12      	subs	r2, r2, r0
 80053e8:	eb63 0301 	sbc.w	r3, r3, r1
 80053ec:	f04f 0000 	mov.w	r0, #0
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	00d9      	lsls	r1, r3, #3
 80053f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053fa:	00d0      	lsls	r0, r2, #3
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	eb12 0208 	adds.w	r2, r2, r8
 8005404:	eb43 0309 	adc.w	r3, r3, r9
 8005408:	f04f 0000 	mov.w	r0, #0
 800540c:	f04f 0100 	mov.w	r1, #0
 8005410:	0259      	lsls	r1, r3, #9
 8005412:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005416:	0250      	lsls	r0, r2, #9
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	461a      	mov	r2, r3
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	f7fb fb40 	bl	8000aac <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4613      	mov	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e04a      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	461a      	mov	r2, r3
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	ea02 0400 	and.w	r4, r2, r0
 800544e:	ea03 0501 	and.w	r5, r3, r1
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	014b      	lsls	r3, r1, #5
 8005460:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005464:	0142      	lsls	r2, r0, #5
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	1b00      	subs	r0, r0, r4
 800546c:	eb61 0105 	sbc.w	r1, r1, r5
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	018b      	lsls	r3, r1, #6
 800547a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800547e:	0182      	lsls	r2, r0, #6
 8005480:	1a12      	subs	r2, r2, r0
 8005482:	eb63 0301 	sbc.w	r3, r3, r1
 8005486:	f04f 0000 	mov.w	r0, #0
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	00d9      	lsls	r1, r3, #3
 8005490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005494:	00d0      	lsls	r0, r2, #3
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	1912      	adds	r2, r2, r4
 800549c:	eb45 0303 	adc.w	r3, r5, r3
 80054a0:	f04f 0000 	mov.w	r0, #0
 80054a4:	f04f 0100 	mov.w	r1, #0
 80054a8:	0299      	lsls	r1, r3, #10
 80054aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054ae:	0290      	lsls	r0, r2, #10
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	f7fb faf4 	bl	8000aac <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	3301      	adds	r3, #1
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	60bb      	str	r3, [r7, #8]
      break;
 80054e6:	e002      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054ea:	60bb      	str	r3, [r7, #8]
      break;
 80054ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ee:	68bb      	ldr	r3, [r7, #8]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800
 8005500:	00f42400 	.word	0x00f42400
 8005504:	007a1200 	.word	0x007a1200

08005508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000020 	.word	0x20000020

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a9b      	lsrs	r3, r3, #10
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4903      	ldr	r1, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	0800bbc0 	.word	0x0800bbc0

08005548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800554c:	f7ff ffdc 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0b5b      	lsrs	r3, r3, #13
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4903      	ldr	r1, [pc, #12]	; (800556c <HAL_RCC_GetPCLK2Freq+0x24>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	0800bbc0 	.word	0x0800bbc0

08005570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07b      	b.n	800567a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d009      	beq.n	80055a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	61da      	str	r2, [r3, #28]
 800559a:	e005      	b.n	80055a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fd fb78 	bl	8002cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562c:	ea42 0103 	orr.w	r1, r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	f003 0104 	and.w	r1, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	f003 0210 	and.w	r2, r3, #16
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b088      	sub	sp, #32
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_SPI_Transmit+0x22>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e126      	b.n	80058f2 <HAL_SPI_Transmit+0x270>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ac:	f7fd fe82 	bl	80033b4 <HAL_GetTick>
 80056b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d002      	beq.n	80056c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056c6:	e10b      	b.n	80058e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0x52>
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056d8:	e102      	b.n	80058e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2203      	movs	r2, #3
 80056de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005720:	d10f      	bne.n	8005742 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005740:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d007      	beq.n	8005760 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005768:	d14b      	bne.n	8005802 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_SPI_Transmit+0xf6>
 8005772:	8afb      	ldrh	r3, [r7, #22]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d13e      	bne.n	80057f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	881a      	ldrh	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800579c:	e02b      	b.n	80057f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d112      	bne.n	80057d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	1c9a      	adds	r2, r3, #2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80057d0:	e011      	b.n	80057f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d2:	f7fd fdef 	bl	80033b4 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d803      	bhi.n	80057ea <HAL_SPI_Transmit+0x168>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d102      	bne.n	80057f0 <HAL_SPI_Transmit+0x16e>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057f4:	e074      	b.n	80058e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ce      	bne.n	800579e <HAL_SPI_Transmit+0x11c>
 8005800:	e04c      	b.n	800589c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_Transmit+0x18e>
 800580a:	8afb      	ldrh	r3, [r7, #22]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d140      	bne.n	8005892 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005836:	e02c      	b.n	8005892 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d113      	bne.n	800586e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	86da      	strh	r2, [r3, #54]	; 0x36
 800586c:	e011      	b.n	8005892 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586e:	f7fd fda1 	bl	80033b4 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d803      	bhi.n	8005886 <HAL_SPI_Transmit+0x204>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x20a>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005890:	e026      	b.n	80058e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1cd      	bne.n	8005838 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fbcb 	bl	800603c <SPI_EndRxTxTransaction>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e000      	b.n	80058e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80058de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b088      	sub	sp, #32
 80058fe:	af02      	add	r7, sp, #8
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005916:	d112      	bne.n	800593e <HAL_SPI_Receive+0x44>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10e      	bne.n	800593e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2204      	movs	r2, #4
 8005924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f8f1 	bl	8005b1c <HAL_SPI_TransmitReceive>
 800593a:	4603      	mov	r3, r0
 800593c:	e0ea      	b.n	8005b14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_SPI_Receive+0x52>
 8005948:	2302      	movs	r3, #2
 800594a:	e0e3      	b.n	8005b14 <HAL_SPI_Receive+0x21a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005954:	f7fd fd2e 	bl	80033b4 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b01      	cmp	r3, #1
 8005964:	d002      	beq.n	800596c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005966:	2302      	movs	r3, #2
 8005968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800596a:	e0ca      	b.n	8005b02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_SPI_Receive+0x7e>
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800597c:	e0c1      	b.n	8005b02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2204      	movs	r2, #4
 8005982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c4:	d10f      	bne.n	80059e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	d007      	beq.n	8005a04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d162      	bne.n	8005ad2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a0c:	e02e      	b.n	8005a6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d115      	bne.n	8005a48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f103 020c 	add.w	r2, r3, #12
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	7812      	ldrb	r2, [r2, #0]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a46:	e011      	b.n	8005a6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a48:	f7fd fcb4 	bl	80033b4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d803      	bhi.n	8005a60 <HAL_SPI_Receive+0x166>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Receive+0x16c>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a6a:	e04a      	b.n	8005b02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1cb      	bne.n	8005a0e <HAL_SPI_Receive+0x114>
 8005a76:	e031      	b.n	8005adc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d113      	bne.n	8005aae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	b292      	uxth	r2, r2
 8005a92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aac:	e011      	b.n	8005ad2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aae:	f7fd fc81 	bl	80033b4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d803      	bhi.n	8005ac6 <HAL_SPI_Receive+0x1cc>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac4:	d102      	bne.n	8005acc <HAL_SPI_Receive+0x1d2>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ad0:	e017      	b.n	8005b02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1cd      	bne.n	8005a78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fa45 	bl	8005f70 <SPI_EndRxTransaction>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	75fb      	strb	r3, [r7, #23]
 8005afe:	e000      	b.n	8005b02 <HAL_SPI_Receive+0x208>
  }

error :
 8005b00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	; 0x30
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_TransmitReceive+0x26>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e18a      	b.n	8005e58 <HAL_SPI_TransmitReceive+0x33c>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b4a:	f7fd fc33 	bl	80033b4 <HAL_GetTick>
 8005b4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b60:	887b      	ldrh	r3, [r7, #2]
 8005b62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d00f      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x70>
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b72:	d107      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x68>
 8005b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d003      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b8a:	e15b      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0x82>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0x82>
 8005b98:	887b      	ldrh	r3, [r7, #2]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ba4:	e14e      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d003      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2205      	movs	r2, #5
 8005bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	887a      	ldrh	r2, [r7, #2]
 8005bca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	887a      	ldrh	r2, [r7, #2]
 8005bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	887a      	ldrh	r2, [r7, #2]
 8005bdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	887a      	ldrh	r2, [r7, #2]
 8005be2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d007      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c16:	d178      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x10a>
 8005c20:	8b7b      	ldrh	r3, [r7, #26]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d166      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c4a:	e053      	b.n	8005cf4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d11b      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x176>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d016      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x176>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d113      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	881a      	ldrh	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d119      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x1b8>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	b292      	uxth	r2, r2
 8005cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	1c9a      	adds	r2, r3, #2
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cd4:	f7fd fb6e 	bl	80033b4 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d807      	bhi.n	8005cf4 <HAL_SPI_TransmitReceive+0x1d8>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cea:	d003      	beq.n	8005cf4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cf2:	e0a7      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1a6      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x130>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1a1      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x130>
 8005d08:	e07c      	b.n	8005e04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x1fc>
 8005d12:	8b7b      	ldrh	r3, [r7, #26]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d16b      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d3e:	e057      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d11c      	bne.n	8005d88 <HAL_SPI_TransmitReceive+0x26c>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d017      	beq.n	8005d88 <HAL_SPI_TransmitReceive+0x26c>
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d114      	bne.n	8005d88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d119      	bne.n	8005dca <HAL_SPI_TransmitReceive+0x2ae>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d014      	beq.n	8005dca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dca:	f7fd faf3 	bl	80033b4 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d803      	bhi.n	8005de2 <HAL_SPI_TransmitReceive+0x2c6>
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x2cc>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dee:	e029      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1a2      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x224>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d19d      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f917 	bl	800603c <SPI_EndRxTxTransaction>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e20:	e010      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	e000      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3730      	adds	r7, #48	; 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e70:	f7fd faa0 	bl	80033b4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e80:	f7fd fa98 	bl	80033b4 <HAL_GetTick>
 8005e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	015b      	lsls	r3, r3, #5
 8005e8c:	0d1b      	lsrs	r3, r3, #20
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e96:	e054      	b.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e9e:	d050      	beq.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ea0:	f7fd fa88 	bl	80033b4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d902      	bls.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d13d      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ece:	d111      	bne.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d004      	beq.n	8005ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee2:	d107      	bne.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efc:	d10f      	bne.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e017      	b.n	8005f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	bf0c      	ite	eq
 8005f52:	2301      	moveq	r3, #1
 8005f54:	2300      	movne	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d19b      	bne.n	8005e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000020 	.word	0x20000020

08005f70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f84:	d111      	bne.n	8005faa <SPI_EndRxTransaction+0x3a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f8e:	d004      	beq.n	8005f9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d107      	bne.n	8005faa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb2:	d12a      	bne.n	800600a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbc:	d012      	beq.n	8005fe4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2180      	movs	r1, #128	; 0x80
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ff49 	bl	8005e60 <SPI_WaitFlagStateUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02d      	beq.n	8006030 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e026      	b.n	8006032 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	2101      	movs	r1, #1
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff ff36 	bl	8005e60 <SPI_WaitFlagStateUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01a      	beq.n	8006030 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f043 0220 	orr.w	r2, r3, #32
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e013      	b.n	8006032 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2200      	movs	r2, #0
 8006012:	2101      	movs	r1, #1
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff ff23 	bl	8005e60 <SPI_WaitFlagStateUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e000      	b.n	8006032 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <SPI_EndRxTxTransaction+0x7c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <SPI_EndRxTxTransaction+0x80>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	0d5b      	lsrs	r3, r3, #21
 8006054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006066:	d112      	bne.n	800608e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2200      	movs	r2, #0
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fef4 	bl	8005e60 <SPI_WaitFlagStateUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	f043 0220 	orr.w	r2, r3, #32
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e00f      	b.n	80060ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3b01      	subs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	d0f2      	beq.n	800608e <SPI_EndRxTxTransaction+0x52>
 80060a8:	e000      	b.n	80060ac <SPI_EndRxTxTransaction+0x70>
        break;
 80060aa:	bf00      	nop
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000020 	.word	0x20000020
 80060bc:	165e9f81 	.word	0x165e9f81

080060c0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e034      	b.n	8006140 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7fb f8f8 	bl	80012e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3308      	adds	r3, #8
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f002 f828 	bl	8008150 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	461a      	mov	r2, r3
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	f002 f872 	bl	80081f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6858      	ldr	r0, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	f002 f8a7 	bl	8008270 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	6892      	ldr	r2, [r2, #8]
 800612a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	6892      	ldr	r2, [r2, #8]
 8006136:	f041 0101 	orr.w	r1, r1, #1
 800613a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e041      	b.n	80061de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc ff3c 	bl	8002fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f000 fc7a 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d001      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e04e      	b.n	800629e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a23      	ldr	r2, [pc, #140]	; (80062ac <HAL_TIM_Base_Start_IT+0xc4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d022      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d01d      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1e      	ldr	r2, [pc, #120]	; (80062b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1b      	ldr	r2, [pc, #108]	; (80062bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x80>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d111      	bne.n	800628c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d010      	beq.n	800629c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	e007      	b.n	800629c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40001800 	.word	0x40001800

080062c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e041      	b.n	800635e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f839 	bl	8006366 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f000 fbba 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_TIM_PWM_Start+0x24>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e022      	b.n	80063e6 <HAL_TIM_PWM_Start+0x6a>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d109      	bne.n	80063ba <HAL_TIM_PWM_Start+0x3e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	e015      	b.n	80063e6 <HAL_TIM_PWM_Start+0x6a>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_PWM_Start+0x58>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e008      	b.n	80063e6 <HAL_TIM_PWM_Start+0x6a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e07c      	b.n	80064e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0x82>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fc:	e013      	b.n	8006426 <HAL_TIM_PWM_Start+0xaa>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0x92>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800640c:	e00b      	b.n	8006426 <HAL_TIM_PWM_Start+0xaa>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xa2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800641c:	e003      	b.n	8006426 <HAL_TIM_PWM_Start+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2201      	movs	r2, #1
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fe10 	bl	8007054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2d      	ldr	r2, [pc, #180]	; (80064f0 <HAL_TIM_PWM_Start+0x174>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_TIM_PWM_Start+0xcc>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2c      	ldr	r2, [pc, #176]	; (80064f4 <HAL_TIM_PWM_Start+0x178>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d101      	bne.n	800644c <HAL_TIM_PWM_Start+0xd0>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_TIM_PWM_Start+0xd2>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a22      	ldr	r2, [pc, #136]	; (80064f0 <HAL_TIM_PWM_Start+0x174>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d022      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d01d      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <HAL_TIM_PWM_Start+0x17c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d018      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <HAL_TIM_PWM_Start+0x180>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <HAL_TIM_PWM_Start+0x184>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_TIM_PWM_Start+0x178>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_TIM_PWM_Start+0x188>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x136>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a16      	ldr	r2, [pc, #88]	; (8006508 <HAL_TIM_PWM_Start+0x18c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d010      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d4:	e007      	b.n	80064e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0201 	orr.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40010400 	.word	0x40010400
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40000c00 	.word	0x40000c00
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0202 	mvn.w	r2, #2
 8006538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa77 	bl	8006a42 <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa69 	bl	8006a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa7a 	bl	8006a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa4d 	bl	8006a42 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa3f 	bl	8006a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa50 	bl	8006a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0208 	mvn.w	r2, #8
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa23 	bl	8006a42 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa15 	bl	8006a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa26 	bl	8006a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9f9 	bl	8006a42 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9eb 	bl	8006a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f9fc 	bl	8006a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0201 	mvn.w	r2, #1
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fc fab4 	bl	8002bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d10e      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fd78 	bl	80071ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d10e      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d107      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9c1 	bl	8006a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d10e      	bne.n	8006714 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b20      	cmp	r3, #32
 8006702:	d107      	bne.n	8006714 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0220 	mvn.w	r2, #32
 800670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fd42 	bl	8007198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006736:	2302      	movs	r3, #2
 8006738:	e0ae      	b.n	8006898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b0c      	cmp	r3, #12
 8006746:	f200 809f 	bhi.w	8006888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006785 	.word	0x08006785
 8006754:	08006889 	.word	0x08006889
 8006758:	08006889 	.word	0x08006889
 800675c:	08006889 	.word	0x08006889
 8006760:	080067c5 	.word	0x080067c5
 8006764:	08006889 	.word	0x08006889
 8006768:	08006889 	.word	0x08006889
 800676c:	08006889 	.word	0x08006889
 8006770:	08006807 	.word	0x08006807
 8006774:	08006889 	.word	0x08006889
 8006778:	08006889 	.word	0x08006889
 800677c:	08006889 	.word	0x08006889
 8006780:	08006847 	.word	0x08006847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fa18 	bl	8006bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0204 	bic.w	r2, r2, #4
 80067ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	619a      	str	r2, [r3, #24]
      break;
 80067c2:	e064      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fa68 	bl	8006ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6999      	ldr	r1, [r3, #24]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	021a      	lsls	r2, r3, #8
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	619a      	str	r2, [r3, #24]
      break;
 8006804:	e043      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fabd 	bl	8006d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0208 	orr.w	r2, r2, #8
 8006820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0204 	bic.w	r2, r2, #4
 8006830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69d9      	ldr	r1, [r3, #28]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	61da      	str	r2, [r3, #28]
      break;
 8006844:	e023      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fb11 	bl	8006e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69d9      	ldr	r1, [r3, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	021a      	lsls	r2, r3, #8
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	61da      	str	r2, [r3, #28]
      break;
 8006886:	e002      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
      break;
 800688c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIM_ConfigClockSource+0x1c>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e0b4      	b.n	8006a26 <HAL_TIM_ConfigClockSource+0x186>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d03e      	beq.n	8006974 <HAL_TIM_ConfigClockSource+0xd4>
 80068f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fa:	f200 8087 	bhi.w	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	f000 8086 	beq.w	8006a12 <HAL_TIM_ConfigClockSource+0x172>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690a:	d87f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b70      	cmp	r3, #112	; 0x70
 800690e:	d01a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0xa6>
 8006910:	2b70      	cmp	r3, #112	; 0x70
 8006912:	d87b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b60      	cmp	r3, #96	; 0x60
 8006916:	d050      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x11a>
 8006918:	2b60      	cmp	r3, #96	; 0x60
 800691a:	d877      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800691c:	2b50      	cmp	r3, #80	; 0x50
 800691e:	d03c      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xfa>
 8006920:	2b50      	cmp	r3, #80	; 0x50
 8006922:	d873      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d058      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x13a>
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d86f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800692c:	2b30      	cmp	r3, #48	; 0x30
 800692e:	d064      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006930:	2b30      	cmp	r3, #48	; 0x30
 8006932:	d86b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d060      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006938:	2b20      	cmp	r3, #32
 800693a:	d867      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05c      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006940:	2b10      	cmp	r3, #16
 8006942:	d05a      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006944:	e062      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f000 fb5d 	bl	8007014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	609a      	str	r2, [r3, #8]
      break;
 8006972:	e04f      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f000 fb46 	bl	8007014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006996:	609a      	str	r2, [r3, #8]
      break;
 8006998:	e03c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f000 faba 	bl	8006f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2150      	movs	r1, #80	; 0x50
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fb13 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 80069b8:	e02c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f000 fad9 	bl	8006f7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2160      	movs	r1, #96	; 0x60
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fb03 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 80069d8:	e01c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f000 fa9a 	bl	8006f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 faf3 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 80069f8:	e00c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f000 faea 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006a0a:	e003      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a40      	ldr	r2, [pc, #256]	; (8006b94 <TIM_Base_SetConfig+0x114>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d00f      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <TIM_Base_SetConfig+0x118>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00b      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3c      	ldr	r2, [pc, #240]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3b      	ldr	r2, [pc, #236]	; (8006ba0 <TIM_Base_SetConfig+0x120>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3a      	ldr	r2, [pc, #232]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d108      	bne.n	8006ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2f      	ldr	r2, [pc, #188]	; (8006b94 <TIM_Base_SetConfig+0x114>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d02b      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae0:	d027      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <TIM_Base_SetConfig+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d023      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01f      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <TIM_Base_SetConfig+0x120>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01b      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a29      	ldr	r2, [pc, #164]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d017      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a28      	ldr	r2, [pc, #160]	; (8006ba8 <TIM_Base_SetConfig+0x128>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a27      	ldr	r2, [pc, #156]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a26      	ldr	r2, [pc, #152]	; (8006bb0 <TIM_Base_SetConfig+0x130>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <TIM_Base_SetConfig+0x134>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <TIM_Base_SetConfig+0x138>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a23      	ldr	r2, [pc, #140]	; (8006bbc <TIM_Base_SetConfig+0x13c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <TIM_Base_SetConfig+0x114>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0xf8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0c      	ldr	r2, [pc, #48]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d103      	bne.n	8006b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	691a      	ldr	r2, [r3, #16]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	615a      	str	r2, [r3, #20]
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40010400 	.word	0x40010400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800
 8006bb4:	40001800 	.word	0x40001800
 8006bb8:	40001c00 	.word	0x40001c00
 8006bbc:	40002000 	.word	0x40002000

08006bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f023 0201 	bic.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 0302 	bic.w	r3, r3, #2
 8006c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <TIM_OC1_SetConfig+0xd8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC1_SetConfig+0x64>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	; (8006c9c <TIM_OC1_SetConfig+0xdc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10c      	bne.n	8006c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0308 	bic.w	r3, r3, #8
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0304 	bic.w	r3, r3, #4
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <TIM_OC1_SetConfig+0xd8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC1_SetConfig+0x8e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <TIM_OC1_SetConfig+0xdc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d111      	bne.n	8006c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	621a      	str	r2, [r3, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f023 0210 	bic.w	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0320 	bic.w	r3, r3, #32
 8006cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <TIM_OC2_SetConfig+0xe4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC2_SetConfig+0x68>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <TIM_OC2_SetConfig+0xe8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10d      	bne.n	8006d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a17      	ldr	r2, [pc, #92]	; (8006d84 <TIM_OC2_SetConfig+0xe4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC2_SetConfig+0x94>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <TIM_OC2_SetConfig+0xe8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d113      	bne.n	8006d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40010400 	.word	0x40010400

08006d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <TIM_OC3_SetConfig+0xe0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d003      	beq.n	8006df2 <TIM_OC3_SetConfig+0x66>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <TIM_OC3_SetConfig+0xe4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10d      	bne.n	8006e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a16      	ldr	r2, [pc, #88]	; (8006e6c <TIM_OC3_SetConfig+0xe0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d003      	beq.n	8006e1e <TIM_OC3_SetConfig+0x92>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <TIM_OC3_SetConfig+0xe4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d113      	bne.n	8006e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	621a      	str	r2, [r3, #32]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40010400 	.word	0x40010400

08006e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a12      	ldr	r2, [pc, #72]	; (8006f18 <TIM_OC4_SetConfig+0xa4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC4_SetConfig+0x68>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <TIM_OC4_SetConfig+0xa8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d109      	bne.n	8006ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	019b      	lsls	r3, r3, #6
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	621a      	str	r2, [r3, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40010400 	.word	0x40010400

08006f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f023 0201 	bic.w	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f023 030a 	bic.w	r3, r3, #10
 8006f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b087      	sub	sp, #28
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0210 	bic.w	r2, r3, #16
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	031b      	lsls	r3, r3, #12
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f043 0307 	orr.w	r3, r3, #7
 8007000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800702e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	431a      	orrs	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2201      	movs	r2, #1
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	43db      	mvns	r3, r3
 8007076:	401a      	ands	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	fa01 f303 	lsl.w	r3, r1, r3
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e05a      	b.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a21      	ldr	r2, [pc, #132]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007104:	d01d      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1a      	ldr	r2, [pc, #104]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a18      	ldr	r2, [pc, #96]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a17      	ldr	r2, [pc, #92]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a15      	ldr	r2, [pc, #84]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10c      	bne.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4313      	orrs	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40010000 	.word	0x40010000
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40000c00 	.word	0x40000c00
 800718c:	40010400 	.word	0x40010400
 8007190:	40014000 	.word	0x40014000
 8007194:	40001800 	.word	0x40001800

08007198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e03f      	b.n	8007252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fc f804 	bl	80031f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	; 0x24
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fddb 	bl	8007dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b08a      	sub	sp, #40	; 0x28
 800725e:	af02      	add	r7, sp, #8
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b20      	cmp	r3, #32
 8007278:	d17c      	bne.n	8007374 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <HAL_UART_Transmit+0x2c>
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e075      	b.n	8007376 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_UART_Transmit+0x3e>
 8007294:	2302      	movs	r3, #2
 8007296:	e06e      	b.n	8007376 <HAL_UART_Transmit+0x11c>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ae:	f7fc f881 	bl	80033b4 <HAL_GetTick>
 80072b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c8:	d108      	bne.n	80072dc <HAL_UART_Transmit+0x82>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e003      	b.n	80072e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072ec:	e02a      	b.n	8007344 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2180      	movs	r1, #128	; 0x80
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fb1f 	bl	800793c <UART_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e036      	b.n	8007376 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800731c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	3302      	adds	r3, #2
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	e007      	b.n	8007336 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	3301      	adds	r3, #1
 8007334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1cf      	bne.n	80072ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2200      	movs	r2, #0
 8007356:	2140      	movs	r1, #64	; 0x40
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 faef 	bl	800793c <UART_WaitOnFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e006      	b.n	8007376 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e000      	b.n	8007376 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	4613      	mov	r3, r2
 800738a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b20      	cmp	r3, #32
 8007396:	d11d      	bne.n	80073d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Receive_IT+0x26>
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e016      	b.n	80073d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_UART_Receive_IT+0x38>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e00f      	b.n	80073d6 <HAL_UART_Receive_IT+0x58>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	461a      	mov	r2, r3
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fb24 	bl	8007a18 <UART_Start_Receive_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	e000      	b.n	80073d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b0ba      	sub	sp, #232	; 0xe8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007406:	2300      	movs	r3, #0
 8007408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800740c:	2300      	movs	r3, #0
 800740e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800741e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10f      	bne.n	8007446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_UART_IRQHandler+0x66>
 8007432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fc03 	bl	8007c4a <UART_Receive_IT>
      return;
 8007444:	e256      	b.n	80078f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80de 	beq.w	800760c <HAL_UART_IRQHandler+0x22c>
 8007450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800745c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007460:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80d1 	beq.w	800760c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <HAL_UART_IRQHandler+0xae>
 8007476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f043 0201 	orr.w	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800748e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <HAL_UART_IRQHandler+0xd2>
 800749a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0202 	orr.w	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <HAL_UART_IRQHandler+0xf6>
 80074be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f043 0204 	orr.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d011      	beq.n	8007506 <HAL_UART_IRQHandler+0x126>
 80074e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0208 	orr.w	r2, r3, #8
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 81ed 	beq.w	80078ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d008      	beq.n	800752e <HAL_UART_IRQHandler+0x14e>
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fb8e 	bl	8007c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <HAL_UART_IRQHandler+0x17a>
 8007552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d04f      	beq.n	80075fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa96 	bl	8007a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d141      	bne.n	80075f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3314      	adds	r3, #20
 8007574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3314      	adds	r3, #20
 8007596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800759a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800759e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1d9      	bne.n	800756e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d013      	beq.n	80075ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	4a7d      	ldr	r2, [pc, #500]	; (80077bc <HAL_UART_IRQHandler+0x3dc>)
 80075c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc fdba 	bl	8004148 <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00e      	b.n	8007608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f990 	bl	8007910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e00a      	b.n	8007608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f98c 	bl	8007910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	e006      	b.n	8007608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f988 	bl	8007910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007606:	e170      	b.n	80078ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	bf00      	nop
    return;
 800760a:	e16e      	b.n	80078ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	2b01      	cmp	r3, #1
 8007612:	f040 814a 	bne.w	80078aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8143 	beq.w	80078aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 813c 	beq.w	80078aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	f040 80b4 	bne.w	80077c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8140 	beq.w	80078ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007676:	429a      	cmp	r2, r3
 8007678:	f080 8139 	bcs.w	80078ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007682:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768e:	f000 8088 	beq.w	80077a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1d9      	bne.n	8007692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3314      	adds	r3, #20
 80076e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076f0:	f023 0301 	bic.w	r3, r3, #1
 80076f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3314      	adds	r3, #20
 80076fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007702:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007706:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800770a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e1      	bne.n	80076de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3314      	adds	r3, #20
 8007720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800772a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800772c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3314      	adds	r3, #20
 800773a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800773e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800774c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e3      	bne.n	800771a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007772:	f023 0310 	bic.w	r3, r3, #16
 8007776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007784:	65ba      	str	r2, [r7, #88]	; 0x58
 8007786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800778a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e3      	bne.n	8007760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	4618      	mov	r0, r3
 800779e:	f7fc fc63 	bl	8004068 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8b6 	bl	8007924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077b8:	e099      	b.n	80078ee <HAL_UART_IRQHandler+0x50e>
 80077ba:	bf00      	nop
 80077bc:	08007b53 	.word	0x08007b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 808b 	beq.w	80078f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8086 	beq.w	80078f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800780a:	647a      	str	r2, [r7, #68]	; 0x44
 800780c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e3      	bne.n	80077e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3314      	adds	r3, #20
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	623b      	str	r3, [r7, #32]
   return(result);
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007842:	633a      	str	r2, [r7, #48]	; 0x30
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60fb      	str	r3, [r7, #12]
   return(result);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0310 	bic.w	r3, r3, #16
 800787a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007888:	61fa      	str	r2, [r7, #28]
 800788a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	69b9      	ldr	r1, [r7, #24]
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	617b      	str	r3, [r7, #20]
   return(result);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e3      	bne.n	8007864 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800789c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f83e 	bl	8007924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078a8:	e023      	b.n	80078f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <HAL_UART_IRQHandler+0x4ea>
 80078b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f959 	bl	8007b7a <UART_Transmit_IT>
    return;
 80078c8:	e014      	b.n	80078f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00e      	beq.n	80078f4 <HAL_UART_IRQHandler+0x514>
 80078d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d008      	beq.n	80078f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f999 	bl	8007c1a <UART_EndTransmit_IT>
    return;
 80078e8:	e004      	b.n	80078f4 <HAL_UART_IRQHandler+0x514>
    return;
 80078ea:	bf00      	nop
 80078ec:	e002      	b.n	80078f4 <HAL_UART_IRQHandler+0x514>
      return;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <HAL_UART_IRQHandler+0x514>
      return;
 80078f2:	bf00      	nop
  }
}
 80078f4:	37e8      	adds	r7, #232	; 0xe8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b090      	sub	sp, #64	; 0x40
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	4613      	mov	r3, r2
 800794a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794c:	e050      	b.n	80079f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007954:	d04c      	beq.n	80079f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x30>
 800795c:	f7fb fd2a 	bl	80033b4 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007968:	429a      	cmp	r2, r3
 800796a:	d241      	bcs.n	80079f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800798c:	637a      	str	r2, [r7, #52]	; 0x34
 800798e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e5      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3314      	adds	r3, #20
 80079a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	613b      	str	r3, [r7, #16]
   return(result);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c0:	623a      	str	r2, [r7, #32]
 80079c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	6a3a      	ldr	r2, [r7, #32]
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e00f      	b.n	8007a10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4013      	ands	r3, r2
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	bf0c      	ite	eq
 8007a00:	2301      	moveq	r3, #1
 8007a02:	2300      	movne	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d09f      	beq.n	800794e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3740      	adds	r7, #64	; 0x40
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2222      	movs	r2, #34	; 0x22
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a5c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0220 	orr.w	r2, r2, #32
 8007a7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b095      	sub	sp, #84	; 0x54
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e5      	bne.n	8007a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3314      	adds	r3, #20
 8007ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f023 0301 	bic.w	r3, r3, #1
 8007ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3314      	adds	r3, #20
 8007ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e5      	bne.n	8007ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d119      	bne.n	8007b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	330c      	adds	r3, #12
 8007b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 0310 	bic.w	r3, r3, #16
 8007b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b24:	61ba      	str	r2, [r7, #24]
 8007b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	613b      	str	r3, [r7, #16]
   return(result);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e5      	bne.n	8007b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b46:	bf00      	nop
 8007b48:	3754      	adds	r7, #84	; 0x54
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff fecf 	bl	8007910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b21      	cmp	r3, #33	; 0x21
 8007b8c:	d13e      	bne.n	8007c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b96:	d114      	bne.n	8007bc2 <UART_Transmit_IT+0x48>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d110      	bne.n	8007bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	621a      	str	r2, [r3, #32]
 8007bc0:	e008      	b.n	8007bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	1c59      	adds	r1, r3, #1
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6211      	str	r1, [r2, #32]
 8007bcc:	781a      	ldrb	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4619      	mov	r1, r3
 8007be2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10f      	bne.n	8007c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e000      	b.n	8007c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
  }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fe5e 	bl	80078fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b08c      	sub	sp, #48	; 0x30
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b22      	cmp	r3, #34	; 0x22
 8007c5c:	f040 80ab 	bne.w	8007db6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c68:	d117      	bne.n	8007c9a <UART_Receive_IT+0x50>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d113      	bne.n	8007c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	1c9a      	adds	r2, r3, #2
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	629a      	str	r2, [r3, #40]	; 0x28
 8007c98:	e026      	b.n	8007ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cac:	d007      	beq.n	8007cbe <UART_Receive_IT+0x74>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <UART_Receive_IT+0x82>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e008      	b.n	8007cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d15a      	bne.n	8007db2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0220 	bic.w	r2, r2, #32
 8007d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0201 	bic.w	r2, r2, #1
 8007d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d135      	bne.n	8007da8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	613b      	str	r3, [r7, #16]
   return(result);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f023 0310 	bic.w	r3, r3, #16
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	623a      	str	r2, [r7, #32]
 8007d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	69f9      	ldr	r1, [r7, #28]
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0310 	and.w	r3, r3, #16
 8007d80:	2b10      	cmp	r3, #16
 8007d82:	d10a      	bne.n	8007d9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d84:	2300      	movs	r3, #0
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fdbf 	bl	8007924 <HAL_UARTEx_RxEventCallback>
 8007da6:	e002      	b.n	8007dae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fb f9bd 	bl	8003128 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e002      	b.n	8007db8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e000      	b.n	8007db8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007db6:	2302      	movs	r3, #2
  }
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3730      	adds	r7, #48	; 0x30
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	b09f      	sub	sp, #124	; 0x7c
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd6:	68d9      	ldr	r1, [r3, #12]
 8007dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	ea40 0301 	orr.w	r3, r0, r1
 8007de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	431a      	orrs	r2, r3
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e04:	f021 010c 	bic.w	r1, r1, #12
 8007e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1e:	6999      	ldr	r1, [r3, #24]
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	ea40 0301 	orr.w	r3, r0, r1
 8007e28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4bc5      	ldr	r3, [pc, #788]	; (8008144 <UART_SetConfig+0x384>)
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d004      	beq.n	8007e3e <UART_SetConfig+0x7e>
 8007e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4bc3      	ldr	r3, [pc, #780]	; (8008148 <UART_SetConfig+0x388>)
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d103      	bne.n	8007e46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e3e:	f7fd fb83 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 8007e42:	6778      	str	r0, [r7, #116]	; 0x74
 8007e44:	e002      	b.n	8007e4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e46:	f7fd fb6b 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8007e4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e54:	f040 80b6 	bne.w	8007fc4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e5a:	461c      	mov	r4, r3
 8007e5c:	f04f 0500 	mov.w	r5, #0
 8007e60:	4622      	mov	r2, r4
 8007e62:	462b      	mov	r3, r5
 8007e64:	1891      	adds	r1, r2, r2
 8007e66:	6439      	str	r1, [r7, #64]	; 0x40
 8007e68:	415b      	adcs	r3, r3
 8007e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e70:	1912      	adds	r2, r2, r4
 8007e72:	eb45 0303 	adc.w	r3, r5, r3
 8007e76:	f04f 0000 	mov.w	r0, #0
 8007e7a:	f04f 0100 	mov.w	r1, #0
 8007e7e:	00d9      	lsls	r1, r3, #3
 8007e80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e84:	00d0      	lsls	r0, r2, #3
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	1911      	adds	r1, r2, r4
 8007e8c:	6639      	str	r1, [r7, #96]	; 0x60
 8007e8e:	416b      	adcs	r3, r5
 8007e90:	667b      	str	r3, [r7, #100]	; 0x64
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	1891      	adds	r1, r2, r2
 8007e9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ea0:	415b      	adcs	r3, r3
 8007ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ea8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007eac:	f7f8 fdfe 	bl	8000aac <__aeabi_uldivmod>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4ba5      	ldr	r3, [pc, #660]	; (800814c <UART_SetConfig+0x38c>)
 8007eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	011e      	lsls	r6, r3, #4
 8007ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec0:	461c      	mov	r4, r3
 8007ec2:	f04f 0500 	mov.w	r5, #0
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	462b      	mov	r3, r5
 8007eca:	1891      	adds	r1, r2, r2
 8007ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8007ece:	415b      	adcs	r3, r3
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ed6:	1912      	adds	r2, r2, r4
 8007ed8:	eb45 0303 	adc.w	r3, r5, r3
 8007edc:	f04f 0000 	mov.w	r0, #0
 8007ee0:	f04f 0100 	mov.w	r1, #0
 8007ee4:	00d9      	lsls	r1, r3, #3
 8007ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007eea:	00d0      	lsls	r0, r2, #3
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	1911      	adds	r1, r2, r4
 8007ef2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ef4:	416b      	adcs	r3, r5
 8007ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	461a      	mov	r2, r3
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	1891      	adds	r1, r2, r2
 8007f04:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f06:	415b      	adcs	r3, r3
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f12:	f7f8 fdcb 	bl	8000aac <__aeabi_uldivmod>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4b8c      	ldr	r3, [pc, #560]	; (800814c <UART_SetConfig+0x38c>)
 8007f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	2164      	movs	r1, #100	; 0x64
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	3332      	adds	r3, #50	; 0x32
 8007f2e:	4a87      	ldr	r2, [pc, #540]	; (800814c <UART_SetConfig+0x38c>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f3c:	441e      	add	r6, r3
 8007f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f40:	4618      	mov	r0, r3
 8007f42:	f04f 0100 	mov.w	r1, #0
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	1894      	adds	r4, r2, r2
 8007f4c:	623c      	str	r4, [r7, #32]
 8007f4e:	415b      	adcs	r3, r3
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
 8007f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f56:	1812      	adds	r2, r2, r0
 8007f58:	eb41 0303 	adc.w	r3, r1, r3
 8007f5c:	f04f 0400 	mov.w	r4, #0
 8007f60:	f04f 0500 	mov.w	r5, #0
 8007f64:	00dd      	lsls	r5, r3, #3
 8007f66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f6a:	00d4      	lsls	r4, r2, #3
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	462b      	mov	r3, r5
 8007f70:	1814      	adds	r4, r2, r0
 8007f72:	653c      	str	r4, [r7, #80]	; 0x50
 8007f74:	414b      	adcs	r3, r1
 8007f76:	657b      	str	r3, [r7, #84]	; 0x54
 8007f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	1891      	adds	r1, r2, r2
 8007f84:	61b9      	str	r1, [r7, #24]
 8007f86:	415b      	adcs	r3, r3
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f92:	f7f8 fd8b 	bl	8000aac <__aeabi_uldivmod>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4b6c      	ldr	r3, [pc, #432]	; (800814c <UART_SetConfig+0x38c>)
 8007f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	2164      	movs	r1, #100	; 0x64
 8007fa4:	fb01 f303 	mul.w	r3, r1, r3
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	3332      	adds	r3, #50	; 0x32
 8007fae:	4a67      	ldr	r2, [pc, #412]	; (800814c <UART_SetConfig+0x38c>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	f003 0207 	and.w	r2, r3, #7
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4432      	add	r2, r6
 8007fc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fc2:	e0b9      	b.n	8008138 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc6:	461c      	mov	r4, r3
 8007fc8:	f04f 0500 	mov.w	r5, #0
 8007fcc:	4622      	mov	r2, r4
 8007fce:	462b      	mov	r3, r5
 8007fd0:	1891      	adds	r1, r2, r2
 8007fd2:	6139      	str	r1, [r7, #16]
 8007fd4:	415b      	adcs	r3, r3
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fdc:	1912      	adds	r2, r2, r4
 8007fde:	eb45 0303 	adc.w	r3, r5, r3
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f04f 0100 	mov.w	r1, #0
 8007fea:	00d9      	lsls	r1, r3, #3
 8007fec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ff0:	00d0      	lsls	r0, r2, #3
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	eb12 0804 	adds.w	r8, r2, r4
 8007ffa:	eb43 0905 	adc.w	r9, r3, r5
 8007ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	f04f 0100 	mov.w	r1, #0
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	008b      	lsls	r3, r1, #2
 8008012:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008016:	0082      	lsls	r2, r0, #2
 8008018:	4640      	mov	r0, r8
 800801a:	4649      	mov	r1, r9
 800801c:	f7f8 fd46 	bl	8000aac <__aeabi_uldivmod>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4b49      	ldr	r3, [pc, #292]	; (800814c <UART_SetConfig+0x38c>)
 8008026:	fba3 2302 	umull	r2, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	011e      	lsls	r6, r3, #4
 800802e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008030:	4618      	mov	r0, r3
 8008032:	f04f 0100 	mov.w	r1, #0
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	1894      	adds	r4, r2, r2
 800803c:	60bc      	str	r4, [r7, #8]
 800803e:	415b      	adcs	r3, r3
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008046:	1812      	adds	r2, r2, r0
 8008048:	eb41 0303 	adc.w	r3, r1, r3
 800804c:	f04f 0400 	mov.w	r4, #0
 8008050:	f04f 0500 	mov.w	r5, #0
 8008054:	00dd      	lsls	r5, r3, #3
 8008056:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800805a:	00d4      	lsls	r4, r2, #3
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	1814      	adds	r4, r2, r0
 8008062:	64bc      	str	r4, [r7, #72]	; 0x48
 8008064:	414b      	adcs	r3, r1
 8008066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	f04f 0100 	mov.w	r1, #0
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	008b      	lsls	r3, r1, #2
 800807c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008080:	0082      	lsls	r2, r0, #2
 8008082:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008086:	f7f8 fd11 	bl	8000aac <__aeabi_uldivmod>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4b2f      	ldr	r3, [pc, #188]	; (800814c <UART_SetConfig+0x38c>)
 8008090:	fba3 1302 	umull	r1, r3, r3, r2
 8008094:	095b      	lsrs	r3, r3, #5
 8008096:	2164      	movs	r1, #100	; 0x64
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	3332      	adds	r3, #50	; 0x32
 80080a2:	4a2a      	ldr	r2, [pc, #168]	; (800814c <UART_SetConfig+0x38c>)
 80080a4:	fba2 2303 	umull	r2, r3, r2, r3
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ae:	441e      	add	r6, r3
 80080b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b2:	4618      	mov	r0, r3
 80080b4:	f04f 0100 	mov.w	r1, #0
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	1894      	adds	r4, r2, r2
 80080be:	603c      	str	r4, [r7, #0]
 80080c0:	415b      	adcs	r3, r3
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	1812      	adds	r2, r2, r0
 80080ca:	eb41 0303 	adc.w	r3, r1, r3
 80080ce:	f04f 0400 	mov.w	r4, #0
 80080d2:	f04f 0500 	mov.w	r5, #0
 80080d6:	00dd      	lsls	r5, r3, #3
 80080d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080dc:	00d4      	lsls	r4, r2, #3
 80080de:	4622      	mov	r2, r4
 80080e0:	462b      	mov	r3, r5
 80080e2:	eb12 0a00 	adds.w	sl, r2, r0
 80080e6:	eb43 0b01 	adc.w	fp, r3, r1
 80080ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f04f 0100 	mov.w	r1, #0
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	f04f 0300 	mov.w	r3, #0
 80080fc:	008b      	lsls	r3, r1, #2
 80080fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008102:	0082      	lsls	r2, r0, #2
 8008104:	4650      	mov	r0, sl
 8008106:	4659      	mov	r1, fp
 8008108:	f7f8 fcd0 	bl	8000aac <__aeabi_uldivmod>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4b0e      	ldr	r3, [pc, #56]	; (800814c <UART_SetConfig+0x38c>)
 8008112:	fba3 1302 	umull	r1, r3, r3, r2
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	2164      	movs	r1, #100	; 0x64
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	3332      	adds	r3, #50	; 0x32
 8008124:	4a09      	ldr	r2, [pc, #36]	; (800814c <UART_SetConfig+0x38c>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	f003 020f 	and.w	r2, r3, #15
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4432      	add	r2, r6
 8008136:	609a      	str	r2, [r3, #8]
}
 8008138:	bf00      	nop
 800813a:	377c      	adds	r7, #124	; 0x7c
 800813c:	46bd      	mov	sp, r7
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	bf00      	nop
 8008144:	40011000 	.word	0x40011000
 8008148:	40011400 	.word	0x40011400
 800814c:	51eb851f 	.word	0x51eb851f

08008150 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008168:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <FSMC_NORSRAM_Init+0xa0>)
 800816e:	4013      	ands	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800817a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008180:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008186:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800818c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008192:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008198:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800819e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80081a4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80081aa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80081b0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80081b6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80081bc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d103      	bne.n	80081d4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	fff00080 	.word	0xfff00080

080081f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008216:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008222:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800822a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008232:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	3b01      	subs	r3, #1
 800823a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800823c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	3b02      	subs	r3, #2
 8008244:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008246:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800824c:	4313      	orrs	r3, r2
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008288:	d122      	bne.n	80082d0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008292:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4b15      	ldr	r3, [pc, #84]	; (80082ec <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008298:	4013      	ands	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082a6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80082ae:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80082b6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082bc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6979      	ldr	r1, [r7, #20]
 80082ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80082ce:	e005      	b.n	80082dc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80082d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	371c      	adds	r7, #28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	cff00000 	.word	0xcff00000

080082f0 <__errno>:
 80082f0:	4b01      	ldr	r3, [pc, #4]	; (80082f8 <__errno+0x8>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	2000002c 	.word	0x2000002c

080082fc <__libc_init_array>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4d0d      	ldr	r5, [pc, #52]	; (8008334 <__libc_init_array+0x38>)
 8008300:	4c0d      	ldr	r4, [pc, #52]	; (8008338 <__libc_init_array+0x3c>)
 8008302:	1b64      	subs	r4, r4, r5
 8008304:	10a4      	asrs	r4, r4, #2
 8008306:	2600      	movs	r6, #0
 8008308:	42a6      	cmp	r6, r4
 800830a:	d109      	bne.n	8008320 <__libc_init_array+0x24>
 800830c:	4d0b      	ldr	r5, [pc, #44]	; (800833c <__libc_init_array+0x40>)
 800830e:	4c0c      	ldr	r4, [pc, #48]	; (8008340 <__libc_init_array+0x44>)
 8008310:	f000 fc4e 	bl	8008bb0 <_init>
 8008314:	1b64      	subs	r4, r4, r5
 8008316:	10a4      	asrs	r4, r4, #2
 8008318:	2600      	movs	r6, #0
 800831a:	42a6      	cmp	r6, r4
 800831c:	d105      	bne.n	800832a <__libc_init_array+0x2e>
 800831e:	bd70      	pop	{r4, r5, r6, pc}
 8008320:	f855 3b04 	ldr.w	r3, [r5], #4
 8008324:	4798      	blx	r3
 8008326:	3601      	adds	r6, #1
 8008328:	e7ee      	b.n	8008308 <__libc_init_array+0xc>
 800832a:	f855 3b04 	ldr.w	r3, [r5], #4
 800832e:	4798      	blx	r3
 8008330:	3601      	adds	r6, #1
 8008332:	e7f2      	b.n	800831a <__libc_init_array+0x1e>
 8008334:	0800bc0c 	.word	0x0800bc0c
 8008338:	0800bc0c 	.word	0x0800bc0c
 800833c:	0800bc0c 	.word	0x0800bc0c
 8008340:	0800bc10 	.word	0x0800bc10

08008344 <memset>:
 8008344:	4402      	add	r2, r0
 8008346:	4603      	mov	r3, r0
 8008348:	4293      	cmp	r3, r2
 800834a:	d100      	bne.n	800834e <memset+0xa>
 800834c:	4770      	bx	lr
 800834e:	f803 1b01 	strb.w	r1, [r3], #1
 8008352:	e7f9      	b.n	8008348 <memset+0x4>

08008354 <siprintf>:
 8008354:	b40e      	push	{r1, r2, r3}
 8008356:	b500      	push	{lr}
 8008358:	b09c      	sub	sp, #112	; 0x70
 800835a:	ab1d      	add	r3, sp, #116	; 0x74
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	9006      	str	r0, [sp, #24]
 8008360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <siprintf+0x38>)
 8008366:	9107      	str	r1, [sp, #28]
 8008368:	9104      	str	r1, [sp, #16]
 800836a:	4909      	ldr	r1, [pc, #36]	; (8008390 <siprintf+0x3c>)
 800836c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	a902      	add	r1, sp, #8
 8008378:	f000 f868 	bl	800844c <_svfiprintf_r>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	b01c      	add	sp, #112	; 0x70
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	2000002c 	.word	0x2000002c
 8008390:	ffff0208 	.word	0xffff0208

08008394 <__ssputs_r>:
 8008394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	688e      	ldr	r6, [r1, #8]
 800839a:	429e      	cmp	r6, r3
 800839c:	4682      	mov	sl, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	4690      	mov	r8, r2
 80083a2:	461f      	mov	r7, r3
 80083a4:	d838      	bhi.n	8008418 <__ssputs_r+0x84>
 80083a6:	898a      	ldrh	r2, [r1, #12]
 80083a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083ac:	d032      	beq.n	8008414 <__ssputs_r+0x80>
 80083ae:	6825      	ldr	r5, [r4, #0]
 80083b0:	6909      	ldr	r1, [r1, #16]
 80083b2:	eba5 0901 	sub.w	r9, r5, r1
 80083b6:	6965      	ldr	r5, [r4, #20]
 80083b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083c0:	3301      	adds	r3, #1
 80083c2:	444b      	add	r3, r9
 80083c4:	106d      	asrs	r5, r5, #1
 80083c6:	429d      	cmp	r5, r3
 80083c8:	bf38      	it	cc
 80083ca:	461d      	movcc	r5, r3
 80083cc:	0553      	lsls	r3, r2, #21
 80083ce:	d531      	bpl.n	8008434 <__ssputs_r+0xa0>
 80083d0:	4629      	mov	r1, r5
 80083d2:	f000 fb47 	bl	8008a64 <_malloc_r>
 80083d6:	4606      	mov	r6, r0
 80083d8:	b950      	cbnz	r0, 80083f0 <__ssputs_r+0x5c>
 80083da:	230c      	movs	r3, #12
 80083dc:	f8ca 3000 	str.w	r3, [sl]
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f0:	6921      	ldr	r1, [r4, #16]
 80083f2:	464a      	mov	r2, r9
 80083f4:	f000 fabe 	bl	8008974 <memcpy>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	6126      	str	r6, [r4, #16]
 8008406:	6165      	str	r5, [r4, #20]
 8008408:	444e      	add	r6, r9
 800840a:	eba5 0509 	sub.w	r5, r5, r9
 800840e:	6026      	str	r6, [r4, #0]
 8008410:	60a5      	str	r5, [r4, #8]
 8008412:	463e      	mov	r6, r7
 8008414:	42be      	cmp	r6, r7
 8008416:	d900      	bls.n	800841a <__ssputs_r+0x86>
 8008418:	463e      	mov	r6, r7
 800841a:	4632      	mov	r2, r6
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	4641      	mov	r1, r8
 8008420:	f000 fab6 	bl	8008990 <memmove>
 8008424:	68a3      	ldr	r3, [r4, #8]
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	1b9b      	subs	r3, r3, r6
 800842a:	4432      	add	r2, r6
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	2000      	movs	r0, #0
 8008432:	e7db      	b.n	80083ec <__ssputs_r+0x58>
 8008434:	462a      	mov	r2, r5
 8008436:	f000 fb6f 	bl	8008b18 <_realloc_r>
 800843a:	4606      	mov	r6, r0
 800843c:	2800      	cmp	r0, #0
 800843e:	d1e1      	bne.n	8008404 <__ssputs_r+0x70>
 8008440:	6921      	ldr	r1, [r4, #16]
 8008442:	4650      	mov	r0, sl
 8008444:	f000 fabe 	bl	80089c4 <_free_r>
 8008448:	e7c7      	b.n	80083da <__ssputs_r+0x46>
	...

0800844c <_svfiprintf_r>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	4698      	mov	r8, r3
 8008452:	898b      	ldrh	r3, [r1, #12]
 8008454:	061b      	lsls	r3, r3, #24
 8008456:	b09d      	sub	sp, #116	; 0x74
 8008458:	4607      	mov	r7, r0
 800845a:	460d      	mov	r5, r1
 800845c:	4614      	mov	r4, r2
 800845e:	d50e      	bpl.n	800847e <_svfiprintf_r+0x32>
 8008460:	690b      	ldr	r3, [r1, #16]
 8008462:	b963      	cbnz	r3, 800847e <_svfiprintf_r+0x32>
 8008464:	2140      	movs	r1, #64	; 0x40
 8008466:	f000 fafd 	bl	8008a64 <_malloc_r>
 800846a:	6028      	str	r0, [r5, #0]
 800846c:	6128      	str	r0, [r5, #16]
 800846e:	b920      	cbnz	r0, 800847a <_svfiprintf_r+0x2e>
 8008470:	230c      	movs	r3, #12
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008478:	e0d1      	b.n	800861e <_svfiprintf_r+0x1d2>
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	616b      	str	r3, [r5, #20]
 800847e:	2300      	movs	r3, #0
 8008480:	9309      	str	r3, [sp, #36]	; 0x24
 8008482:	2320      	movs	r3, #32
 8008484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008488:	f8cd 800c 	str.w	r8, [sp, #12]
 800848c:	2330      	movs	r3, #48	; 0x30
 800848e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008638 <_svfiprintf_r+0x1ec>
 8008492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008496:	f04f 0901 	mov.w	r9, #1
 800849a:	4623      	mov	r3, r4
 800849c:	469a      	mov	sl, r3
 800849e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a2:	b10a      	cbz	r2, 80084a8 <_svfiprintf_r+0x5c>
 80084a4:	2a25      	cmp	r2, #37	; 0x25
 80084a6:	d1f9      	bne.n	800849c <_svfiprintf_r+0x50>
 80084a8:	ebba 0b04 	subs.w	fp, sl, r4
 80084ac:	d00b      	beq.n	80084c6 <_svfiprintf_r+0x7a>
 80084ae:	465b      	mov	r3, fp
 80084b0:	4622      	mov	r2, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff ff6d 	bl	8008394 <__ssputs_r>
 80084ba:	3001      	adds	r0, #1
 80084bc:	f000 80aa 	beq.w	8008614 <_svfiprintf_r+0x1c8>
 80084c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c2:	445a      	add	r2, fp
 80084c4:	9209      	str	r2, [sp, #36]	; 0x24
 80084c6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80a2 	beq.w	8008614 <_svfiprintf_r+0x1c8>
 80084d0:	2300      	movs	r3, #0
 80084d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084da:	f10a 0a01 	add.w	sl, sl, #1
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084e6:	931a      	str	r3, [sp, #104]	; 0x68
 80084e8:	4654      	mov	r4, sl
 80084ea:	2205      	movs	r2, #5
 80084ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f0:	4851      	ldr	r0, [pc, #324]	; (8008638 <_svfiprintf_r+0x1ec>)
 80084f2:	f7f7 fe6d 	bl	80001d0 <memchr>
 80084f6:	9a04      	ldr	r2, [sp, #16]
 80084f8:	b9d8      	cbnz	r0, 8008532 <_svfiprintf_r+0xe6>
 80084fa:	06d0      	lsls	r0, r2, #27
 80084fc:	bf44      	itt	mi
 80084fe:	2320      	movmi	r3, #32
 8008500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008504:	0711      	lsls	r1, r2, #28
 8008506:	bf44      	itt	mi
 8008508:	232b      	movmi	r3, #43	; 0x2b
 800850a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800850e:	f89a 3000 	ldrb.w	r3, [sl]
 8008512:	2b2a      	cmp	r3, #42	; 0x2a
 8008514:	d015      	beq.n	8008542 <_svfiprintf_r+0xf6>
 8008516:	9a07      	ldr	r2, [sp, #28]
 8008518:	4654      	mov	r4, sl
 800851a:	2000      	movs	r0, #0
 800851c:	f04f 0c0a 	mov.w	ip, #10
 8008520:	4621      	mov	r1, r4
 8008522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008526:	3b30      	subs	r3, #48	; 0x30
 8008528:	2b09      	cmp	r3, #9
 800852a:	d94e      	bls.n	80085ca <_svfiprintf_r+0x17e>
 800852c:	b1b0      	cbz	r0, 800855c <_svfiprintf_r+0x110>
 800852e:	9207      	str	r2, [sp, #28]
 8008530:	e014      	b.n	800855c <_svfiprintf_r+0x110>
 8008532:	eba0 0308 	sub.w	r3, r0, r8
 8008536:	fa09 f303 	lsl.w	r3, r9, r3
 800853a:	4313      	orrs	r3, r2
 800853c:	9304      	str	r3, [sp, #16]
 800853e:	46a2      	mov	sl, r4
 8008540:	e7d2      	b.n	80084e8 <_svfiprintf_r+0x9c>
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	1d19      	adds	r1, r3, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	9103      	str	r1, [sp, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	bfbb      	ittet	lt
 800854e:	425b      	neglt	r3, r3
 8008550:	f042 0202 	orrlt.w	r2, r2, #2
 8008554:	9307      	strge	r3, [sp, #28]
 8008556:	9307      	strlt	r3, [sp, #28]
 8008558:	bfb8      	it	lt
 800855a:	9204      	strlt	r2, [sp, #16]
 800855c:	7823      	ldrb	r3, [r4, #0]
 800855e:	2b2e      	cmp	r3, #46	; 0x2e
 8008560:	d10c      	bne.n	800857c <_svfiprintf_r+0x130>
 8008562:	7863      	ldrb	r3, [r4, #1]
 8008564:	2b2a      	cmp	r3, #42	; 0x2a
 8008566:	d135      	bne.n	80085d4 <_svfiprintf_r+0x188>
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	9203      	str	r2, [sp, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bfb8      	it	lt
 8008574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008578:	3402      	adds	r4, #2
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008648 <_svfiprintf_r+0x1fc>
 8008580:	7821      	ldrb	r1, [r4, #0]
 8008582:	2203      	movs	r2, #3
 8008584:	4650      	mov	r0, sl
 8008586:	f7f7 fe23 	bl	80001d0 <memchr>
 800858a:	b140      	cbz	r0, 800859e <_svfiprintf_r+0x152>
 800858c:	2340      	movs	r3, #64	; 0x40
 800858e:	eba0 000a 	sub.w	r0, r0, sl
 8008592:	fa03 f000 	lsl.w	r0, r3, r0
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	4303      	orrs	r3, r0
 800859a:	3401      	adds	r4, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a2:	4826      	ldr	r0, [pc, #152]	; (800863c <_svfiprintf_r+0x1f0>)
 80085a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a8:	2206      	movs	r2, #6
 80085aa:	f7f7 fe11 	bl	80001d0 <memchr>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d038      	beq.n	8008624 <_svfiprintf_r+0x1d8>
 80085b2:	4b23      	ldr	r3, [pc, #140]	; (8008640 <_svfiprintf_r+0x1f4>)
 80085b4:	bb1b      	cbnz	r3, 80085fe <_svfiprintf_r+0x1b2>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	3307      	adds	r3, #7
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	3308      	adds	r3, #8
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	4433      	add	r3, r6
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	e767      	b.n	800849a <_svfiprintf_r+0x4e>
 80085ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ce:	460c      	mov	r4, r1
 80085d0:	2001      	movs	r0, #1
 80085d2:	e7a5      	b.n	8008520 <_svfiprintf_r+0xd4>
 80085d4:	2300      	movs	r3, #0
 80085d6:	3401      	adds	r4, #1
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	4619      	mov	r1, r3
 80085dc:	f04f 0c0a 	mov.w	ip, #10
 80085e0:	4620      	mov	r0, r4
 80085e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e6:	3a30      	subs	r2, #48	; 0x30
 80085e8:	2a09      	cmp	r2, #9
 80085ea:	d903      	bls.n	80085f4 <_svfiprintf_r+0x1a8>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0c5      	beq.n	800857c <_svfiprintf_r+0x130>
 80085f0:	9105      	str	r1, [sp, #20]
 80085f2:	e7c3      	b.n	800857c <_svfiprintf_r+0x130>
 80085f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f8:	4604      	mov	r4, r0
 80085fa:	2301      	movs	r3, #1
 80085fc:	e7f0      	b.n	80085e0 <_svfiprintf_r+0x194>
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	462a      	mov	r2, r5
 8008604:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <_svfiprintf_r+0x1f8>)
 8008606:	a904      	add	r1, sp, #16
 8008608:	4638      	mov	r0, r7
 800860a:	f3af 8000 	nop.w
 800860e:	1c42      	adds	r2, r0, #1
 8008610:	4606      	mov	r6, r0
 8008612:	d1d6      	bne.n	80085c2 <_svfiprintf_r+0x176>
 8008614:	89ab      	ldrh	r3, [r5, #12]
 8008616:	065b      	lsls	r3, r3, #25
 8008618:	f53f af2c 	bmi.w	8008474 <_svfiprintf_r+0x28>
 800861c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800861e:	b01d      	add	sp, #116	; 0x74
 8008620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008624:	ab03      	add	r3, sp, #12
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	462a      	mov	r2, r5
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <_svfiprintf_r+0x1f8>)
 800862c:	a904      	add	r1, sp, #16
 800862e:	4638      	mov	r0, r7
 8008630:	f000 f87a 	bl	8008728 <_printf_i>
 8008634:	e7eb      	b.n	800860e <_svfiprintf_r+0x1c2>
 8008636:	bf00      	nop
 8008638:	0800bbd0 	.word	0x0800bbd0
 800863c:	0800bbda 	.word	0x0800bbda
 8008640:	00000000 	.word	0x00000000
 8008644:	08008395 	.word	0x08008395
 8008648:	0800bbd6 	.word	0x0800bbd6

0800864c <_printf_common>:
 800864c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008650:	4616      	mov	r6, r2
 8008652:	4699      	mov	r9, r3
 8008654:	688a      	ldr	r2, [r1, #8]
 8008656:	690b      	ldr	r3, [r1, #16]
 8008658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800865c:	4293      	cmp	r3, r2
 800865e:	bfb8      	it	lt
 8008660:	4613      	movlt	r3, r2
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008668:	4607      	mov	r7, r0
 800866a:	460c      	mov	r4, r1
 800866c:	b10a      	cbz	r2, 8008672 <_printf_common+0x26>
 800866e:	3301      	adds	r3, #1
 8008670:	6033      	str	r3, [r6, #0]
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	0699      	lsls	r1, r3, #26
 8008676:	bf42      	ittt	mi
 8008678:	6833      	ldrmi	r3, [r6, #0]
 800867a:	3302      	addmi	r3, #2
 800867c:	6033      	strmi	r3, [r6, #0]
 800867e:	6825      	ldr	r5, [r4, #0]
 8008680:	f015 0506 	ands.w	r5, r5, #6
 8008684:	d106      	bne.n	8008694 <_printf_common+0x48>
 8008686:	f104 0a19 	add.w	sl, r4, #25
 800868a:	68e3      	ldr	r3, [r4, #12]
 800868c:	6832      	ldr	r2, [r6, #0]
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	42ab      	cmp	r3, r5
 8008692:	dc26      	bgt.n	80086e2 <_printf_common+0x96>
 8008694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008698:	1e13      	subs	r3, r2, #0
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	bf18      	it	ne
 800869e:	2301      	movne	r3, #1
 80086a0:	0692      	lsls	r2, r2, #26
 80086a2:	d42b      	bmi.n	80086fc <_printf_common+0xb0>
 80086a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086a8:	4649      	mov	r1, r9
 80086aa:	4638      	mov	r0, r7
 80086ac:	47c0      	blx	r8
 80086ae:	3001      	adds	r0, #1
 80086b0:	d01e      	beq.n	80086f0 <_printf_common+0xa4>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	68e5      	ldr	r5, [r4, #12]
 80086b6:	6832      	ldr	r2, [r6, #0]
 80086b8:	f003 0306 	and.w	r3, r3, #6
 80086bc:	2b04      	cmp	r3, #4
 80086be:	bf08      	it	eq
 80086c0:	1aad      	subeq	r5, r5, r2
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	6922      	ldr	r2, [r4, #16]
 80086c6:	bf0c      	ite	eq
 80086c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086cc:	2500      	movne	r5, #0
 80086ce:	4293      	cmp	r3, r2
 80086d0:	bfc4      	itt	gt
 80086d2:	1a9b      	subgt	r3, r3, r2
 80086d4:	18ed      	addgt	r5, r5, r3
 80086d6:	2600      	movs	r6, #0
 80086d8:	341a      	adds	r4, #26
 80086da:	42b5      	cmp	r5, r6
 80086dc:	d11a      	bne.n	8008714 <_printf_common+0xc8>
 80086de:	2000      	movs	r0, #0
 80086e0:	e008      	b.n	80086f4 <_printf_common+0xa8>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4652      	mov	r2, sl
 80086e6:	4649      	mov	r1, r9
 80086e8:	4638      	mov	r0, r7
 80086ea:	47c0      	blx	r8
 80086ec:	3001      	adds	r0, #1
 80086ee:	d103      	bne.n	80086f8 <_printf_common+0xac>
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	3501      	adds	r5, #1
 80086fa:	e7c6      	b.n	800868a <_printf_common+0x3e>
 80086fc:	18e1      	adds	r1, r4, r3
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	2030      	movs	r0, #48	; 0x30
 8008702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008706:	4422      	add	r2, r4
 8008708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800870c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008710:	3302      	adds	r3, #2
 8008712:	e7c7      	b.n	80086a4 <_printf_common+0x58>
 8008714:	2301      	movs	r3, #1
 8008716:	4622      	mov	r2, r4
 8008718:	4649      	mov	r1, r9
 800871a:	4638      	mov	r0, r7
 800871c:	47c0      	blx	r8
 800871e:	3001      	adds	r0, #1
 8008720:	d0e6      	beq.n	80086f0 <_printf_common+0xa4>
 8008722:	3601      	adds	r6, #1
 8008724:	e7d9      	b.n	80086da <_printf_common+0x8e>
	...

08008728 <_printf_i>:
 8008728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800872c:	460c      	mov	r4, r1
 800872e:	4691      	mov	r9, r2
 8008730:	7e27      	ldrb	r7, [r4, #24]
 8008732:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008734:	2f78      	cmp	r7, #120	; 0x78
 8008736:	4680      	mov	r8, r0
 8008738:	469a      	mov	sl, r3
 800873a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800873e:	d807      	bhi.n	8008750 <_printf_i+0x28>
 8008740:	2f62      	cmp	r7, #98	; 0x62
 8008742:	d80a      	bhi.n	800875a <_printf_i+0x32>
 8008744:	2f00      	cmp	r7, #0
 8008746:	f000 80d8 	beq.w	80088fa <_printf_i+0x1d2>
 800874a:	2f58      	cmp	r7, #88	; 0x58
 800874c:	f000 80a3 	beq.w	8008896 <_printf_i+0x16e>
 8008750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008758:	e03a      	b.n	80087d0 <_printf_i+0xa8>
 800875a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800875e:	2b15      	cmp	r3, #21
 8008760:	d8f6      	bhi.n	8008750 <_printf_i+0x28>
 8008762:	a001      	add	r0, pc, #4	; (adr r0, 8008768 <_printf_i+0x40>)
 8008764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008768:	080087c1 	.word	0x080087c1
 800876c:	080087d5 	.word	0x080087d5
 8008770:	08008751 	.word	0x08008751
 8008774:	08008751 	.word	0x08008751
 8008778:	08008751 	.word	0x08008751
 800877c:	08008751 	.word	0x08008751
 8008780:	080087d5 	.word	0x080087d5
 8008784:	08008751 	.word	0x08008751
 8008788:	08008751 	.word	0x08008751
 800878c:	08008751 	.word	0x08008751
 8008790:	08008751 	.word	0x08008751
 8008794:	080088e1 	.word	0x080088e1
 8008798:	08008805 	.word	0x08008805
 800879c:	080088c3 	.word	0x080088c3
 80087a0:	08008751 	.word	0x08008751
 80087a4:	08008751 	.word	0x08008751
 80087a8:	08008903 	.word	0x08008903
 80087ac:	08008751 	.word	0x08008751
 80087b0:	08008805 	.word	0x08008805
 80087b4:	08008751 	.word	0x08008751
 80087b8:	08008751 	.word	0x08008751
 80087bc:	080088cb 	.word	0x080088cb
 80087c0:	680b      	ldr	r3, [r1, #0]
 80087c2:	1d1a      	adds	r2, r3, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	600a      	str	r2, [r1, #0]
 80087c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087d0:	2301      	movs	r3, #1
 80087d2:	e0a3      	b.n	800891c <_printf_i+0x1f4>
 80087d4:	6825      	ldr	r5, [r4, #0]
 80087d6:	6808      	ldr	r0, [r1, #0]
 80087d8:	062e      	lsls	r6, r5, #24
 80087da:	f100 0304 	add.w	r3, r0, #4
 80087de:	d50a      	bpl.n	80087f6 <_printf_i+0xce>
 80087e0:	6805      	ldr	r5, [r0, #0]
 80087e2:	600b      	str	r3, [r1, #0]
 80087e4:	2d00      	cmp	r5, #0
 80087e6:	da03      	bge.n	80087f0 <_printf_i+0xc8>
 80087e8:	232d      	movs	r3, #45	; 0x2d
 80087ea:	426d      	negs	r5, r5
 80087ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f0:	485e      	ldr	r0, [pc, #376]	; (800896c <_printf_i+0x244>)
 80087f2:	230a      	movs	r3, #10
 80087f4:	e019      	b.n	800882a <_printf_i+0x102>
 80087f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087fa:	6805      	ldr	r5, [r0, #0]
 80087fc:	600b      	str	r3, [r1, #0]
 80087fe:	bf18      	it	ne
 8008800:	b22d      	sxthne	r5, r5
 8008802:	e7ef      	b.n	80087e4 <_printf_i+0xbc>
 8008804:	680b      	ldr	r3, [r1, #0]
 8008806:	6825      	ldr	r5, [r4, #0]
 8008808:	1d18      	adds	r0, r3, #4
 800880a:	6008      	str	r0, [r1, #0]
 800880c:	0628      	lsls	r0, r5, #24
 800880e:	d501      	bpl.n	8008814 <_printf_i+0xec>
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	e002      	b.n	800881a <_printf_i+0xf2>
 8008814:	0669      	lsls	r1, r5, #25
 8008816:	d5fb      	bpl.n	8008810 <_printf_i+0xe8>
 8008818:	881d      	ldrh	r5, [r3, #0]
 800881a:	4854      	ldr	r0, [pc, #336]	; (800896c <_printf_i+0x244>)
 800881c:	2f6f      	cmp	r7, #111	; 0x6f
 800881e:	bf0c      	ite	eq
 8008820:	2308      	moveq	r3, #8
 8008822:	230a      	movne	r3, #10
 8008824:	2100      	movs	r1, #0
 8008826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800882a:	6866      	ldr	r6, [r4, #4]
 800882c:	60a6      	str	r6, [r4, #8]
 800882e:	2e00      	cmp	r6, #0
 8008830:	bfa2      	ittt	ge
 8008832:	6821      	ldrge	r1, [r4, #0]
 8008834:	f021 0104 	bicge.w	r1, r1, #4
 8008838:	6021      	strge	r1, [r4, #0]
 800883a:	b90d      	cbnz	r5, 8008840 <_printf_i+0x118>
 800883c:	2e00      	cmp	r6, #0
 800883e:	d04d      	beq.n	80088dc <_printf_i+0x1b4>
 8008840:	4616      	mov	r6, r2
 8008842:	fbb5 f1f3 	udiv	r1, r5, r3
 8008846:	fb03 5711 	mls	r7, r3, r1, r5
 800884a:	5dc7      	ldrb	r7, [r0, r7]
 800884c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008850:	462f      	mov	r7, r5
 8008852:	42bb      	cmp	r3, r7
 8008854:	460d      	mov	r5, r1
 8008856:	d9f4      	bls.n	8008842 <_printf_i+0x11a>
 8008858:	2b08      	cmp	r3, #8
 800885a:	d10b      	bne.n	8008874 <_printf_i+0x14c>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	07df      	lsls	r7, r3, #31
 8008860:	d508      	bpl.n	8008874 <_printf_i+0x14c>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	6861      	ldr	r1, [r4, #4]
 8008866:	4299      	cmp	r1, r3
 8008868:	bfde      	ittt	le
 800886a:	2330      	movle	r3, #48	; 0x30
 800886c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008870:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008874:	1b92      	subs	r2, r2, r6
 8008876:	6122      	str	r2, [r4, #16]
 8008878:	f8cd a000 	str.w	sl, [sp]
 800887c:	464b      	mov	r3, r9
 800887e:	aa03      	add	r2, sp, #12
 8008880:	4621      	mov	r1, r4
 8008882:	4640      	mov	r0, r8
 8008884:	f7ff fee2 	bl	800864c <_printf_common>
 8008888:	3001      	adds	r0, #1
 800888a:	d14c      	bne.n	8008926 <_printf_i+0x1fe>
 800888c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008890:	b004      	add	sp, #16
 8008892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008896:	4835      	ldr	r0, [pc, #212]	; (800896c <_printf_i+0x244>)
 8008898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	680e      	ldr	r6, [r1, #0]
 80088a0:	061f      	lsls	r7, r3, #24
 80088a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80088a6:	600e      	str	r6, [r1, #0]
 80088a8:	d514      	bpl.n	80088d4 <_printf_i+0x1ac>
 80088aa:	07d9      	lsls	r1, r3, #31
 80088ac:	bf44      	itt	mi
 80088ae:	f043 0320 	orrmi.w	r3, r3, #32
 80088b2:	6023      	strmi	r3, [r4, #0]
 80088b4:	b91d      	cbnz	r5, 80088be <_printf_i+0x196>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f023 0320 	bic.w	r3, r3, #32
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	2310      	movs	r3, #16
 80088c0:	e7b0      	b.n	8008824 <_printf_i+0xfc>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f043 0320 	orr.w	r3, r3, #32
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	2378      	movs	r3, #120	; 0x78
 80088cc:	4828      	ldr	r0, [pc, #160]	; (8008970 <_printf_i+0x248>)
 80088ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088d2:	e7e3      	b.n	800889c <_printf_i+0x174>
 80088d4:	065e      	lsls	r6, r3, #25
 80088d6:	bf48      	it	mi
 80088d8:	b2ad      	uxthmi	r5, r5
 80088da:	e7e6      	b.n	80088aa <_printf_i+0x182>
 80088dc:	4616      	mov	r6, r2
 80088de:	e7bb      	b.n	8008858 <_printf_i+0x130>
 80088e0:	680b      	ldr	r3, [r1, #0]
 80088e2:	6826      	ldr	r6, [r4, #0]
 80088e4:	6960      	ldr	r0, [r4, #20]
 80088e6:	1d1d      	adds	r5, r3, #4
 80088e8:	600d      	str	r5, [r1, #0]
 80088ea:	0635      	lsls	r5, r6, #24
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	d501      	bpl.n	80088f4 <_printf_i+0x1cc>
 80088f0:	6018      	str	r0, [r3, #0]
 80088f2:	e002      	b.n	80088fa <_printf_i+0x1d2>
 80088f4:	0671      	lsls	r1, r6, #25
 80088f6:	d5fb      	bpl.n	80088f0 <_printf_i+0x1c8>
 80088f8:	8018      	strh	r0, [r3, #0]
 80088fa:	2300      	movs	r3, #0
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	4616      	mov	r6, r2
 8008900:	e7ba      	b.n	8008878 <_printf_i+0x150>
 8008902:	680b      	ldr	r3, [r1, #0]
 8008904:	1d1a      	adds	r2, r3, #4
 8008906:	600a      	str	r2, [r1, #0]
 8008908:	681e      	ldr	r6, [r3, #0]
 800890a:	6862      	ldr	r2, [r4, #4]
 800890c:	2100      	movs	r1, #0
 800890e:	4630      	mov	r0, r6
 8008910:	f7f7 fc5e 	bl	80001d0 <memchr>
 8008914:	b108      	cbz	r0, 800891a <_printf_i+0x1f2>
 8008916:	1b80      	subs	r0, r0, r6
 8008918:	6060      	str	r0, [r4, #4]
 800891a:	6863      	ldr	r3, [r4, #4]
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	2300      	movs	r3, #0
 8008920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008924:	e7a8      	b.n	8008878 <_printf_i+0x150>
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	4632      	mov	r2, r6
 800892a:	4649      	mov	r1, r9
 800892c:	4640      	mov	r0, r8
 800892e:	47d0      	blx	sl
 8008930:	3001      	adds	r0, #1
 8008932:	d0ab      	beq.n	800888c <_printf_i+0x164>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	079b      	lsls	r3, r3, #30
 8008938:	d413      	bmi.n	8008962 <_printf_i+0x23a>
 800893a:	68e0      	ldr	r0, [r4, #12]
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	4298      	cmp	r0, r3
 8008940:	bfb8      	it	lt
 8008942:	4618      	movlt	r0, r3
 8008944:	e7a4      	b.n	8008890 <_printf_i+0x168>
 8008946:	2301      	movs	r3, #1
 8008948:	4632      	mov	r2, r6
 800894a:	4649      	mov	r1, r9
 800894c:	4640      	mov	r0, r8
 800894e:	47d0      	blx	sl
 8008950:	3001      	adds	r0, #1
 8008952:	d09b      	beq.n	800888c <_printf_i+0x164>
 8008954:	3501      	adds	r5, #1
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	9903      	ldr	r1, [sp, #12]
 800895a:	1a5b      	subs	r3, r3, r1
 800895c:	42ab      	cmp	r3, r5
 800895e:	dcf2      	bgt.n	8008946 <_printf_i+0x21e>
 8008960:	e7eb      	b.n	800893a <_printf_i+0x212>
 8008962:	2500      	movs	r5, #0
 8008964:	f104 0619 	add.w	r6, r4, #25
 8008968:	e7f5      	b.n	8008956 <_printf_i+0x22e>
 800896a:	bf00      	nop
 800896c:	0800bbe1 	.word	0x0800bbe1
 8008970:	0800bbf2 	.word	0x0800bbf2

08008974 <memcpy>:
 8008974:	440a      	add	r2, r1
 8008976:	4291      	cmp	r1, r2
 8008978:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800897c:	d100      	bne.n	8008980 <memcpy+0xc>
 800897e:	4770      	bx	lr
 8008980:	b510      	push	{r4, lr}
 8008982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898a:	4291      	cmp	r1, r2
 800898c:	d1f9      	bne.n	8008982 <memcpy+0xe>
 800898e:	bd10      	pop	{r4, pc}

08008990 <memmove>:
 8008990:	4288      	cmp	r0, r1
 8008992:	b510      	push	{r4, lr}
 8008994:	eb01 0402 	add.w	r4, r1, r2
 8008998:	d902      	bls.n	80089a0 <memmove+0x10>
 800899a:	4284      	cmp	r4, r0
 800899c:	4623      	mov	r3, r4
 800899e:	d807      	bhi.n	80089b0 <memmove+0x20>
 80089a0:	1e43      	subs	r3, r0, #1
 80089a2:	42a1      	cmp	r1, r4
 80089a4:	d008      	beq.n	80089b8 <memmove+0x28>
 80089a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ae:	e7f8      	b.n	80089a2 <memmove+0x12>
 80089b0:	4402      	add	r2, r0
 80089b2:	4601      	mov	r1, r0
 80089b4:	428a      	cmp	r2, r1
 80089b6:	d100      	bne.n	80089ba <memmove+0x2a>
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089c2:	e7f7      	b.n	80089b4 <memmove+0x24>

080089c4 <_free_r>:
 80089c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089c6:	2900      	cmp	r1, #0
 80089c8:	d048      	beq.n	8008a5c <_free_r+0x98>
 80089ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ce:	9001      	str	r0, [sp, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f1a1 0404 	sub.w	r4, r1, #4
 80089d6:	bfb8      	it	lt
 80089d8:	18e4      	addlt	r4, r4, r3
 80089da:	f000 f8d3 	bl	8008b84 <__malloc_lock>
 80089de:	4a20      	ldr	r2, [pc, #128]	; (8008a60 <_free_r+0x9c>)
 80089e0:	9801      	ldr	r0, [sp, #4]
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	4615      	mov	r5, r2
 80089e6:	b933      	cbnz	r3, 80089f6 <_free_r+0x32>
 80089e8:	6063      	str	r3, [r4, #4]
 80089ea:	6014      	str	r4, [r2, #0]
 80089ec:	b003      	add	sp, #12
 80089ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f2:	f000 b8cd 	b.w	8008b90 <__malloc_unlock>
 80089f6:	42a3      	cmp	r3, r4
 80089f8:	d90b      	bls.n	8008a12 <_free_r+0x4e>
 80089fa:	6821      	ldr	r1, [r4, #0]
 80089fc:	1862      	adds	r2, r4, r1
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bf04      	itt	eq
 8008a02:	681a      	ldreq	r2, [r3, #0]
 8008a04:	685b      	ldreq	r3, [r3, #4]
 8008a06:	6063      	str	r3, [r4, #4]
 8008a08:	bf04      	itt	eq
 8008a0a:	1852      	addeq	r2, r2, r1
 8008a0c:	6022      	streq	r2, [r4, #0]
 8008a0e:	602c      	str	r4, [r5, #0]
 8008a10:	e7ec      	b.n	80089ec <_free_r+0x28>
 8008a12:	461a      	mov	r2, r3
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b10b      	cbz	r3, 8008a1c <_free_r+0x58>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d9fa      	bls.n	8008a12 <_free_r+0x4e>
 8008a1c:	6811      	ldr	r1, [r2, #0]
 8008a1e:	1855      	adds	r5, r2, r1
 8008a20:	42a5      	cmp	r5, r4
 8008a22:	d10b      	bne.n	8008a3c <_free_r+0x78>
 8008a24:	6824      	ldr	r4, [r4, #0]
 8008a26:	4421      	add	r1, r4
 8008a28:	1854      	adds	r4, r2, r1
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	6011      	str	r1, [r2, #0]
 8008a2e:	d1dd      	bne.n	80089ec <_free_r+0x28>
 8008a30:	681c      	ldr	r4, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	6053      	str	r3, [r2, #4]
 8008a36:	4421      	add	r1, r4
 8008a38:	6011      	str	r1, [r2, #0]
 8008a3a:	e7d7      	b.n	80089ec <_free_r+0x28>
 8008a3c:	d902      	bls.n	8008a44 <_free_r+0x80>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	6003      	str	r3, [r0, #0]
 8008a42:	e7d3      	b.n	80089ec <_free_r+0x28>
 8008a44:	6825      	ldr	r5, [r4, #0]
 8008a46:	1961      	adds	r1, r4, r5
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	bf04      	itt	eq
 8008a4c:	6819      	ldreq	r1, [r3, #0]
 8008a4e:	685b      	ldreq	r3, [r3, #4]
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	bf04      	itt	eq
 8008a54:	1949      	addeq	r1, r1, r5
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	6054      	str	r4, [r2, #4]
 8008a5a:	e7c7      	b.n	80089ec <_free_r+0x28>
 8008a5c:	b003      	add	sp, #12
 8008a5e:	bd30      	pop	{r4, r5, pc}
 8008a60:	200000d4 	.word	0x200000d4

08008a64 <_malloc_r>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	1ccd      	adds	r5, r1, #3
 8008a68:	f025 0503 	bic.w	r5, r5, #3
 8008a6c:	3508      	adds	r5, #8
 8008a6e:	2d0c      	cmp	r5, #12
 8008a70:	bf38      	it	cc
 8008a72:	250c      	movcc	r5, #12
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	4606      	mov	r6, r0
 8008a78:	db01      	blt.n	8008a7e <_malloc_r+0x1a>
 8008a7a:	42a9      	cmp	r1, r5
 8008a7c:	d903      	bls.n	8008a86 <_malloc_r+0x22>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	6033      	str	r3, [r6, #0]
 8008a82:	2000      	movs	r0, #0
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a86:	f000 f87d 	bl	8008b84 <__malloc_lock>
 8008a8a:	4921      	ldr	r1, [pc, #132]	; (8008b10 <_malloc_r+0xac>)
 8008a8c:	680a      	ldr	r2, [r1, #0]
 8008a8e:	4614      	mov	r4, r2
 8008a90:	b99c      	cbnz	r4, 8008aba <_malloc_r+0x56>
 8008a92:	4f20      	ldr	r7, [pc, #128]	; (8008b14 <_malloc_r+0xb0>)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	b923      	cbnz	r3, 8008aa2 <_malloc_r+0x3e>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f862 	bl	8008b64 <_sbrk_r>
 8008aa0:	6038      	str	r0, [r7, #0]
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f000 f85d 	bl	8008b64 <_sbrk_r>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d123      	bne.n	8008af6 <_malloc_r+0x92>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f000 f86c 	bl	8008b90 <__malloc_unlock>
 8008ab8:	e7e3      	b.n	8008a82 <_malloc_r+0x1e>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	1b5b      	subs	r3, r3, r5
 8008abe:	d417      	bmi.n	8008af0 <_malloc_r+0x8c>
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	d903      	bls.n	8008acc <_malloc_r+0x68>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	441c      	add	r4, r3
 8008ac8:	6025      	str	r5, [r4, #0]
 8008aca:	e004      	b.n	8008ad6 <_malloc_r+0x72>
 8008acc:	6863      	ldr	r3, [r4, #4]
 8008ace:	42a2      	cmp	r2, r4
 8008ad0:	bf0c      	ite	eq
 8008ad2:	600b      	streq	r3, [r1, #0]
 8008ad4:	6053      	strne	r3, [r2, #4]
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f000 f85a 	bl	8008b90 <__malloc_unlock>
 8008adc:	f104 000b 	add.w	r0, r4, #11
 8008ae0:	1d23      	adds	r3, r4, #4
 8008ae2:	f020 0007 	bic.w	r0, r0, #7
 8008ae6:	1ac2      	subs	r2, r0, r3
 8008ae8:	d0cc      	beq.n	8008a84 <_malloc_r+0x20>
 8008aea:	1a1b      	subs	r3, r3, r0
 8008aec:	50a3      	str	r3, [r4, r2]
 8008aee:	e7c9      	b.n	8008a84 <_malloc_r+0x20>
 8008af0:	4622      	mov	r2, r4
 8008af2:	6864      	ldr	r4, [r4, #4]
 8008af4:	e7cc      	b.n	8008a90 <_malloc_r+0x2c>
 8008af6:	1cc4      	adds	r4, r0, #3
 8008af8:	f024 0403 	bic.w	r4, r4, #3
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d0e3      	beq.n	8008ac8 <_malloc_r+0x64>
 8008b00:	1a21      	subs	r1, r4, r0
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 f82e 	bl	8008b64 <_sbrk_r>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d1dd      	bne.n	8008ac8 <_malloc_r+0x64>
 8008b0c:	e7cf      	b.n	8008aae <_malloc_r+0x4a>
 8008b0e:	bf00      	nop
 8008b10:	200000d4 	.word	0x200000d4
 8008b14:	200000d8 	.word	0x200000d8

08008b18 <_realloc_r>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	4614      	mov	r4, r2
 8008b1e:	460e      	mov	r6, r1
 8008b20:	b921      	cbnz	r1, 8008b2c <_realloc_r+0x14>
 8008b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b26:	4611      	mov	r1, r2
 8008b28:	f7ff bf9c 	b.w	8008a64 <_malloc_r>
 8008b2c:	b922      	cbnz	r2, 8008b38 <_realloc_r+0x20>
 8008b2e:	f7ff ff49 	bl	80089c4 <_free_r>
 8008b32:	4625      	mov	r5, r4
 8008b34:	4628      	mov	r0, r5
 8008b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b38:	f000 f830 	bl	8008b9c <_malloc_usable_size_r>
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d20f      	bcs.n	8008b60 <_realloc_r+0x48>
 8008b40:	4621      	mov	r1, r4
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff ff8e 	bl	8008a64 <_malloc_r>
 8008b48:	4605      	mov	r5, r0
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0f2      	beq.n	8008b34 <_realloc_r+0x1c>
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4622      	mov	r2, r4
 8008b52:	f7ff ff0f 	bl	8008974 <memcpy>
 8008b56:	4631      	mov	r1, r6
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff ff33 	bl	80089c4 <_free_r>
 8008b5e:	e7e9      	b.n	8008b34 <_realloc_r+0x1c>
 8008b60:	4635      	mov	r5, r6
 8008b62:	e7e7      	b.n	8008b34 <_realloc_r+0x1c>

08008b64 <_sbrk_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4d06      	ldr	r5, [pc, #24]	; (8008b80 <_sbrk_r+0x1c>)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	602b      	str	r3, [r5, #0]
 8008b70:	f7fa f95a 	bl	8002e28 <_sbrk>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_sbrk_r+0x1a>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_sbrk_r+0x1a>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20000c10 	.word	0x20000c10

08008b84 <__malloc_lock>:
 8008b84:	4801      	ldr	r0, [pc, #4]	; (8008b8c <__malloc_lock+0x8>)
 8008b86:	f000 b811 	b.w	8008bac <__retarget_lock_acquire_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	20000c18 	.word	0x20000c18

08008b90 <__malloc_unlock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	; (8008b98 <__malloc_unlock+0x8>)
 8008b92:	f000 b80c 	b.w	8008bae <__retarget_lock_release_recursive>
 8008b96:	bf00      	nop
 8008b98:	20000c18 	.word	0x20000c18

08008b9c <_malloc_usable_size_r>:
 8008b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba0:	1f18      	subs	r0, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfbc      	itt	lt
 8008ba6:	580b      	ldrlt	r3, [r1, r0]
 8008ba8:	18c0      	addlt	r0, r0, r3
 8008baa:	4770      	bx	lr

08008bac <__retarget_lock_acquire_recursive>:
 8008bac:	4770      	bx	lr

08008bae <__retarget_lock_release_recursive>:
 8008bae:	4770      	bx	lr

08008bb0 <_init>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	bf00      	nop
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr

08008bbc <_fini>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr
